(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{373:function(t,s,a){t.exports=a.p+"assets/img/image-20210720152950384.ba95c764.png"},374:function(t,s,a){t.exports=a.p+"assets/img/image-20210715114222299.8daf59b0.png"},375:function(t,s,a){t.exports=a.p+"assets/img/image-20210716112216388.94ee9f25.png"},411:function(t,s,a){"use strict";a.r(s);var n=a(19),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h2",{attrs:{id:"_1、什么是集合"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1、什么是集合"}},[t._v("#")]),t._v(" 1、什么是集合？")]),t._v(" "),n("p",[n("img",{attrs:{src:a(373),alt:"image-20210720152950384"}})]),t._v(" "),n("blockquote",[n("ul",[n("li",[t._v("集合就是一个放数据的容器，准确的说是放数据对象引用的容器")]),t._v(" "),n("li",[t._v("集合类存放的都是对象的引用，而不是对象的本身")]),t._v(" "),n("li",[t._v("集合类型主要有3种：set(集）、list(列表）和map(映射)。")])]),t._v(" "),n("p",[t._v("集合的特点主要有如下两点：")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("集合用于存储对象的容器，对象是用来封装数据，对象多了也需要存储集中式管理。")])]),t._v(" "),n("li",[n("p",[t._v("和数组对比对象的大小不确定。因为集合是可变长度的。数组需要提前定义大小")])])])]),t._v(" "),n("h2",{attrs:{id:"_2、常用的集合类有哪些"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2、常用的集合类有哪些"}},[t._v("#")]),t._v(" 2、常用的集合类有哪些？")]),t._v(" "),n("p",[n("img",{attrs:{src:a(374),alt:"image-20210715114222299"}})]),t._v(" "),n("p",[n("strong",[t._v("Collection")]),t._v("集合主要有"),n("strong",[t._v("List")]),t._v("和"),n("strong",[t._v("Set")]),t._v("两大接口：")]),t._v(" "),n("ul",[n("li",[n("strong",[t._v("List")]),t._v("：一个有序（元素存入集合的顺序和取出的顺序一致）容器，元素可以重复，可以插入多个null元素，元素都有索引。常用的实现类有 ArrayList、LinkedList 和 Vector。")]),t._v(" "),n("li",[n("strong",[t._v("Set")]),t._v("：一个无序（存入和取出顺序有可能不一致）容器，不可以存储重复元素，只允许存入一个null元素，必须保证元素唯一性。Set 接口常用实现类是 HashSet、LinkedHashSet 以及TreeSet。")])]),t._v(" "),n("p",[n("strong",[t._v("Map")]),t._v("是一个键值对集合，存储键、值和之间的映射。 Key无序，唯一；value 不要求有序，允许重复。Map没有继承于Collection接口，从Map集合中检索元素时，只要给出键对象，就会返回对应的值对象。")]),t._v(" "),n("ul",[n("li",[t._v("Map 的常用实现类：HashMap、TreeMap、HashTable、LinkedHashMap、ConcurrentHashMap")])]),t._v(" "),n("h2",{attrs:{id:"_3、快速失败-fail-fast-和安全失败-fail-safe-的区别是什么"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3、快速失败-fail-fast-和安全失败-fail-safe-的区别是什么"}},[t._v("#")]),t._v(" 3、快速失败(fail-fast)和安全失败(fail-safe)的区别是什么？")]),t._v(" "),n("blockquote",[n("p",[n("strong",[t._v("Iterator 的安全失败是基于对底层集合做拷贝")]),t._v("，因此，它不受源集合上修改的影响。java.util包下面的所有的集合类都是快速失败的，而 java.util.concurrent 包下面的所有的类都是安全失败的。快速失败的迭代器会抛出 ConcurrentModificationException 异常，而安全失败的迭代器永远不会抛出这样的异常。")])]),t._v(" "),n("h2",{attrs:{id:"_4、list专题-迭代器iterator是什么"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4、list专题-迭代器iterator是什么"}},[t._v("#")]),t._v(" 4、List专题——迭代器Iterator是什么？")]),t._v(" "),n("blockquote",[n("p",[t._v("Iterator 接口提供遍历任何 Collection 的接口。我们可以从一个 Collection 中使用迭代器方法来获取迭代器实例。迭代器取代了 Java 集合框架中的 Enumeration，迭代器允许调用者在迭代过程中移除元素。")]),t._v(" "),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Collection")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("E")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Iterable")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("E")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br")])])]),t._v(" "),n("h2",{attrs:{id:"_5、list专题-iterator怎么使用-有什么特点"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5、list专题-iterator怎么使用-有什么特点"}},[t._v("#")]),t._v(" 5、List专题——Iterator怎么使用？有什么特点？")]),t._v(" "),n("blockquote",[n("p",[t._v("使用：")]),t._v(" "),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" list "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArrayList")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Iterator")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" it "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" list"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("iterator")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("it"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("hasNext")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" obj "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" it"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("next")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br")])]),n("p",[t._v("Iterator 的特点是只能"),n("strong",[t._v("单向遍历")]),t._v("，但是更加安全，因为它可以确保，在当前遍历的集合元素被更改的时候，就会抛出 ConcurrentModifificationException 异常。")])]),t._v(" "),n("h2",{attrs:{id:"_6、list专题-如何边遍历边移除collection中的元素"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6、list专题-如何边遍历边移除collection中的元素"}},[t._v("#")]),t._v(" 6、List专题——如何边遍历边移除Collection中的元素？")]),t._v(" "),n("blockquote",[n("p",[t._v("边遍历边修改 Collection 的唯一正确方式是使用 Iterator.remove() 方法")]),t._v(" "),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Iterator")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" it "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" list"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("iterator")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("it"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("hasNext")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// do something* it.remove(); ")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br")])]),n("p",[n("strong",[t._v("常见错误代码")]),t._v("：用for循环进行移除")]),t._v(" "),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" list"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n list"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("remove")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br")])]),n("p",[t._v("解析：运行以上错误代码会报 "),n("strong",[t._v("ConcurrentModifificationException")]),t._v(" "),n("strong",[t._v("异常")]),t._v("。这是因为当使用foreach(for(Integer i : list)) 语句时，会自动生成一个iterator 来遍历该 list，但同时该 list 正在被Iterator.remove() 修改。Java 一般不允许一个线程在遍历 Collection 时另一个线程修改它。")])]),t._v(" "),n("h2",{attrs:{id:"_7、-list专题-iterator和listiterator有什么区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7、-list专题-iterator和listiterator有什么区别"}},[t._v("#")]),t._v(" 7、 List专题——Iterator和ListIterator有什么区别？")]),t._v(" "),n("blockquote",[n("ul",[n("li",[n("p",[t._v("Iterator 可以遍历 Set 和 List 集合，而 ListIterator 只能遍历 List。")])]),t._v(" "),n("li",[n("p",[t._v("Iterator 只能单向遍历，而 ListIterator 可以双向遍历（向前/后遍历）。")])]),t._v(" "),n("li",[n("p",[t._v("ListIterator 实现 Iterator 接口，然后添加了一些额外的功能，比如添加一个元素、替换一个元素、获取前面或后面元素的索引位置。")])])])]),t._v(" "),n("h2",{attrs:{id:"_8、-list专题-遍历一个list有哪些不同的方式-每种方法的实现原理是什么-java中list遍历的最佳实践是什么"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_8、-list专题-遍历一个list有哪些不同的方式-每种方法的实现原理是什么-java中list遍历的最佳实践是什么"}},[t._v("#")]),t._v(" 8、 List专题——遍历一个List有哪些不同的方式？每种方法的实现原理是什么？Java中List遍历的最佳实践是什么？")]),t._v(" "),n("p",[n("strong",[t._v("遍历方式以及原理")]),t._v("：")]),t._v(" "),n("blockquote",[n("ol",[n("li",[n("strong",[t._v("for循环")]),t._v("：基于计数器。在集合外部维护一个计数器，然后依次读取每一个位置的元素，当读取到最后一个元素后停止。")]),t._v(" "),n("li",[n("strong",[t._v("迭代器遍历")]),t._v("：Iterator 是面向对象的一个设计模式，目的是屏蔽不同数据集合的特点，统一遍历集合的接口。Java 在 Collections 中支持了 Iterator 模式。")]),t._v(" "),n("li",[n("strong",[t._v("foreach 循环")]),t._v("：foreach 内部也是采用了 Iterator 的方式实现，使用时不需要显式声明Iterator 或计数器。优点是代码简洁，不易出错；缺点是只能做简单的遍历，不能在遍历过程中操作数据集合，例如删除、替换。")])])]),t._v(" "),n("p",[n("strong",[t._v("最佳实践方式")]),t._v("：")]),t._v(" "),n("blockquote",[n("p",[t._v("Java Collections 框架中提供了一个 RandomAccess 接口，用来标记 List 实现是否支持 Random Access。")]),t._v(" "),n("ul",[n("li",[t._v("如果一个数据集合实现了该接口，就意味着它支持 Random Access，按位置读取元素的平均时间复杂度为 O(1)，如ArrayList。")]),t._v(" "),n("li",[t._v("如果没有实现该接口，表示不支持 Random Access，如LinkedList。")])]),t._v(" "),n("p",[t._v("推荐的做法："),n("strong",[t._v("支持 Random Access 的列表可用 for 循环遍历，否则建议用 Iterator 或foreach 遍历。")])])]),t._v(" "),n("h2",{attrs:{id:"_9、list专题-arraylist的优缺点"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_9、list专题-arraylist的优缺点"}},[t._v("#")]),t._v(" 9、List专题—— ArrayList的优缺点？")]),t._v(" "),n("blockquote",[n("p",[n("strong",[t._v("优点")]),t._v("：")]),t._v(" "),n("ul",[n("li",[t._v("ArrayList 底层以数组实现，是一种随机访问模式。ArrayList 实现了 RandomAccess 接口，因此查找的时候非常快。")]),t._v(" "),n("li",[t._v("ArrayList 在顺序添加一个元素的时候非常方便。")])]),t._v(" "),n("p",[n("strong",[t._v("缺点")]),t._v("：")]),t._v(" "),n("ul",[n("li",[t._v("删除元素的时候，需要做一次元素复制操作。如果要复制的元素很多，那么就会比较耗费性能。")]),t._v(" "),n("li",[t._v("插入元素的时候，也需要做一次元素复制操作，缺点同上。")])]),t._v(" "),n("p",[n("strong",[t._v("ArrayList 比较适合顺序添加、随机访问的场景。")])])]),t._v(" "),n("h2",{attrs:{id:"_10、list专题-list-的三个子类的特点"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_10、list专题-list-的三个子类的特点"}},[t._v("#")]),t._v(" 10、List专题—— List 的三个子类的特点？")]),t._v(" "),n("blockquote",[n("p",[n("strong",[t._v("ArrayList")]),t._v("：底层结构是数组，非线程安全，底层查询快，增删慢。")]),t._v(" "),n("p",[n("strong",[t._v("LinkedList")]),t._v("：底层结构是链表型的，非线程安全，增删快，查询慢。")]),t._v(" "),n("p",[n("strong",[t._v("vector")]),t._v("：底层结构是数组，线程安全的，增删慢，查询慢。")])]),t._v(" "),n("h2",{attrs:{id:"_11、list专题-如何实现数组和list之间的转换"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_11、list专题-如何实现数组和list之间的转换"}},[t._v("#")]),t._v(" 11、List专题——如何实现数组和List之间的转换？")]),t._v(" "),n("blockquote",[n("ul",[n("li",[n("p",[t._v("数组转List：使用Arrays.asList(array)进行转换")])]),t._v(" "),n("li",[n("p",[t._v("List转数组：使用List自带的toArray()方法")]),t._v(" "),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// list to array")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" list "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArrayList")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nlist"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"123"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nlist"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"456"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nlist"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("toArray")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// array to list")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" array "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"123"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"456"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Arrays")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("asList")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("array"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br")])])])])]),t._v(" "),n("h2",{attrs:{id:"_12、list专题-java-中-arraylist-和-linkedlist-区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_12、list专题-java-中-arraylist-和-linkedlist-区别"}},[t._v("#")]),t._v(" 12、List专题——Java 中 ArrayList 和 Linkedlist 区别？")]),t._v(" "),n("blockquote",[n("p",[t._v("ArrayList 和 Vector 使用了数组的实现，可以认为 ArrayList 或者 Vector 封装了对内部数组的操作，比如向数组中添加，删除，插入新的元素或者数据的扩展和重定向。")]),t._v(" "),n("p",[t._v("ArrayList 是基于索引的数据接口，它的底层是数组。它可以以 "),n("strong",[t._v("O(1)"),n("strong",[t._v("时间复杂度对元素进行")]),t._v("随机访问")]),t._v("。与此对应，LinkedList 是以元素列表的形式存储它的数据，每一个元素都和它的前一个和后一个元素链接在一起，在这种情况下，查找某个元素的时间复杂度是 "),n("strong",[t._v("O(n)")]),t._v("。")]),t._v(" "),n("p",[t._v("相对于 ArrayList，LinkedList 的插入，添加，删除操作速度更快，因为当元素被添加到集合任意位置的时候，不需要像数组那样重新计算大小或者是更新索引。LinkedList 比 ArrayList 更占内存，因为 LinkedList 为每一个节点存储了两个引用，一个指向前")]),t._v(" "),n("p",[t._v("一个元素，一个指向下一个元素。")])]),t._v(" "),n("h2",{attrs:{id:"_13、list专题-list-a-new-arraylist-和-arraylist-a-new-arraylist-的区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_13、list专题-list-a-new-arraylist-和-arraylist-a-new-arraylist-的区别"}},[t._v("#")]),t._v(" 13、List专题——List a=new ArrayList()和 ArrayList a =new ArrayList()的区别？")]),t._v(" "),n("blockquote",[n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),t._v(" list "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArrayList")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br")])]),n("p",[t._v("这句话创建了一个ArrayList的对象，然后上溯到了List，此时list已经是List对象了，有些ArrayList有的属性和方法，而List没有的属性和方法，list就不能再使用了。")]),t._v(" "),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArrayList")]),t._v(" list"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArrayList")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br")])]),n("p",[t._v("创建一对象则保留了ArrayList 的所有属性。")]),t._v(" "),n("p",[t._v("例如：")]),t._v(" "),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),t._v(" list "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArrayList")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArrayList")]),t._v(" arrayList "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArrayList")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nlist"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("trimToSize")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//错误，没有该方法。")]),t._v("\narrayList"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("trimToSize")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//ArrayList 里有该方法。")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br")])])]),t._v(" "),n("h2",{attrs:{id:"_14、list专题-多线程场景下如何使用arraylist"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_14、list专题-多线程场景下如何使用arraylist"}},[t._v("#")]),t._v(" 14、List专题——多线程场景下如何使用ArrayList？")]),t._v(" "),n("blockquote",[n("p",[t._v("ArrayList不是线程安全的，如若遇到多线程场景，可以通过 Collections 的 synchronizedList 方法将其转换成线程安全的容器后再使用。")]),t._v(" "),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" synchronizedList "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Collections")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("synchronizedList")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("list"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nsynchronizedList"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"aaa"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \nsynchronizedList"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bbb"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" synchronizedList"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("size")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("synchronizedList"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("                                            \n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br")])])]),t._v(" "),n("h2",{attrs:{id:"_15、list与set的区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_15、list与set的区别"}},[t._v("#")]),t._v(" 15、List与Set的区别")]),t._v(" "),n("blockquote",[n("p",[t._v("List ， Set 都是继承自Collection 接口")]),t._v(" "),n("p",[n("strong",[t._v("List 特点")]),t._v("：一个有序（元素存入集合的顺序和取出的顺序一致）容器，元素可以重复，可以插入多个null元素，元素都有索引。常用的实现类有 ArrayList、LinkedList 和 Vector。")]),t._v(" "),n("p",[n("strong",[t._v("Set 特点")]),t._v("：一个无序（存入和取出顺序有可能不一致）容器，不可以存储重复元素，只允许存入一个null元素，必须保证元素唯一性。Set 接口常用实现类是 HashSet、LinkedHashSet 以及TreeSet。")]),t._v(" "),n("p",[t._v("另外 List 支持for循环，也就是通过下标来遍历，也可以用迭代器，但是set只能用迭代，因为他无序，无法用下标来取得想要的值。")]),t._v(" "),n("p",[n("strong",[t._v("Set和List对比")])]),t._v(" "),n("p",[t._v("Set：检索元素效率低下，删除和插入效率高，插入和删除不会引起元素位置改变。")]),t._v(" "),n("p",[t._v("List：和数组类似，List可以动态增长，查找元素效率高，插入删除元素效率低，因为会引起其他元素位置改变")])]),t._v(" "),n("h2",{attrs:{id:"_16、set专题-hashset的实现原理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_16、set专题-hashset的实现原理"}},[t._v("#")]),t._v(" 16、Set专题——HashSet的实现原理？")]),t._v(" "),n("blockquote",[n("p",[t._v("HashSet 是基于 HashMap 实现的，HashSet的值存放于HashMap的key上，HashMap的value统一为present，因此 HashSet 的实现比较简单，相关 HashSet 的操作，基本上都是直接调用底层HashMap 的相关方法来完成，HashSet 不允许重复的值。")])]),t._v(" "),n("h2",{attrs:{id:"_17、set专题-hash如何检查重复-如何保证数据不重复"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_17、set专题-hash如何检查重复-如何保证数据不重复"}},[t._v("#")]),t._v(" 17、Set专题——Hash如何检查重复？如何保证数据不重复？")]),t._v(" "),n("blockquote",[n("p",[n("strong",[t._v("检查重复")]),t._v("：向HashSet 中add ()元素时，判断元素是否存在的依据，不仅要比较hash值，同时还要结合equles 方法比较。")]),t._v(" "),n("p",[t._v("HashSet 中的add ()方法会使用HashMap 的put()方法。")]),t._v(" "),n("p",[n("strong",[t._v("保证数据不重复")]),t._v("：HashMap 的 key 是唯一的，由源码可以看出 HashSet 添加进去的值就是作为HashMap 的key，")]),t._v(" "),n("p",[t._v("并且在HashMap中如果K/V相同时，会用新的V覆盖掉旧的V，然后返回旧的V。所以不会重复（HashMap 比较key是否相等是先比较hashcode 再比较equals ）。")]),t._v(" "),n("p",[t._v("HashSet的部分源码：")]),t._v(" "),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" PRESENT "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("transient")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HashMap")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("E")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" map"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HashSet")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n map "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HashMap")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("E")]),t._v(" e"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 调用HashMap的put方法,PRESENT是一个至始至终都相同的虚值 ")]),t._v("\n "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" map"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("put")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" PRESENT"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br")])]),n("p",[t._v("扩展：")]),t._v(" "),n("p",[n("strong",[t._v("hashCode（）与equals（）的相关规定")]),t._v("：")]),t._v(" "),n("ol",[n("li",[n("p",[t._v("如果两个对象相等，则hashcode一定也是相同的，hashCode是jdk根据对象的地址或者字符串或者数字算出来的int类型的数值")])]),t._v(" "),n("li",[n("p",[t._v("两个对象相等，对象两个equals方法返回true")])]),t._v(" "),n("li",[n("p",[t._v("两个对象有相同的hashcode值，它们也不一定是相等的")])]),t._v(" "),n("li",[n("p",[t._v("综上，equals方法被覆盖过，则hashCode方法也必须被覆盖")])]),t._v(" "),n("li",[n("p",[t._v("hashCode()的默认行为是对堆上的对象产生独特值。如果没有重写hashCode()，则该class的两个对象无论如何都不会相等（即使这两个对象指向相同的数据）。")])])]),t._v(" "),n("p",[n("strong",[t._v("==与equals的区别")])]),t._v(" "),n("ol",[n("li",[n("p",[t._v("==是判断两个变量或实例是不是指向同一个内存空间 equals是判断两个变量或实例所指向的内存空间的值是不是相同")])]),t._v(" "),n("li",[n("p",[t._v("==是指对内存地址进行比较 equals()是对字符串的内容进行比较")])])])]),t._v(" "),n("h2",{attrs:{id:"_18、hashset与hashmap的区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_18、hashset与hashmap的区别"}},[t._v("#")]),t._v(" 18、HashSet与HashMap的区别")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("HashSet")]),t._v(" "),n("th",[t._v("HashMap")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("实现Set接口")]),t._v(" "),n("td",[t._v("实现Map接口")])]),t._v(" "),n("tr",[n("td",[t._v("仅存储对象")]),t._v(" "),n("td",[t._v("存储键值对")])]),t._v(" "),n("tr",[n("td",[t._v("调用add()向Set中添加元素，")]),t._v(" "),n("td",[t._v("调用pu()向Map中添加元素")])]),t._v(" "),n("tr",[n("td",[t._v("使用成员对象计算hashcode值，对于两个对象来说，hashcode可能相同，所以equals()方法用来判断对象的相等性")]),t._v(" "),n("td",[t._v("HashMap使用键（Key）计算")])]),t._v(" "),n("tr",[n("td",[t._v("HashSet较HashMap来说比较慢")]),t._v(" "),n("td",[t._v("HashMap相对于HashSet较快，因为它使用唯一的键获取对象")])])])]),t._v(" "),n("h2",{attrs:{id:"_19、map专题-什么hash算法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_19、map专题-什么hash算法"}},[t._v("#")]),t._v(" 19、Map专题——什么Hash算法")]),t._v(" "),n("blockquote",[n("p",[t._v("哈希算法是指把任意长度的二进制映射为固定长度的较小的二进制值，这个较小的二进制值叫做哈希值。")])]),t._v(" "),n("h2",{attrs:{id:"_20、map专题-hashmap的实现原理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_20、map专题-hashmap的实现原理"}},[t._v("#")]),t._v(" 20、Map专题——HashMap的实现原理")]),t._v(" "),n("p",[n("strong",[t._v("HashMap概述")]),t._v("：HashMap是基于哈希表的Map接口的非同步实现。此实现提供所有可选的映射操作，并允许使用null值和null键。此类不保证映射的顺序，特别是它不保证该顺序恒久不变。")]),t._v(" "),n("p",[n("strong",[t._v("HashMap的数据结构")]),t._v("： 在Java编程语言中，最基本的结构就是两种，一个是数组，另外一个是模拟指针（引用），所有的数据结构都可以用这两个基本结构来构造的，HashMap也不例外。HashMap实际上是一个“**链表散列”**的数据结构，即数组和链表的结合体。")]),t._v(" "),n("blockquote",[n("p",[t._v("HashMap 基于 Hash 算法实现的")]),t._v(" "),n("ol",[n("li",[t._v("当我们往HashMap中put元素时，利用key的hashCode重新hash计算出当前对象的元素在数组中的下标")]),t._v(" "),n("li",[t._v("存储时，如果出现hash值相同的key，此时有两种情况。\n"),n("ul",[n("li",[t._v("如果key相同，则覆盖原始值；")]),t._v(" "),n("li",[t._v("如果key不同（出现冲突），则将当前的key-value放入链表中")])])]),t._v(" "),n("li",[t._v("获取时，直接找到hash值对应的下标，在进一步判断key是否相同，从而找到对应值。")]),t._v(" "),n("li",[t._v("理解了以上过程就不难明白HashMap是如何解决hash冲突的问题，核心就是使用了数组的存储方式，然后将冲突的key的对象放入链表中，一旦发现冲突就在链表中做进一步的对比。")]),t._v(" "),n("li",[t._v("需要注意Jdk 1.8中对HashMap的实现做了优化，"),n("strong",[t._v("当链表中的节点数据超过八个之后，该链表会转为红黑树来提高查询效率，从原来的O(n)到O(logn)")])])])]),t._v(" "),n("h2",{attrs:{id:"_21、map专题-hashmap在jdk1-7与jdk1-8中有哪些不同"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_21、map专题-hashmap在jdk1-7与jdk1-8中有哪些不同"}},[t._v("#")]),t._v(" 21、Map专题——HashMap在JDK1.7与JDK1.8中有哪些不同？")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("不同")]),t._v(" "),n("th",[t._v("JDK1.7")]),t._v(" "),n("th",[t._v("JDK1.8")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("存储结构")]),t._v(" "),n("td",[t._v("数组+链表")]),t._v(" "),n("td",[t._v("数组+链表+红黑树")])]),t._v(" "),n("tr",[n("td",[t._v("初始化方式")]),t._v(" "),n("td",[t._v("单独函数： inflateTable()")]),t._v(" "),n("td",[t._v("直接集成到了扩容函数resize() 中")])]),t._v(" "),n("tr",[n("td",[t._v("hash值计算方式")]),t._v(" "),n("td",[t._v("扰动处理 = 9次扰动 = 4次位运算 + 5次异或运算")]),t._v(" "),n("td",[t._v("扰动处理 = 2次扰动 = 1次位运算 + 1次异或运算")])]),t._v(" "),n("tr",[n("td",[t._v("存放数据的规则")]),t._v(" "),n("td",[t._v("无冲突时，存放数组；冲突时，存放链表")]),t._v(" "),n("td",[t._v("无冲突时，存放数组；冲突 & 链表长度 <8：存放单链表；冲突 & 链表长度 > 8：树化并存放红黑树")])]),t._v(" "),n("tr",[n("td",[t._v("插入数据方式")]),t._v(" "),n("td",[t._v("头插法（先讲原位置的数据移到后1位，再插入数据到该位置）")]),t._v(" "),n("td",[t._v("尾插法（直接插入到链表尾部/红黑树）")])]),t._v(" "),n("tr",[n("td",[t._v("扩容后存储位置的计算方式")]),t._v(" "),n("td",[t._v("全部按照原来方法进行计算（即hashCode ->> 扰动函数 ->> (h&length-1)）")]),t._v(" "),n("td",[t._v("按照扩容后的规律计算（即扩容后的位置=原位置 or 原位置 + 旧容量）")])])])]),t._v(" "),n("h2",{attrs:{id:"_22、map专题-hashmap的put方法的具体流程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_22、map专题-hashmap的put方法的具体流程"}},[t._v("#")]),t._v(" 22、Map专题——HashMap的put方法的具体流程？")]),t._v(" "),n("blockquote",[n("p",[t._v("当我们put的时候，首先计算 key 的hash 值，这里调用了 hash 方法， hash 方法实际是让key.hashCode() 与key.hashCode()>>>16 进行异或操作，高16bit补0，一个数和0异或不变，")]),t._v(" "),n("p",[t._v("所以 hash 函数大概的作用就是：高16bit不变，低16bit和高16bit做了一个异或，目的是减少碰撞。按照函数注释，因为bucket数组大小是2的幂，计算下标index = (table.length - 1) &hash ，如果不做 hash 处理，相当于散列生效的只有几个低 bit 位，")]),t._v(" "),n("p",[t._v("为了减少散列的碰撞，设计者综合考虑了速度、作用、质量之后，使用高16bit和低16bit异或来简单处理减少碰撞，而且JDK8中\n用了复杂度 O（logn）的树结构来提升碰撞下的性能。")])]),t._v(" "),n("p",[n("img",{attrs:{src:a(375),alt:"image-20210716112216388"}})]),t._v(" "),n("h2",{attrs:{id:"_23、map专题-能否使用任何类作为-map-的-key"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_23、map专题-能否使用任何类作为-map-的-key"}},[t._v("#")]),t._v(" 23、Map专题——能否使用任何类作为 Map 的 key？")]),t._v(" "),n("blockquote",[n("p",[t._v("可以使用任何类作为 Map 的 key，然而在使用之前，需要考虑以下几点：")]),t._v(" "),n("ul",[n("li",[t._v("如果类重写了 equals() 方法，也应该重写 hashCode() 方法。")]),t._v(" "),n("li",[t._v("类的所有实例需要遵循与 equals() 和 hashCode() 相关的规则。")]),t._v(" "),n("li",[t._v("如果一个类没有使用 equals()，不应该在 hashCode() 中使用它。")]),t._v(" "),n("li",[t._v("用户自定义 Key 类最佳实践是使之为不可变的，这样 hashCode() 值可以被缓存起来，拥有更好的性能。不可变的类也可以确保 hashCode() 和 equals() 在未来不会改变，这样就会解决与可变相关的问题了。")])])]),t._v(" "),n("h2",{attrs:{id:"_23、map专题-为什么hashmap中string、integer这样的包装类适合作为key"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_23、map专题-为什么hashmap中string、integer这样的包装类适合作为key"}},[t._v("#")]),t._v(" 23、Map专题——为什么HashMap中String、Integer这样的包装类适合作为Key？")]),t._v(" "),n("blockquote",[n("p",[t._v("String、Integer等包装类的特性能够保证hash值的不可更改性和计算准确性，能够有效较少hash的碰撞几率。")]),t._v(" "),n("p",[t._v("原因：")]),t._v(" "),n("ul",[n("li",[t._v("都是final类型，即不可变性，保证key的不可更改性，不会存在获取hash值不同的情况。")]),t._v(" "),n("li",[t._v("内部已重写了equals() 、hashCode() 等方法，遵守了HashMap内部的规范（不清楚可以去上面看看putValue的过程），不容易出现Hash值计算错误的情况；")])])]),t._v(" "),n("h2",{attrs:{id:"_24、map专题-如果使用object作为hashmap的key-应该怎么办呢"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_24、map专题-如果使用object作为hashmap的key-应该怎么办呢"}},[t._v("#")]),t._v(" 24、Map专题——如果使用Object作为HashMap的Key，应该怎么办呢？")]),t._v(" "),n("blockquote",[n("p",[n("strong",[t._v("重写hashCode() 和equals() 方法")])]),t._v(" "),n("ol",[n("li",[t._v("重写hashCode() 是因为需要计算存储数据的存储位置，需要注意不要试图从散列码计算中\n排除掉一个对象的关键部分来提高性能，这样虽然能更快但可能会导致更多的Hash碰撞；")]),t._v(" "),n("li",[t._v("重写equals() 方法，需要遵守自反性、对称性、传递性、一致性以及对于任何非null的引用\n值x，x.equals(null)必须返回false的这几个特性，目的是为了保证key在哈希表中的唯一性；")])])]),t._v(" "),n("h2",{attrs:{id:"_25、map专题-hashmap-与-hashtable-有什么区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_25、map专题-hashmap-与-hashtable-有什么区别"}},[t._v("#")]),t._v(" 25、Map专题——HashMap 与 HashTable 有什么区别？")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("不同")]),t._v(" "),n("th",[t._v("HashMap")]),t._v(" "),n("th",[t._v("HashTable")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("线程安全")]),t._v(" "),n("td",[t._v("非线程安全")]),t._v(" "),n("td",[t._v("线程安全，内部通过"),n("code",[t._v("synchronized")]),t._v("修饰")])]),t._v(" "),n("tr",[n("td",[t._v("效率")]),t._v(" "),n("td",[t._v("HashMap 要比 HashTable 效率高一点")]),t._v(" "),n("td",[t._v("几乎不使用，线程安全使用"),n("code",[t._v("ConcurrentHashMap")])])]),t._v(" "),n("tr",[n("td",[t._v("对Null key 和Null value的支持")]),t._v(" "),n("td",[t._v("null作为key，有且只有一个，但可以对应一个或多个null的value")]),t._v(" "),n("td",[t._v("不支持，只要有，就会抛出"),n("code",[t._v("NullPointerException")])])]),t._v(" "),n("tr",[n("td",[t._v("初始容量大小和每次扩充容量大小的不同**：创建不指定容量**")]),t._v(" "),n("td",[t._v("初始为16，每次扩充变为原来的2倍")]),t._v(" "),n("td",[t._v("初始为11，扩充每次变为原来的2n+1")])]),t._v(" "),n("tr",[n("td",[t._v("初始容量大小和每次扩充容量大小的不同**：创建指定容量**")]),t._v(" "),n("td",[t._v("扩充为2的幂次方大小")]),t._v(" "),n("td",[t._v("指定容量大小")])]),t._v(" "),n("tr",[n("td",[t._v("底层数据结构")]),t._v(" "),n("td",[t._v("哈希表结构")]),t._v(" "),n("td",[t._v("哈希表结构")])])])]),t._v(" "),n("h2",{attrs:{id:"_26、map专题-如何决定使用-hashmap-还是-treemap"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_26、map专题-如何决定使用-hashmap-还是-treemap"}},[t._v("#")]),t._v(" 26、Map专题——如何决定使用 HashMap 还是 TreeMap？")]),t._v(" "),n("blockquote",[n("p",[t._v("对于在Map中"),n("strong",[t._v("插入、删除和定位")]),t._v("元素这类操作，"),n("strong",[t._v("HashMap是最好的选择")]),t._v("。然而，假如你需要对一个有序的key集合进行"),n("strong",[t._v("遍历")]),t._v("，"),n("strong",[t._v("TreeMap")]),t._v("是更好的选择。基于你的collection的大小，也许向HashMap中添加元素会更快，将map换为TreeMap进行有序key的遍历。")])]),t._v(" "),n("h2",{attrs:{id:"_27、map专题-hashmap-和-concurrenthashmap-的区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_27、map专题-hashmap-和-concurrenthashmap-的区别"}},[t._v("#")]),t._v(" 27、Map专题——HashMap 和 ConcurrentHashMap 的区别？")]),t._v(" "),n("blockquote",[n("ol",[n("li",[t._v("ConcurrentHashMap对整个桶数组进行了分割分段(Segment)，然后在每一个"),n("strong",[t._v("分段上都用lock锁进行保护")]),t._v("，相对于HashTable的synchronized锁的粒度更精细了一些，并发性能更好，而HashMap没有锁机制，不是线程安全的。（JDK1.8之后ConcurrentHashMap启用了一种全新的方式实现,利用"),n("strong",[t._v("CAS算法")]),t._v("。）")]),t._v(" "),n("li",[t._v("HashMap的键值对允许有null，但是ConCurrentHashMap都不允许。")])])]),t._v(" "),n("h2",{attrs:{id:"_28、collection-和-collections-有什么区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_28、collection-和-collections-有什么区别"}},[t._v("#")]),t._v(" 28、Collection 和 Collections 有什么区别？")]),t._v(" "),n("blockquote",[n("p",[n("strong",[t._v("java.util.Collection 是一个集合接口（集合类的一个顶级接口）")]),t._v("。它提供了对集合对象进行基本操作的通用接口方法。Collection接口在Java 类库中有很多具体的实现。Collection接口的意义是为各种具体的集合提供了最大化的统一操作方式，其直接继承接口有List与Set。")]),t._v(" "),n("p",[n("strong",[t._v("Collections则是集合类的一个工具类/帮助类")]),t._v("，其中提供了一系列静态方法，用于对集合中元素进行排序、搜索以及线程安全等各种操作。")])])])}),[],!1,null,null,null);s.default=e.exports}}]);