(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{1387:function(s,t,e){"use strict";e.r(t);var _=e(6),v=Object(_.a)({},(function(){var s=this,t=s.$createElement,_=s._self._c||t;return _("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[_("h2",{attrs:{id:"_1、什么是redis"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1、什么是redis"}},[s._v("#")]),s._v(" 1、什么是Redis?")]),s._v(" "),_("blockquote",[_("p",[s._v("Redis 是完全开源免费的， 遵守 BSD 协议， 是一个高性能的 key-value 数据库。")]),s._v(" "),_("p",[s._v("特点：")]),s._v(" "),_("ul",[_("li",[s._v("Redis 支持数据的持久化，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用。")]),s._v(" "),_("li",[s._v("Redis 不仅仅支持简单的 key-value 类型的数据， 同时还提供 list， set， zset， hash 等数据结构的存储。、")]),s._v(" "),_("li",[s._v("Redis 支持数据的备份， 即 master-slave 模式的数据备份。")])])]),s._v(" "),_("h2",{attrs:{id:"_2、redis的数据类型"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2、redis的数据类型"}},[s._v("#")]),s._v(" 2、Redis的数据类型？")]),s._v(" "),_("ul",[_("li",[_("p",[s._v("string（ 字符串）")]),s._v(" "),_("blockquote",[_("p",[s._v("字符串最基础的数据结构。字符串类型的值实际可以是字符串（简单的字符串、复杂的字符串（例如JSON、XML））、数字 （整数、浮点数），甚至是二进制（图片、音频、视频），但是值最大不能超过512MB。")]),s._v(" "),_("p",[s._v("字符串主要有以下几个典型使用场景：")]),s._v(" "),_("ul",[_("li",[s._v("缓存功能")]),s._v(" "),_("li",[s._v("计数")]),s._v(" "),_("li",[s._v("共享Session")]),s._v(" "),_("li",[s._v("限速")])])])]),s._v(" "),_("li",[_("p",[s._v("hash（ 哈希）")]),s._v(" "),_("blockquote",[_("p",[s._v("哈希类型是指键值本身又是一个键值对结构。")]),s._v(" "),_("p",[s._v("哈希主要有以下典型应用场景：")]),s._v(" "),_("ul",[_("li",[s._v("缓存用户信息")]),s._v(" "),_("li",[s._v("缓存对象")])])])]),s._v(" "),_("li",[_("p",[s._v("list（ 列表）")]),s._v(" "),_("blockquote",[_("p",[s._v("列表（list）类型是用来存储多个有序的字符串。列表是一种比较灵活的数据结构，它可以充当栈和队列的角色")]),s._v(" "),_("p",[s._v("列表主要有以下几种使用场景：")]),s._v(" "),_("ul",[_("li",[s._v("消息队列")]),s._v(" "),_("li",[s._v("文章列表")])])])]),s._v(" "),_("li",[_("p",[s._v("set（ 集合）")]),s._v(" "),_("blockquote",[_("p",[s._v("集合（set）类型也是用来保存多个的字符串元素，但和列表类型不一 样的是，集合中不允许有重复元素，并且集合中的元素是无序的。")]),s._v(" "),_("p",[s._v("集合主要有如下使用场景：")]),s._v(" "),_("ul",[_("li",[s._v("标签（tag）")]),s._v(" "),_("li",[s._v("共同关注")])])])]),s._v(" "),_("li",[_("p",[s._v("zset（有序集合)")]),s._v(" "),_("blockquote",[_("p",[s._v("有序集合中的元素可以排序。但是它和列表使用索引下标作为排序依据不同的是，它给每个元素设置一个权重（score）作为排序的依据。")]),s._v(" "),_("p",[s._v("有序集合主要应用场景：")]),s._v(" "),_("ul",[_("li",[s._v("用户点赞统计")]),s._v(" "),_("li",[s._v("用户排序")])])])]),s._v(" "),_("li",[_("p",[_("a",{attrs:{href:"https://yhx1001.github.io/xiaobear_docsify/#/docs/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0?id=_8%E3%80%81hyperloglog",target:"_blank",rel:"noopener noreferrer"}},[s._v("HyperLogLog"),_("OutboundLink")],1)])]),s._v(" "),_("li",[_("p",[s._v("pub/sub")])])]),s._v(" "),_("h2",{attrs:{id:"_3、redis有哪些优缺点"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3、redis有哪些优缺点"}},[s._v("#")]),s._v(" 3、Redis有哪些优缺点？")]),s._v(" "),_("blockquote",[_("p",[s._v("优点：")]),s._v(" "),_("ul",[_("li",[s._v("读写性能优异， Redis能读的速度是110000次/s，写的速度是81000次/s。")]),s._v(" "),_("li",[s._v("支持数据持久化，支持AOF和RDB两种持久化方式。")]),s._v(" "),_("li",[s._v("支持事务，Redis的所有操作都是原子性的，同时Redis还支持对几个操作合并后的原子性执行。")]),s._v(" "),_("li",[s._v("数据结构丰富，除了支持string类型的value外还支持hash、set、zset、list等数据结构。")]),s._v(" "),_("li",[s._v("支持主从复制，主机会自动将数据同步到从机，可以进行读写分离。")])]),s._v(" "),_("p",[s._v("缺点：")]),s._v(" "),_("ul",[_("li",[s._v("数据库容量受到物理内存的限制，不能用作海量数据的高性能读写，因此Redis适合的场景主要局限在较小数据量的高性能操作和运算上。")]),s._v(" "),_("li",[s._v("Redis 不具备自动容错和恢复功能，主机从机的宕机都会导致前端部分读写请求失败，需要等待机器重启或者手动切换前端的IP才能恢复。")]),s._v(" "),_("li",[s._v("主机宕机，宕机前有部分数据未能及时同步到从机，切换IP后还会引入数据不一致的问题，降低了系统的可用性。")]),s._v(" "),_("li",[s._v("Redis 较难支持在线扩容，在集群容量达到上限时在线扩容会变得很复杂。为避免这一问题，运维人员在系统上线时必须确保有足够的空间，这对资源造成了很大的浪费。")])])]),s._v(" "),_("h2",{attrs:{id:"_4、为什么要用-redis做缓存"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4、为什么要用-redis做缓存"}},[s._v("#")]),s._v(" 4、为什么要用 Redis做缓存？")]),s._v(" "),_("blockquote",[_("p",[s._v("主要从“高性能”和“高并发”这两点来看待这个问题。")]),s._v(" "),_("ul",[_("li",[_("p",[s._v("高性能：")]),s._v(" "),_("div",{staticClass:"language- line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[s._v("假如用户第一次访问数据库中的某些数据。这个过程会比较慢，因为是从硬盘上读取的。将该用户访问的数据存在数缓存中，这样下一次再访问这些数据的时候就可以直接从缓存中获取了。操作缓存就是直接操作内存，所以速度相当快。如果数据库中的对应数据改变的之后，同步改变缓存中相应的数据即可！\n")])]),s._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[s._v("1")]),_("br")])])]),s._v(" "),_("li",[_("p",[s._v("高并发")]),s._v(" "),_("div",{staticClass:"language- line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[s._v("直接操作缓存能够承受的请求是远远大于直接访问数据库的，所以我们可以考虑把数据库中的部分数据转移到缓存中去，这样用户的一部分请求会直接到缓存这里而不用经过数据库。\n")])]),s._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[s._v("1")]),_("br")])])])])]),s._v(" "),_("h2",{attrs:{id:"_5、redis为什么这么快"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_5、redis为什么这么快"}},[s._v("#")]),s._v(" 5、Redis为什么这么快？")]),s._v(" "),_("blockquote",[_("ol",[_("li",[s._v("完全基于内存，绝大部分请求是纯粹的内存操作，非常快速。数据存在内存中，类似于 HashMap，HashMap 的优势就是查找和操作的时间复杂度都是O(1)；")]),s._v(" "),_("li",[s._v("数据结构简单，对数据操作也简单，Redis 中的数据结构是专门进行设计的；")]),s._v(" "),_("li",[s._v("采用单线程，避免了不必要的上下文切换和竞争条件，也不存在多进程或者多线程导致的切换而消耗 CPU，不用去考虑各种锁的问题，不存在加锁释放锁操作，没有因为可能出现死锁而导致的性能消耗；")]),s._v(" "),_("li",[s._v("使用多路 I/O 复用模型，非阻塞 IO；")]),s._v(" "),_("li",[s._v("使用底层模型不同，它们之间底层实现方式以及与客户端之间通信的应用协议不一样，Redis直接自己构建了 VM 机制 ，因为一般的系统调用系统函数的话，会浪费一定的时间去移动和请求；")])])]),s._v(" "),_("h2",{attrs:{id:"_6、redis的应用场景"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_6、redis的应用场景"}},[s._v("#")]),s._v(" 6、Redis的应用场景")]),s._v(" "),_("blockquote",[_("ol",[_("li",[_("p",[s._v("计数器")]),s._v(" "),_("div",{staticClass:"language- line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[s._v("可以对 String 进行自增自减运算，从而实现计数器功能。Redis 这种内存型数据库的读写性能非常高，很适合存储频繁读写的计数量。\n")])]),s._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[s._v("1")]),_("br")])])]),s._v(" "),_("li",[_("p",[s._v("缓存")]),s._v(" "),_("div",{staticClass:"language- line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[s._v("将热点数据放到内存中，设置内存的最大使用量以及淘汰策略来保证缓存的命中率。\n")])]),s._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[s._v("1")]),_("br")])])]),s._v(" "),_("li",[_("p",[s._v("会话缓存")]),s._v(" "),_("div",{staticClass:"language- line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[s._v("可以使用 Redis 来统一存储多台应用服务器的会话信息。当应用服务器不再存储用户的会话信息，也就不再具有状态，一个用户可以请求任意一个应用服务器，从而更容易实现高可用性以及可伸缩性。\n")])]),s._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[s._v("1")]),_("br")])])]),s._v(" "),_("li",[_("p",[s._v("全页缓存（FPC）")]),s._v(" "),_("div",{staticClass:"language- line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[s._v("除基本的会话token之外，Redis还提供很简便的FPC平台。以Magento为例，Magento提供一个插件来使用Redis作为全页缓存后端。此外，对WordPress的用户来说，Pantheon有一个非常好的插件 wpredis，这个插件能帮助你以最快速度加载你曾浏览过的页面。\n")])]),s._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[s._v("1")]),_("br")])])]),s._v(" "),_("li",[_("p",[s._v("查找表")]),s._v(" "),_("div",{staticClass:"language- line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[s._v("例如 DNS 记录就很适合使用 Redis 进行存储。查找表和缓存类似，也是利用了 Redis 快速的查找特性。但是查找表的内容不能失效，而缓存的内容可以失效，因为缓存不作为可靠的数据来源。\n")])]),s._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[s._v("1")]),_("br")])])]),s._v(" "),_("li",[_("p",[s._v("消息队列(发布/订阅功能)")]),s._v(" "),_("div",{staticClass:"language- line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[s._v("List 是一个双向链表，可以通过 lpush 和 rpop 写入和读取消息。不过最好使用 Kafka、RabbitMQ 等消息中间件。\n发布/订阅的使用场景确实非常多。还可作为基于发布/订阅的脚本触发器，甚至用 Redis 的发布/订阅功能来建立聊天系统！\n")])]),s._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[s._v("1")]),_("br"),_("span",{staticClass:"line-number"},[s._v("2")]),_("br")])])]),s._v(" "),_("li",[_("p",[s._v("分布式锁实现")]),s._v(" "),_("div",{staticClass:"language- line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[s._v("在分布式场景下，无法使用单机环境下的锁来对多个节点上的进程进行同步。可以使用 Redis 自带的SETNX 命令实现分布式锁，除此之外，还可以使用官方提供的 RedLock 分布式锁实现。\n")])]),s._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[s._v("1")]),_("br")])])]),s._v(" "),_("li",[_("p",[s._v("排行榜")]),s._v(" "),_("div",{staticClass:"language- line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[s._v("排行榜 Redis提供了列表和有序集合数据结构，合理地使用这些数据结构可以很方便地构建各种排行榜系统。\n")])]),s._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[s._v("1")]),_("br")])])]),s._v(" "),_("li",[_("p",[s._v("社交网络 赞/踩、粉丝、共同好友/喜好、推送、下拉刷新。")])])])]),s._v(" "),_("p",[s._v("Redis的应用一般会结合项目去问，以一个电商项目的用户服务为例：")]),s._v(" "),_("ul",[_("li",[s._v("Token存储：用户登录成功之后，使用Redis存储Token")]),s._v(" "),_("li",[s._v("登录失败次数计数：使用Redis计数，登录失败超过一定次数，锁定账号")]),s._v(" "),_("li",[s._v("地址缓存：对省市区数据的缓存")]),s._v(" "),_("li",[s._v("分布式锁：分布式环境下登录、注册等操作加分布式锁，防止一人多卖增加分布式锁")]),s._v(" "),_("li",[s._v("……")])]),s._v(" "),_("h2",{attrs:{id:"_7、什么是持久化"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_7、什么是持久化"}},[s._v("#")]),s._v(" 7、什么是持久化？")]),s._v(" "),_("blockquote",[_("p",[s._v("持久化就是把内存的数据写到磁盘中去，防止服务宕机了内存数据丢失。")])]),s._v(" "),_("h2",{attrs:{id:"_8、redis-的持久化机制是什么-各自的优缺点"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_8、redis-的持久化机制是什么-各自的优缺点"}},[s._v("#")]),s._v(" 8、Redis 的持久化机制是什么？各自的优缺点？")]),s._v(" "),_("blockquote",[_("p",[s._v("持久化机制：")]),s._v(" "),_("ul",[_("li",[s._v("RDB（默认）"),_("code",[s._v("Redis DataBase")])]),s._v(" "),_("li",[s._v("AOF "),_("code",[s._v("Append Only File")])])])]),s._v(" "),_("h3",{attrs:{id:"rdb"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#rdb"}},[s._v("#")]),s._v(" RDB：")]),s._v(" "),_("blockquote",[_("p",[s._v("RDB是Redis默认的持久化方式。")]),s._v(" "),_("p",[s._v("工作机制：每隔一段时间，就把内存中的数据保存到硬盘上的指定文件中。对应产生的数据文件为dump.rdb")]),s._v(" "),_("p",[s._v("触发RDB的方式有两种：手动触发和自动触发")]),s._v(" "),_("div",{staticClass:"language- line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[s._v("手动触发分别对应save和bgsave命令\n- save命令：阻塞当前Redis服务器，直到RDB过程完成为止，对于内存比较大的实例会造成长时间阻塞，线上环境不建议使用。\n- bgsave命令：Redis进程执行fork操作创建子进程，RDB持久化过程由子进程负责，完成后自动结束。阻塞只发生在fork阶段，一般时间很短。\n\n以下场景会自动触发RDB持久化：\n1.使用save相关配置，如“save m n”。表示m秒内数据集存在n次修改时，自动触发bgsave。\n2.如果从节点执行全量复制操作，主节点自动执行bgsave生成RDB文件并发送给从节点\n3.执行debug reload命令重新加载Redis时，也会自动触发save操作\n4.默认情况下执行shutdown命令时，如果没有开启AOF持久化功能则自动执行bgsave。\n")])]),s._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[s._v("1")]),_("br"),_("span",{staticClass:"line-number"},[s._v("2")]),_("br"),_("span",{staticClass:"line-number"},[s._v("3")]),_("br"),_("span",{staticClass:"line-number"},[s._v("4")]),_("br"),_("span",{staticClass:"line-number"},[s._v("5")]),_("br"),_("span",{staticClass:"line-number"},[s._v("6")]),_("br"),_("span",{staticClass:"line-number"},[s._v("7")]),_("br"),_("span",{staticClass:"line-number"},[s._v("8")]),_("br"),_("span",{staticClass:"line-number"},[s._v("9")]),_("br")])]),_("p",[s._v("优点：")]),s._v(" "),_("ul",[_("li",[s._v("只有一个文件 dump.rdb，方便持久化。")]),s._v(" "),_("li",[s._v("容灾性好，一个文件可以保存到安全的磁盘。")]),s._v(" "),_("li",[s._v("性能最大化，fork 子进程来完成写操作，让主进程继续处理命令，所以是 IO 最大化。使用单独子进程来进行持久化，主进程不会进行任何 IO 操作，保证了 redis 的高性能")]),s._v(" "),_("li",[s._v("相对于数据集大时，比 AOF 的启动效率更高。")])]),s._v(" "),_("p",[s._v("缺点：")]),s._v(" "),_("ul",[_("li",[s._v("数据安全性低。RDB 是间隔一段时间进行持久化，如果持久化之间 redis 发生故障，会发生数据丢失。所以这种方式更适合数据要求不严谨的时候。如果redis要故障时要尽可能少的丢失数据，RDB没有AOF好，例如1:00进行的快照，在1:10又要进行快照的时候宕机了，这个时候就会丢失10分钟的数据。")]),s._v(" "),_("li",[s._v("RDB每次fork出子进程来执行RDB快照生成文件时，如果文件特别大，可能会导致客户端提供服务暂停数毫秒或者几秒")])])]),s._v(" "),_("h3",{attrs:{id:"aof"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#aof"}},[s._v("#")]),s._v(" AOF：")]),s._v(" "),_("blockquote",[_("p",[s._v("AOF 是 以日志的形式来记录每个写操作，将每一次对数据进行修改，都把新建、修改数据的命令保存到指 定文件中。Redis 重新启")]),s._v(" "),_("p",[s._v("动时读取这个文件，重新执行新建、修改数据的命令恢复数据。")]),s._v(" "),_("p",[s._v("当两种方式同时开启时，数据恢复Redis会优先选择AOF恢复")]),s._v(" "),_("p",[s._v("优点：")]),s._v(" "),_("ul",[_("li",[_("p",[s._v("数据安全，AOF持久化可以配置 appendfsync 属性，有 always，每进行一次 命令操作就记录到 AOF文件中一次。")])]),s._v(" "),_("li",[_("p",[s._v("通过 append 模式写文件，即使中途服务器宕机，可以通过 redis-check-aof 工具解决数据一致性问题。")])]),s._v(" "),_("li",[_("p",[s._v("AOF日志文件的命令通过非常可读的方式进行记录，这个非常适合做灾难性的误删除紧急恢复，如果某人不小心用flushall命令")]),s._v(" "),_("p",[s._v("清空了所有数据，只要这个时候还没有执行rewrite，那么就可以将日志文件中的flushall删除，进行恢复")])])]),s._v(" "),_("p",[s._v("缺点：")]),s._v(" "),_("ul",[_("li",[s._v("对于同一份文件AOF文件比RDB数据快照要大。")]),s._v(" "),_("li",[s._v("AOF开启后支持写的QPS会比RDB支持的写的QPS低，因为AOF一般会配置成每秒fsync操作，每秒的fsync操作还是很高的、")]),s._v(" "),_("li",[s._v("数据恢复比较慢，不适合做冷备。")])])]),s._v(" "),_("h2",{attrs:{id:"_9、rdb和aof到底如何选择"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_9、rdb和aof到底如何选择"}},[s._v("#")]),s._v(" 9、RDB和AOF到底如何选择？")]),s._v(" "),_("p",[_("strong",[s._v("如何看待数据“绝对”安全？")])]),s._v(" "),_("blockquote",[_("p",[s._v("Redis 作为内存数据库从本质上来说，如果不想牺牲性能，就不可能做到数据的“绝对”安全。 RDB 和AOF 都只是尽可能在兼顾性能的前提下降低数据丢失的风险，如果真的发生数据丢失问题，尽可能 减少损失。 在整个项目的架构体系中，Redis 大部分情况是扮演“二级缓存”角色。")]),s._v(" "),_("p",[s._v("二级缓存适合保存的数据")]),s._v(" "),_("ul",[_("li",[_("p",[s._v("经常要查询，很少被修改的数据。")])]),s._v(" "),_("li",[_("p",[s._v("不是非常重要，允许出现偶尔的并发问题。")])]),s._v(" "),_("li",[_("p",[s._v("不会被其他应用程序修改。")]),s._v(" "),_("p",[s._v("如果Redis 是作为缓存服务器，那么说明数据在MySQL 这样的传统关系型数据库中是有正式版本的。数据最终以MySQL 中的为准。")])])])]),s._v(" "),_("p",[_("strong",[s._v("RDB和AOF到底如何选择?")])]),s._v(" "),_("blockquote",[_("ul",[_("li",[_("p",[s._v("不要仅仅使用RDB这样会丢失很多数据。")])]),s._v(" "),_("li",[_("p",[s._v("也不要仅仅使用AOF，因为这会有两个问题，第一通过AOF做冷备没有RDB做冷备恢复的速度快；第二RDB每次简单粗暴生成数据快照，更加健壮。")])]),s._v(" "),_("li",[_("p",[s._v("综合AOF和RDB两种持久化方式，用AOF来保证数据不丢失，作为恢复数据的第一选择；用RDB来做不同程度的冷备，在AOF文件都丢失或损坏不可用的时候，可以使用RDB进行快速的数据恢复。")]),s._v(" "),_("p",[_("strong",[s._v("官方推荐两个都用：")]),s._v("==如果对数据不敏感，可以选单独用RDB；不建议单独用AOF，因为可能出现Bug;如果只是 做纯内存缓存，可以都不用==")])])])]),s._v(" "),_("h2",{attrs:{id:"_10、redis持久化数据和缓存怎么做扩容"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_10、redis持久化数据和缓存怎么做扩容"}},[s._v("#")]),s._v(" 10、Redis持久化数据和缓存怎么做扩容？")]),s._v(" "),_("blockquote",[_("ul",[_("li",[_("p",[s._v("如果Redis被当做缓存使用，使用一致性哈希实现动态扩容缩容。")])]),s._v(" "),_("li",[_("p",[s._v("如果Redis被当做一个持久化存储使用，必须使用固定的keys-to-nodes映射关系，节点的数量一旦确定不能变化。否则的话(即")]),s._v(" "),_("p",[s._v("Redis节点需要动态变化的情况），必须使用可以在运行时进行数据再平衡的一套系统，而当前只有Redis集群可以做到这样。")])])])]),s._v(" "),_("h2",{attrs:{id:"_11、redis-过期键的删除策略"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_11、redis-过期键的删除策略"}},[s._v("#")]),s._v(" 11、Redis 过期键的删除策略？")]),s._v(" "),_("blockquote",[_("ul",[_("li",[_("p",[_("strong",[s._v("定时删除")]),s._v("：每个设置过期时间的key都需要创建一个定时器，到过期时间就会立即清除。该策略可以立即清除过期的数据，对内")]),s._v(" "),_("p",[s._v("存很友好；但是会占用大量的CPU资源去处理过期的数据，从而影响缓存的响应时间和吞吐量。")])]),s._v(" "),_("li",[_("p",[_("strong",[s._v("惰性删除")]),s._v("：只有当访问一个key时，才会判断该key是否已过期，过期则清除。该策略可以最大化地节省CPU资源，却对内存非常不友好。极端情况可能出现大量的过期key没有再次被访问，从而不会被清除，占用大量内存。")])]),s._v(" "),_("li",[_("p",[_("strong",[s._v("定期过期")]),s._v("：每隔一定的时间，会扫描一定数量的数据库的expires字典中一定数量的key，并清除其中已过期的key。该策略是前两者的一个折中方案。通过调整定时扫描的时间间隔和每次扫描的限定耗时，可以在不同情况下使得CPU和内存资源达到最优的平衡效果。 (expires字典会保存所有设置了过期时间的key的过期时间数据，其中，key是指向键空间中的某个键的指针，value是该键的毫秒精度的UNIX时间戳表示的过期时间。键空间是指该Redis集群中保存的所有键。)")])])]),s._v(" "),_("p",[s._v("PS：Redis中同时使用了"),_("strong",[s._v("惰性删除")]),s._v("和"),_("strong",[s._v("定期删除")]),s._v("两种过期策略。")])]),s._v(" "),_("h2",{attrs:{id:"_12、redis的内存淘汰策略有哪些"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_12、redis的内存淘汰策略有哪些"}},[s._v("#")]),s._v(" 12、Redis的内存淘汰策略有哪些？")]),s._v(" "),_("blockquote",[_("p",[s._v("Redis的内存淘汰策略是指在Redis的用于缓存的内存不足时，怎么处理需要新写入且需要申请额外空间的数据。")])]),s._v(" "),_("p",[_("strong",[s._v("全局的键空间选择性移除")])]),s._v(" "),_("ul",[_("li",[s._v("noeviction：当内存不足以容纳新写入数据时，新写入操作会报错。")]),s._v(" "),_("li",[s._v("allkeys-lru：当内存不足以容纳新写入数据时，在键空间中，移除最近最少使用的key。（这个是最常用的）")]),s._v(" "),_("li",[s._v("allkeys-random：当内存不足以容纳新写入数据时，在键空间中，随机移除某个key。")])]),s._v(" "),_("p",[_("strong",[s._v("设置过期时间的键空间选择性移除")])]),s._v(" "),_("ul",[_("li",[s._v("volatile-lru：当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，移除最近最少使用的key。")]),s._v(" "),_("li",[s._v("volatile-random：当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，随机移除某个key。")]),s._v(" "),_("li",[s._v("volatile-ttl：当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，有更早过期时间的key优先移除。")])]),s._v(" "),_("p",[s._v("PS：Redis的内存淘汰策略的选取并不会影响过期的key的处理。内存淘汰策略用于处理内存不足时的需要申请额外空间的数据；过期策略用于处理过期的缓存数据")]),s._v(" "),_("h2",{attrs:{id:"_13、redis如何做内存优化"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_13、redis如何做内存优化"}},[s._v("#")]),s._v(" 13、Redis如何做内存优化？")]),s._v(" "),_("blockquote",[_("p",[s._v("可以好好利用Hash,list,sorted set,set等集合类型数据，因为通常情况下很多小的Key-Value可以用更紧凑的方式存放到一起。尽可能使用散列表（hashes），散列表（是说散列表里面存储的数少）使用的内存非常小，所以你应该尽可能的将你的数据模型抽象到一个散列表里面。比如你的web系统中有一个用户对象，不要为这个用户的名称，姓氏，邮箱，密码设置单独的key，而是应\n该把这个用户的所有信息存储到一张散列表里面")])]),s._v(" "),_("h2",{attrs:{id:"_14、什么是事务"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_14、什么是事务"}},[s._v("#")]),s._v(" 14、什么是事务？")]),s._v(" "),_("blockquote",[_("p",[s._v("事务是一个单独的隔离操作：事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。\n事务是一个原子操作：事务中的命令要么全部被执行，要么全部都不执行。")])]),s._v(" "),_("h2",{attrs:{id:"_15、redis事务的概念"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_15、redis事务的概念"}},[s._v("#")]),s._v(" 15、Redis事务的概念")]),s._v(" "),_("blockquote",[_("p",[s._v("Redis 事务的本质是通过MULTI、EXEC、WATCH等一组命令的集合。事务支持一次执行多个命令，一个事务中所有命令都会被序列化。在事务执行过程，会按照顺序串行化执行队列中的命令，其他客户端提交的命令请求不会插入到事务执行命令序列中。\n总结：redis事务就是一次性、顺序性、排他性的执行一个队列中的一系列命令。")])]),s._v(" "),_("h2",{attrs:{id:"_16、redis事务的三个阶段"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_16、redis事务的三个阶段"}},[s._v("#")]),s._v(" 16、Redis事务的三个阶段")]),s._v(" "),_("blockquote",[_("ul",[_("li",[s._v("事务开始 MULTI")]),s._v(" "),_("li",[s._v("命令入队")]),s._v(" "),_("li",[s._v("事务执行 EXEC")])])]),s._v(" "),_("h2",{attrs:{id:"_17、-redis事务相关命令"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_17、-redis事务相关命令"}},[s._v("#")]),s._v(" 17、 Redis事务相关命令")]),s._v(" "),_("blockquote",[_("p",[s._v("Redis事务功能是通过MULTI、EXEC、DISCARD和WATCH 四个原语实现的")]),s._v(" "),_("p",[s._v("Redis会将一个事务中的所有命令序列化，然后按顺序执行。")]),s._v(" "),_("ol",[_("li",[_("p",[_("strong",[s._v("redis")]),s._v(" "),_("strong",[s._v("不支持回滚")]),s._v("，“Redis 在事务失败时不进行回滚，而是继续执行余下的命令”， 所以 Redis 的内部可以保持简单且快速。")])]),s._v(" "),_("li",[_("p",[_("strong",[s._v("如果在一个事务中的命令出现错误，那么所有的命令都不会执行")]),s._v("；")])]),s._v(" "),_("li",[_("p",[_("strong",[s._v("如果在一个事务中出现运行错误，那么正确的命令会被执行")]),s._v("。")])])]),s._v(" "),_("p",[s._v("WATCH 命令是一个乐观锁，可以为 Redis 事务提供 check-and-set （CAS）行为。 可以监控一个或多个键，一旦其中有一个键被修改（或删除），之后的事务就不会执行，监控一直持续到EXEC命令。")]),s._v(" "),_("p",[s._v("MULTI命令用于开启一个事务，它总是返回OK。 MULTI执行之后，客户端可以继续向服务器发送任意多条命令，这些命令不会立即被执行，而是被放到一个队列中，当EXEC命令被调用时，所有队列中的命令才会被执行。")]),s._v(" "),_("p",[s._v("EXEC：执行所有事务块内的命令。返回事务块内所有命令的返回值，按命令执行的先后顺序排列。 当操作被打断时，返回空值 nil。")]),s._v(" "),_("p",[s._v("通过调用DISCARD，客户端可以清空事务队列，并放弃执行事务， 并且客户端会从事务状态中退出。")]),s._v(" "),_("p",[s._v("UNWATCH命令可以取消watch对所有key的监控。")])]),s._v(" "),_("h2",{attrs:{id:"_18、-事务管理-acid-概述"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_18、-事务管理-acid-概述"}},[s._v("#")]),s._v(" 18、 事务管理（ACID）概述")]),s._v(" "),_("blockquote",[_("ul",[_("li",[s._v("原子性（Atomicity）")])]),s._v(" "),_("p",[s._v("原子性是指事务是一个不可分割的工作单位，事务中的操作要么都发生，要么都不发生。")]),s._v(" "),_("ul",[_("li",[s._v("一致性（Consistency）")])]),s._v(" "),_("p",[s._v("事务前后数据的完整性必须保持一致。")]),s._v(" "),_("ul",[_("li",[s._v("隔离性（Isolation）")])]),s._v(" "),_("p",[s._v("多个事务并发执行时，一个事务的执行不应影响其他事务的执行")]),s._v(" "),_("ul",[_("li",[s._v("持久性（Durability）")])]),s._v(" "),_("p",[s._v("持久性是指一个事务一旦被提交，它对数据库中数据的改变就是永久性的，接下来即使数据库发生故障也不应该对其有任何影响")]),s._v(" "),_("p",[s._v("Redis的事务总是具有ACID中的一致性和隔离性，其他特性是不支持的。当服务器运行在_AOF_持久化模式 下，并且appendfsync选项的值为always时，事务也具有耐久性。")])]),s._v(" "),_("h2",{attrs:{id:"_19、redis事务支持隔离性吗"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_19、redis事务支持隔离性吗"}},[s._v("#")]),s._v(" 19、Redis事务支持隔离性吗")]),s._v(" "),_("blockquote",[_("p",[s._v("Redis 是单进程程序，并且它保证在执行事务时，不会对事务进行中断，事务可以运行直到执行完所有事务队列中的命令为止。因此，"),_("strong",[s._v("Redis")]),s._v(" "),_("strong",[s._v("的事务是总是带有隔离性的")]),s._v("。")])]),s._v(" "),_("h2",{attrs:{id:"_20、主从复制了解吗"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_20、主从复制了解吗"}},[s._v("#")]),s._v(" 20、主从复制了解吗？")]),s._v(" "),_("p",[_("img",{attrs:{src:e(478),alt:"image-20220629091323779"}})]),s._v(" "),_("blockquote",[_("p",[_("strong",[s._v("主从复制")]),s._v("，是指将一台 Redis 服务器的数据，复制到其他的 Redis 服务器。前者称为 "),_("strong",[s._v("主节点(master)")]),s._v("，后者称为 "),_("strong",[s._v("从节点(slave)")]),s._v("。且数据的复制是 "),_("strong",[s._v("单向")]),s._v(" 的，只能由主节点到从节点。Redis 主从复制支持 "),_("strong",[s._v("主从同步")]),s._v(" 和 "),_("strong",[s._v("从从同步")]),s._v(" 两种，后者是 Redis 后续版本新增的功能，以减轻主节点的同步负担。")]),s._v(" "),_("p",[s._v("作用：")]),s._v(" "),_("ul",[_("li",[_("strong",[s._v("数据冗余：")]),s._v(" 主从复制实现了数据的热备份，是持久化之外的一种数据冗余方式。")]),s._v(" "),_("li",[_("strong",[s._v("故障恢复：")]),s._v(" 当主节点出现问题时，可以由从节点提供服务，实现快速的故障恢复 "),_("em",[s._v("(实际上是一种服务的冗余)")]),s._v("。")]),s._v(" "),_("li",[_("strong",[s._v("负载均衡：")]),s._v(" 在主从复制的基础上，配合读写分离，可以由主节点提供写服务，由从节点提供读服务 "),_("em",[s._v("（即写 Redis 数据时应用连接主节点，读 Redis 数据时应用连接从节点）")]),s._v("，分担服务器负载。尤其是在写少读多的场景下，通过多个从节点分担读负载，可以大大提高 Redis 服务器的并发量。")]),s._v(" "),_("li",[_("strong",[s._v("高可用基石：")]),s._v(" 除了上述作用以外，主从复制还是哨兵和集群能够实施的 "),_("strong",[s._v("基础")]),s._v("，因此说主从复制是 Redis 高可用的基础。")])])]),s._v(" "),_("h2",{attrs:{id:"_21、redis主从有几种常见的拓扑结构"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_21、redis主从有几种常见的拓扑结构"}},[s._v("#")]),s._v(" 21、Redis主从有几种常见的拓扑结构？")]),s._v(" "),_("blockquote",[_("p",[s._v("Redis的复制拓扑结构可以支持单层或多层复制关系，根据拓扑复杂性可以分为以下三种：一主一从、一主多从、树状主从结构。")]),s._v(" "),_("ul",[_("li",[_("p",[s._v("一主一从结构")]),s._v(" "),_("p",[s._v("一主一从结构是最简单的复制拓扑结构，用于主节点出现宕机时从节点提供故障转移支持。")]),s._v(" "),_("p",[_("img",{attrs:{src:e(479),alt:"image-20220629091509511"}})])]),s._v(" "),_("li",[_("p",[s._v("一主多从结构")]),s._v(" "),_("p",[s._v("主多从结构（又称为星形拓扑结构）使得应用端可以利用多个从节点实现读写分离）。对于读占比较大的场景，可以把读命令发送到从节点来分担主节点压力。")]),s._v(" "),_("p",[_("img",{attrs:{src:e(480),alt:"image-20220629091558035"}})])]),s._v(" "),_("li",[_("p",[s._v("树状主从结构")]),s._v(" "),_("p",[s._v("树状主从结构（又称为树状拓扑结构）使得从节点不但可以复制主节点数据，同时可以作为其他从节点的主节点继续向下层复制。通过引入复制中间层，可以有效降低主节点负载和需要传送给从节点的数据量。")]),s._v(" "),_("p",[_("img",{attrs:{src:e(481),alt:"image-20220629091620736"}})])]),s._v(" "),_("li")])]),s._v(" "),_("h2",{attrs:{id:"_22、redis的主从复制原理了解吗"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_22、redis的主从复制原理了解吗"}},[s._v("#")]),s._v(" 22、Redis的主从复制原理了解吗？")]),s._v(" "),_("p",[_("img",{attrs:{src:e(482),alt:"image-20220629091715041"}})]),s._v(" "),_("ol",[_("li",[s._v("保存主节点（master）信息 这一步只是保存主节点信息，保存主节点的ip和port。")]),s._v(" "),_("li",[s._v("主从建立连接 从节点（slave）发现新的主节点后，会尝试和主节点建立网络连接。")]),s._v(" "),_("li",[s._v("发送ping命令 连接建立成功后从节点发送ping请求进行首次通信，主要是检测主从之间网络套接字是否可用、主节点当前是否可接受处理命令。")]),s._v(" "),_("li",[s._v("权限验证 如果主节点要求密码验证，从节点必须正确的密码才能通过验证。")]),s._v(" "),_("li",[s._v("同步数据集 主从复制连接正常通信后，主节点会把持有的数据全部发送给从节点。")]),s._v(" "),_("li",[s._v("命令持续复制 接下来主节点会持续地把写命令发送给从节点，保证主从数据一致性。")])]),s._v(" "),_("h2",{attrs:{id:"_23、主从数据同步的方式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_23、主从数据同步的方式"}},[s._v("#")]),s._v(" 23、主从数据同步的方式？")]),s._v(" "),_("blockquote",[_("p",[s._v("Redis在2.8及以上版本使用psync命令完成主从数据同步，同步过程分为：")]),s._v(" "),_("ul",[_("li",[_("p",[s._v("全量复制")])]),s._v(" "),_("li",[_("p",[s._v("部分复制")])])])]),s._v(" "),_("h3",{attrs:{id:"全量复制"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#全量复制"}},[s._v("#")]),s._v(" 全量复制")]),s._v(" "),_("blockquote",[_("p",[s._v("一般用于初次复制场景，Redis早期支持的复制功能只有全量复制，它会把主节点全部数据一次性发送给从节点，当数据量较大时，会对主从节点和网络造成很大的开销。")])]),s._v(" "),_("p",[s._v("全量复制的完整运行流程如下：")]),s._v(" "),_("p",[_("img",{attrs:{src:e(483),alt:"image-20220705115015303"}})]),s._v(" "),_("ol",[_("li",[s._v("发送psync命令进行数据同步，由于是第一次进行复制，从节点没有复制偏移量和主节点的运行ID，所以发送psync-1。")]),s._v(" "),_("li",[s._v("主节点根据psync-1解析出当前为全量复制，回复+FULLRESYNC响应。")]),s._v(" "),_("li",[s._v("从节点接收主节点的响应数据保存运行ID和偏移量offset")]),s._v(" "),_("li",[s._v("主节点执行bgsave保存RDB文件到本地")]),s._v(" "),_("li",[s._v("主节点发送RDB文件给从节点，从节点把接收的RDB文件保存在本地并直接作为从节点的数据文件")]),s._v(" "),_("li",[s._v("对于从节点开始接收RDB快照到接收完成期间，主节点仍然响应读写命令，因此主节点会把这期间写命令数据保存在复制客户端缓冲区内，当从节点加载完RDB文件后，主节点再把缓冲区内的数据发送给从节点，保证主从之间数据一致性。")]),s._v(" "),_("li",[s._v("从节点接收完主节点传送来的全部数据后会清空自身旧数据")]),s._v(" "),_("li",[s._v("从节点清空数据后开始加载RDB文件")]),s._v(" "),_("li",[s._v("从节点成功加载完RDB后，如果当前节点开启了AOF持久化功能， 它会立刻做bgrewriteaof操作，为了保证全量复制后AOF持久化文件立刻可用。")])]),s._v(" "),_("h3",{attrs:{id:"部分复制"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#部分复制"}},[s._v("#")]),s._v(" 部分复制")]),s._v(" "),_("blockquote",[_("p",[s._v("部分复制主要是Redis针对全量复制的过高开销做出的一种优化措施， 使用psync{runId}{offset}命令实现。当从节点（slave）正在复制主节点 （master）时，如果出现网络闪断或者命令丢失等异常情况时，从节点会向 主节点要求补发丢失的命令数据，如果主节点的复制积压缓冲区内存在这部分数据则直接发送给从节点，这样就可以保持主从节点复制的一致性。")])]),s._v(" "),_("p",[_("img",{attrs:{src:e(484),alt:"image-20220705115135124"}})]),s._v(" "),_("ol",[_("li",[s._v("当主从节点之间网络出现中断时，如果超过repl-timeout时间，主节点会认为从节点故障并中断复制连接")]),s._v(" "),_("li",[s._v("主从连接中断期间主节点依然响应命令，但因复制连接中断命令无法发送给从节点，不过主节点内部存在的复制积压缓冲区，依然可以保存最近一段时间的写命令数据，默认最大缓存1MB。")]),s._v(" "),_("li",[s._v("当主从节点网络恢复后，从节点会再次连上主节点")]),s._v(" "),_("li",[s._v("当主从连接恢复后，由于从节点之前保存了自身已复制的偏移量和主节点的运行ID。因此会把它们当作psync参数发送给主节点，要求进行部分复制操作。")]),s._v(" "),_("li",[s._v("主节点接到psync命令后首先核对参数runId是否与自身一致，如果一 致，说明之前复制的是当前主节点；之后根据参数offset在自身复制积压缓冲区查找，如果偏移量之后的数据存在缓冲区中，则对从节点发送+CONTINUE响应，表示可以进行部分复制。")]),s._v(" "),_("li",[s._v("主节点根据偏移量把复制积压缓冲区里的数据发送给从节点，保证主从复制进入正常状态。")])]),s._v(" "),_("h2",{attrs:{id:"_24、主从复制存在哪些问题呢"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_24、主从复制存在哪些问题呢"}},[s._v("#")]),s._v(" 24、主从复制存在哪些问题呢？")]),s._v(" "),_("blockquote",[_("p",[s._v("主从复制虽好，但也存在一些问题：")]),s._v(" "),_("ul",[_("li",[s._v("一旦主节点出现故障，需要手动将一个从节点晋升为主节点，同时需要修改应用方的主节点地址，还需要命令其他从节点去复制新的主节点，整个过程都需要人工干预。")]),s._v(" "),_("li",[s._v("主节点的写能力受到单机的限制。")]),s._v(" "),_("li",[s._v("主节点的存储能力受到单机的限制。")])]),s._v(" "),_("p",[s._v("第一个问题是Redis的高可用问题，第二、三个问题属于Redis的分布式问题。")])]),s._v(" "),_("h2",{attrs:{id:"_25、redis为什么早期选择单线程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_25、redis为什么早期选择单线程"}},[s._v("#")]),s._v(" 25、Redis为什么早期选择单线程？")]),s._v(" "),_("blockquote",[_("p",[s._v("官方解释：https://redis.io/topics/faq")]),s._v(" "),_("p",[s._v("官方FAQ表示，因为Redis是基于内存的操作，CPU成为Redis的瓶颈的情况很少见，Redis的瓶颈最有可能是内存的大小或者网络限制。")]),s._v(" "),_("p",[s._v("如果想要最大程度利用CPU，可以在一台机器上启动多个Redis实例。")]),s._v(" "),_("p",[s._v("PS：网上有这样的回答，吐槽官方的解释有些敷衍，其实就是历史原因，开发者嫌多线程麻烦，后来这个CPU的利用问题就被抛给了使用者。")]),s._v(" "),_("p",[s._v("同时FAQ里还提到了， Redis 4.0 之后开始变成多线程，除了主线程外，它也有后台线程在处理一些较为缓慢的操作，例如清理脏数据、无用连接的释放、大 Key 的删除等等。")])]),s._v(" "),_("h2",{attrs:{id:"_26、redis6-0使用多线程是怎么回事"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_26、redis6-0使用多线程是怎么回事"}},[s._v("#")]),s._v(" 26、Redis6.0使用多线程是怎么回事?")]),s._v(" "),_("blockquote",[_("p",[s._v("Redis6.0的多线程是用多线程来处理数据的"),_("strong",[s._v("读写和协议解析")]),s._v("，但是Redis"),_("strong",[s._v("执行命令")]),s._v("还是单线程的。")]),s._v(" "),_("p",[s._v("这样做的⽬的是因为Redis的性能瓶颈在于⽹络IO⽽⾮CPU，使⽤多线程能提升IO读写的效率，从⽽整体提⾼Redis的性能。")])]),s._v(" "),_("p",[_("img",{attrs:{src:e(485),alt:"image-20220705115339601"}})]),s._v(" "),_("h2",{attrs:{id:"_27、redis-sentinel-哨兵-了解吗"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_27、redis-sentinel-哨兵-了解吗"}},[s._v("#")]),s._v(" 27、Redis Sentinel（哨兵）了解吗")]),s._v(" "),_("p",[s._v("主从复制存在一个问题，没法完成自动故障转移。所以我们需要一个方案来完成自动故障转移，它就是Redis Sentinel（哨兵）。")]),s._v(" "),_("p",[_("img",{attrs:{src:e(486),alt:"image-20220705145354411"}})]),s._v(" "),_("p",[s._v("Redis Sentinel ，它由两部分组成，哨兵节点和数据节点：")]),s._v(" "),_("ul",[_("li",[_("strong",[s._v("哨兵节点：")]),s._v(" 哨兵系统由一个或多个哨兵节点组成，哨兵节点是特殊的 Redis 节点，不存储数据，对数据节点进行监控。")]),s._v(" "),_("li",[_("strong",[s._v("数据节点：")]),s._v(" 主节点和从节点都是数据节点；")])]),s._v(" "),_("p",[s._v("在复制的基础上，哨兵实现了 "),_("strong",[s._v("自动化的故障恢复")]),s._v(" 功能，下面是官方对于哨兵功能的描述：")]),s._v(" "),_("ul",[_("li",[_("strong",[s._v("监控（Monitoring）：")]),s._v(" 哨兵会不断地检查主节点和从节点是否运作正常。")]),s._v(" "),_("li",[_("strong",[s._v("自动故障转移（Automatic failover）：")]),s._v(" 当 "),_("strong",[s._v("主节点")]),s._v(" 不能正常工作时，哨兵会开始 "),_("strong",[s._v("自动故障转移操作")]),s._v("，它会将失效主节点的其中一个 "),_("strong",[s._v("从节点升级为新的主节点")]),s._v("，并让其他从节点改为复制新的主节点。")]),s._v(" "),_("li",[_("strong",[s._v("配置提供者（Configuration provider）：")]),s._v(" 客户端在初始化时，通过连接哨兵来获得当前 Redis 服务的主节点地址。")]),s._v(" "),_("li",[_("strong",[s._v("通知（Notification）：")]),s._v(" 哨兵可以将故障转移的结果发送给客户端。")])]),s._v(" "),_("p",[s._v("其中，监控和自动故障转移功能，使得哨兵可以及时发现主节点故障并完成转移。而配置提供者和通知功能，则需要在与客户端的交互中才能体现。")]),s._v(" "),_("h2",{attrs:{id:"_28、redis-sentinel-哨兵-实现原理知道吗"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_28、redis-sentinel-哨兵-实现原理知道吗"}},[s._v("#")]),s._v(" 28、Redis Sentinel（哨兵）实现原理知道吗？")]),s._v(" "),_("p",[s._v("哨兵模式是通过哨兵节点完成对数据节点的监控、下线、故障转移。")]),s._v(" "),_("p",[_("img",{attrs:{src:e(338),alt:"图片"}})]),s._v(" "),_("h3",{attrs:{id:"定时监控"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#定时监控"}},[s._v("#")]),s._v(" 定时监控")]),s._v(" "),_("p",[_("img",{attrs:{src:e(487),alt:"image-20220705150156994"}})]),s._v(" "),_("p",[s._v("Redis Sentinel通过三个定时监控任务完成对各个节点发现和监控：")]),s._v(" "),_("ul",[_("li",[s._v("每隔10秒，每个Sentinel节点会向主节点和从节点发送info命令获取最新的拓扑结构")]),s._v(" "),_("li",[s._v("每隔2秒，每个Sentinel节点会向Redis数据节点的__sentinel__：hello 频道上发送该Sentinel节点对于主节点的判断以及当前Sentinel节点的信息")]),s._v(" "),_("li",[s._v("每隔1秒，每个Sentinel节点会向主节点、从节点、其余Sentinel节点发送一条ping命令做一次心跳检测，来确认这些节点当前是否可达")])]),s._v(" "),_("p",[_("strong",[s._v("主观下线和客观下线")]),s._v("主观下线就是哨兵节点认为某个节点有问题，客观下线就是超过一定数量的哨兵节点认为主节点有问题。")]),s._v(" "),_("p",[_("img",{attrs:{src:e(488),alt:"image-20220705150300624"}})]),s._v(" "),_("ol",[_("li",[s._v("主观下线 每个Sentinel节点会每隔1秒对主节点、从节点、其他Sentinel节点发送ping命令做心跳检测，当这些节点超过 down-after-milliseconds没有进行有效回复，Sentinel节点就会对该节点做失败判定，这个行为叫做主观下线。")]),s._v(" "),_("li",[s._v("客观下线 当Sentinel主观下线的节点是主节点时，该Sentinel节点会通过sentinel is- master-down-by-addr命令向其他Sentinel节点询问对主节点的判断，当超过 "),_("quorum",[s._v("个数，Sentinel节点认为主节点确实有问题，这时该Sentinel节点会做出客观下线的决定")])],1)]),s._v(" "),_("p",[_("strong",[s._v("领导者Sentinel节点选举")]),s._v("Sentinel节点之间会做一个领导者选举的工作，选出一个Sentinel节点作为领导者进行故障转移的工作。Redis使用了Raft算法实现领导者选举。")]),s._v(" "),_("p",[_("strong",[s._v("故障转移")])]),s._v(" "),_("p",[s._v("领导者选举出的Sentinel节点负责故障转移，过程如下：")]),s._v(" "),_("p",[_("img",{attrs:{src:e(489),alt:"image-20220705150359710"}})]),s._v(" "),_("ol",[_("li",[s._v("在从节点列表中选出一个节点作为新的主节点，这一步是相对复杂一些的一步")]),s._v(" "),_("li",[s._v("Sentinel领导者节点会对第一步选出来的从节点执行slaveof no one命令让其成为主节点")]),s._v(" "),_("li",[s._v("Sentinel领导者节点会向剩余的从节点发送命令，让它们成为新主节点的从节点")]),s._v(" "),_("li",[s._v("Sentinel节点集合会将原来的主节点更新为从节点，并保持着对其关注，当其恢复后命令它去复制新的主节点")])]),s._v(" "),_("h2",{attrs:{id:"_29、领导者sentinel节点选举了解吗"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_29、领导者sentinel节点选举了解吗"}},[s._v("#")]),s._v(" 29、领导者Sentinel节点选举了解吗？")]),s._v(" "),_("p",[s._v("Redis使用了Raft算法实 现领导者选举，大致流程如下：")]),s._v(" "),_("p",[_("img",{attrs:{src:e(490),alt:"image-20220705151357216"}})]),s._v(" "),_("ol",[_("li",[s._v("每个在线的Sentinel节点都有资格成为领导者，当它确认主节点主观 下线时候，会向其他Sentinel节点发送sentinel is-master-down-by-addr命令， 要求将自己设置为领导者。")]),s._v(" "),_("li",[s._v("收到命令的Sentinel节点，如果没有同意过其他Sentinel节点的sentinel is-master-down-by-addr命令，将同意该请求，否则拒绝。")]),s._v(" "),_("li",[s._v("如果该Sentinel节点发现自己的票数已经大于等于max（quorum， num（sentinels）/2+1），那么它将成为领导者。")]),s._v(" "),_("li",[s._v("如果此过程没有选举出领导者，将进入下一次选举。")])]),s._v(" "),_("h2",{attrs:{id:"_30、新的主节点是怎样被挑选出来的"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_30、新的主节点是怎样被挑选出来的"}},[s._v("#")]),s._v(" 30、新的主节点是怎样被挑选出来的？")]),s._v(" "),_("ol",[_("li",[s._v("过滤：“不健康”（主观下线、断线）、5秒内没有回复过Sentinel节 点ping响应、与主节点失联超过down-after-milliseconds*10秒。")]),s._v(" "),_("li",[s._v("选择slave-priority（从节点优先级）最高的从节点列表，如果存在则返回，不存在则继续。")]),s._v(" "),_("li",[s._v("选择复制偏移量最大的从节点（复制的最完整），如果存在则返 回，不存在则继续。")]),s._v(" "),_("li",[s._v("选择runid最小的从节点。")])]),s._v(" "),_("h2",{attrs:{id:"_31、redis-集群了解吗"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_31、redis-集群了解吗"}},[s._v("#")]),s._v(" 31、Redis 集群了解吗？")]),s._v(" "),_("blockquote",[_("p",[s._v("前面说到了主从存在高可用和分布式的问题，哨兵解决了高可用的问题，而集群就是终极方案，一举解决高可用和分布式问题。")])]),s._v(" "),_("ol",[_("li",[_("strong",[s._v("数据分区：")]),s._v(" 数据分区 "),_("em",[s._v("(或称数据分片)")]),s._v(" 是集群最核心的功能。集群将数据分散到多个节点，一方面 突破了 Redis 单机内存大小的限制，"),_("strong",[s._v("存储容量大大增加")]),s._v("；"),_("strong",[s._v("另一方面")]),s._v(" 每个主节点都可以对外提供读服务和写服务，"),_("strong",[s._v("大大提高了集群的响应能力")]),s._v("。")]),s._v(" "),_("li",[_("strong",[s._v("高可用：")]),s._v(" 集群支持主从复制和主节点的 "),_("strong",[s._v("自动故障转移")]),s._v(" "),_("em",[s._v("（与哨兵类似）")]),s._v("，当任一节点发生故障时，集群仍然可以对外提供服务。")])]),s._v(" "),_("h2",{attrs:{id:"_32、集群中数据如何分区"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_32、集群中数据如何分区"}},[s._v("#")]),s._v(" 32、集群中数据如何分区？")]),s._v(" "),_("p",[s._v("分布式的存储中，要把数据集按照分区规则映射到多个节点，常见的数据分区规则三种：")]),s._v(" "),_("ul",[_("li",[s._v("哈希取余分区")]),s._v(" "),_("li",[s._v("一致性哈希算法分区")]),s._v(" "),_("li",[s._v("哈希槽分区")])]),s._v(" "),_("h3",{attrs:{id:"_1、哈希取余分区"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1、哈希取余分区"}},[s._v("#")]),s._v(" 1、哈希取余分区")]),s._v(" "),_("p",[_("img",{attrs:{src:e(491),alt:"image-20220425225921158"}})]),s._v(" "),_("blockquote",[_("p",[s._v("2亿条记录就是2亿个k,v，我们单机不行必须要分布式多机，假设有3台机器构成一个集群，用户每次读写操作都是根据公式：\nhash(key) % N个机器台数，计算出哈希值，用来决定数据映射到哪一个节点上。")])]),s._v(" "),_("p",[_("strong",[s._v("优点：")])]),s._v(" "),_("div",{staticClass:"language- line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[s._v("简单粗暴，直接有效，只需要预估好数据规划好节点，例如3台、8台、10台，就能保证一段时间的数据支撑。使用Hash算法让固定的一部分请求落到同一台服务器上，这样每台服务器固定处理一部分请求（并维护这些请求的信息），起到负载均衡+分而治之的作用。\n")])]),s._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[s._v("1")]),_("br")])]),_("p",[_("strong",[s._v("缺点：")])]),s._v(" "),_("div",{staticClass:"language-\\ line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[s._v(" 原来规划好的节点，进行扩容或者缩容就比较麻烦了额，不管扩缩，每次数据变动导致节点有变动，映射关系需要重新进行计算，在服务器个数固定不变时没有问题，如果需要弹性扩容或故障停机的情况下，原来的取模公式就会发生变化：Hash(key)/3会变成Hash(key) /?。此时地址经过取余运算的结果将发生很大变化，根据公式获取的服务器也会变得不可控。\n某个redis机器宕机了，由于台数数量变化，会导致hash取余全部数据重新洗牌。\n")])]),s._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[s._v("1")]),_("br"),_("span",{staticClass:"line-number"},[s._v("2")]),_("br")])]),_("h3",{attrs:{id:"_2、一致性哈希算法分区"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2、一致性哈希算法分区"}},[s._v("#")]),s._v(" 2、一致性哈希算法分区")]),s._v(" "),_("blockquote",[_("p",[s._v("一致性哈希算法在1997年由麻省理工学院中提出的，设计目标是"),_("strong",[s._v("为了解决分布式缓存数据变动和映射问题，某个机器宕机了，分母数量改变了，自然取余数不OK了。")])])]),s._v(" "),_("p",[_("strong",[s._v("作用：")])]),s._v(" "),_("blockquote",[_("p",[s._v("提出一致性Hash解决方案。目的是当服务器个数发生变动时，尽量减少影响客户端到服务器的映射关系")])]),s._v(" "),_("p",[_("strong",[s._v("步骤：")])]),s._v(" "),_("ol",[_("li",[_("p",[s._v("算法构建一致性哈希环")]),s._v(" "),_("p",[_("strong",[s._v("一致性哈希环")])]),s._v(" "),_("blockquote",[_("p",[s._v("​    一致性哈希算法必然有个hash函数并按照算法产生hash值，这个算法的所有可能哈希值会构成一个全量集，这个集合可以成为一个hash空间[0,2^32-1]，这个是一个线性空间，但是在算法中，我们通过适当的逻辑控制将它首尾相连(0 = 2^32),这样让它逻辑上形成了一个环形空间。")]),s._v(" "),_("p",[s._v("它也是按照使用取模的方法，前面笔记介绍的节点取模法是对节点（服务器）的数量进行取模。而一致性Hash算法是对2^32 取模，简单来说，一致性Hash算法将整个哈希值空间组织成一个虚拟的圆环，如假设某哈希函数H的值空间为0-2^32-1 （即哈希值是一个32位无符号整形），整个哈希环如下图：整个空间按顺时针方向组织，圆环的正上方的点代表0，0点右侧的第一个点代表1，以此类推，2、3、4、……直到2^32-1 ，也就是说0点左侧的第一个点代表2^32-1， 0和2^32-1 在零点中方向重合，我们把这个由2^32个点组成的圆环称为Hash环。")])]),s._v(" "),_("p",[_("img",{attrs:{src:e(492),alt:"image-20220425230502555"}})])]),s._v(" "),_("li",[_("p",[s._v("服务器IP节点映射")]),s._v(" "),_("p",[s._v("节点映射")]),s._v(" "),_("blockquote",[_("p",[s._v("将集群中各个IP节点映射到环上的某一个位置。\n将各个服务器使用Hash进行一个哈希，具体可以选择服务器的IP或主机名作为关键字进行哈希，这样每台机器就能确定其在哈希环上的位置。假如4个节点NodeA、B、C、D，经过IP地址的哈希函数计算(hash(ip))，使用IP地址哈希后在环空间的位置如下：")])]),s._v(" "),_("p",[_("img",{attrs:{src:e(493),alt:"image-20220425230647469"}})])]),s._v(" "),_("li",[_("p",[s._v("key落到服务器的落键规则")]),s._v(" "),_("blockquote",[_("p",[s._v("当我们需要存储一个kv键值对时，首先计算key的hash值，hash(key)，将这个key使用相同的函数Hash计算出哈希值并确定此数据在环上的位置，从此位置沿环顺时针“行走”，第一台遇到的服务器就是其应该定位到的服务器，并将该键值对存储在该节点上。\n如我们有Object A、Object B、Object C、Object D四个数据对象，经过哈希计算后，在环空间上的位置如下：根据一致性Hash算法，数据A会被定为到Node A上，B被定为到Node B上，C被定为到Node C上，D被定为到Node D上。")])]),s._v(" "),_("p",[_("img",{attrs:{src:e(494),alt:"image-20220425230712127"}})])])]),s._v(" "),_("p",[_("strong",[s._v("优点：")])]),s._v(" "),_("p",[s._v("1.一致性哈希算法的容错性")]),s._v(" "),_("blockquote",[_("p",[s._v("容错性\n假设Node C宕机，可以看到此时对象A、B、D不会受到影响，只有C对象被重定位到Node D。一般的，在一致性Hash算法中，如果一台服务器不可用，则受影响的数据仅仅是此服务器到其环空间中前一台服务器（即沿着逆时针方向行走遇到的第一台服务器）之间数据，其它不会受到影响。简单说，就是C挂了，受到影响的只是B、C之间的数据，并且这些数据会转移到D进行存储。")])]),s._v(" "),_("p",[_("img",{attrs:{src:e(495),alt:"image-20220425230845392"}})]),s._v(" "),_("p",[s._v("2.一致性哈希算法的扩展性")]),s._v(" "),_("blockquote",[_("p",[s._v("扩展性\n数据量增加了，需要增加一台节点NodeX，X的位置在A和B之间，那收到影响的也就是A到X之间的数据，重新把A到X的数据录入到X上即可，不会导致hash取余全部数据重新洗牌。")])]),s._v(" "),_("p",[_("img",{attrs:{src:e(496),alt:"image-20220425230934948"}})]),s._v(" "),_("p",[_("strong",[s._v("缺点：")])]),s._v(" "),_("blockquote",[_("p",[s._v("一致性哈希算法的数据倾斜问题")]),s._v(" "),_("p",[s._v("一致性Hash算法在服务节点太少时，容易因为节点分布不均匀而造成数据倾斜（被缓存的对象大部分集中缓存在某一台服务器上）问题，\n例如系统中只有两台服务器：")])]),s._v(" "),_("p",[_("img",{attrs:{src:e(497),alt:"image-20220425231012335"}})]),s._v(" "),_("p",[_("strong",[s._v("总结：")])]),s._v(" "),_("blockquote",[_("p",[s._v("为了在节点数目发生改变时尽可能少的迁移数据")]),s._v(" "),_("p",[s._v("将所有的存储节点排列在收尾相接的Hash环上，每个key在计算Hash后会顺时针找到临近的存储节点存放。\n而当有节点加入或退出时仅影响该节点在Hash环上顺时针相邻的后续节点。")]),s._v(" "),_("p",[_("strong",[s._v("优点")]),s._v("    加入和删除节点只影响哈希环中顺时针方向的相邻的节点，对其他节点无影响。")]),s._v(" "),_("p",[_("strong",[s._v("缺点")]),s._v("    数据的分布和节点的位置有关，因为这些节点不是均匀的分布在哈希环上的，所以数据在进行存储时达不到均匀分布的效果。")])]),s._v(" "),_("h3",{attrs:{id:"_3、哈希槽分区"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3、哈希槽分区"}},[s._v("#")]),s._v(" 3、哈希槽分区")]),s._v(" "),_("blockquote",[_("p",[s._v("哈希槽实质就是一个数组，数组[0,2^14 -1]形成hash slot空间。")]),s._v(" "),_("p",[s._v("**作用：**解决一致性哈希算法的数据倾斜问题")])]),s._v(" "),_("p",[s._v("解决均匀分配的问题，在数据和节点之间又加入了一层，把这层称为哈希槽（slot），用于管理数据和节点之间的关系，现在就相当于节点上放的是槽，槽里放的是数据。")]),s._v(" "),_("p",[_("img",{attrs:{src:e(498),alt:"image-20220425231209394"}})]),s._v(" "),_("p",[s._v("槽解决的是粒度问题，相当于把粒度变大了，这样便于数据移动。\n哈希解决的是映射问题，使用key的哈希值来计算所在的槽，便于数据分配。")]),s._v(" "),_("h4",{attrs:{id:"哈希槽的计算"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#哈希槽的计算"}},[s._v("#")]),s._v(" 哈希槽的计算")]),s._v(" "),_("blockquote",[_("p",[s._v("Redis 集群中内置了 16384 个哈希槽，redis 会根据节点数量大致均等的将哈希槽映射到不同的节点。当需要在 Redis 集群中放置一个 key-value时，redis 先对 key 使用 crc16 算法算出一个结果，然后把结果对 16384 求余数，这样每个 key 都会对应一个编号在 0-16383 之间的哈希槽，也就是映射到某个节点上。如下代码，key之A 、B在Node2， key之C落在Node3上")])]),s._v(" "),_("p",[_("img",{attrs:{src:e(499),alt:"image-20220425231325048"}})]),s._v(" "),_("p",[_("img",{attrs:{src:e(500),alt:"image-20220425231331746"}})]),s._v(" "),_("h2",{attrs:{id:"_33、什么是缓存击穿、缓存穿透、缓存雪崩"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_33、什么是缓存击穿、缓存穿透、缓存雪崩"}},[s._v("#")]),s._v(" 33、什么是缓存击穿、缓存穿透、缓存雪崩？")]),s._v(" "),_("blockquote",[_("ul",[_("li",[s._v("缓存穿透：key对应的数据在数据源并不存在，每次针对此key的请求从缓存获取不到，请求都会到数据源，从而可能压垮数据源。比如用一个不存在的用户id获取用户信息，不论缓存还是数据库都没有，若黑客利用此漏洞进行攻击可能压垮数据库。")]),s._v(" "),_("li",[s._v("缓存击穿：key对应的数据存在，但在redis中过期，此时若有大量并发请求过来，这些请求发现缓存过期一般都会从后端DB加载数据并回设到缓存，这个时候大并发的请求可能会瞬间把后端DB压垮。")]),s._v(" "),_("li",[s._v("缓存雪崩：某⼀时刻发生大规模的缓存失效的情况，例如缓存服务宕机、缓存服务器重启、大量缓存集中在某一个时间段失效，这样在失效的时候，也会给后端系统(比如DB)带来很大压力。")])])]),s._v(" "),_("h3",{attrs:{id:"缓存击穿解决方案"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#缓存击穿解决方案"}},[s._v("#")]),s._v(" 缓存击穿解决方案")]),s._v(" "),_("blockquote",[_("ul",[_("li",[s._v("加锁更新，⽐如请求查询A，发现缓存中没有，对A这个key加锁，同时去数据库查询数据，写⼊缓存，再返回给⽤户，这样后⾯的请求就可以从缓存中拿到数据了。")]),s._v(" "),_("li",[s._v("将过期时间组合写在value中，通过异步的⽅式不断的刷新过期时间，防⽌此类现象。")])])]),s._v(" "),_("h4",{attrs:{id:"_1、互斥锁"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1、互斥锁"}},[s._v("#")]),s._v(" 1、互斥锁")]),s._v(" "),_("blockquote",[_("p",[s._v("所谓互斥，就是不同线程，通过竞争进入临界区（共享的数据和硬件资源），为了防止访问冲突，在有限的时间内只允许其中之一独占性的使用共享资源。如不允许同时写。")])]),s._v(" "),_("p",[_("img",{attrs:{src:e(501),alt:"image-20220530101002279"}})]),s._v(" "),_("ol",[_("li",[s._v("线程1发起请求，查询缓存发现未命中，然后获取互斥锁，成功之后，则去查询数据库重建缓存数据，写入缓存，释放锁。")]),s._v(" "),_("li",[s._v("线程2在线程1未释放锁之前发起请求，查询缓存未命中，然后获取互斥锁，发现被线程1占用了，则获取失败，休眠一会儿，再重新获取锁（直到线程1释放），最后缓存命中。")])]),s._v(" "),_("p",[s._v("存在的问题：互斥等待时间，如果1000个线程同时访问，则只有1个获取成功，其他999个都是在等待，性能会下降")]),s._v(" "),_("h4",{attrs:{id:"_2、逻辑过期"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2、逻辑过期"}},[s._v("#")]),s._v(" 2、逻辑过期")]),s._v(" "),_("blockquote",[_("p",[s._v("逻辑过期：原来我们存储数据到redis中的时候，存的是k:v键值对，那逻辑过期，就是手动给value增加一个expire时间")])]),s._v(" "),_("table",[_("thead",[_("tr",[_("th",[_("strong",[s._v("KEY")])]),s._v(" "),_("th",[_("strong",[s._v("VALUE")])])])]),s._v(" "),_("tbody",[_("tr",[_("td",[s._v("heima:user:1")]),s._v(" "),_("td",[s._v('{name:"Jack", age:21, '),_("strong",[s._v("expire:152141223")]),s._v("}")])])])]),s._v(" "),_("p",[_("img",{attrs:{src:e(502),alt:"image-20220530102216651"}})]),s._v(" "),_("ol",[_("li",[s._v("线程1发起请求，查询缓存，发现逻辑时间已过期，则回获取互斥锁，此时线程会开启一个新线程2（用于查询数据存入缓存），先返回过期的数据")]),s._v(" "),_("li",[s._v("线程2查询数据库后，重建缓存数据，写入缓存后，重置逻辑过期时间，最后释放锁")]),s._v(" "),_("li",[s._v("线程3发起请求（与线程1同步），查询缓存，发现逻辑时间已过期，获取互斥锁失败，就先返回旧数据")]),s._v(" "),_("li",[s._v("线程4查询缓存，此时线程2已经释放锁，缓存命中，逻辑过期时间未过期，则直接返回")])]),s._v(" "),_("h4",{attrs:{id:"_3、比较"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3、比较"}},[s._v("#")]),s._v(" 3、比较")]),s._v(" "),_("table",[_("thead",[_("tr",[_("th",[_("strong",[s._v("解决方案")])]),s._v(" "),_("th",[_("strong",[s._v("优点")])]),s._v(" "),_("th",[_("strong",[s._v("缺点")])])])]),s._v(" "),_("tbody",[_("tr",[_("td",[_("strong",[s._v("互斥锁")]),s._v("（一致性）")]),s._v(" "),_("td",[s._v("没有额外的内存消耗、保证一致性、实现简单")]),s._v(" "),_("td",[s._v("线程需要等待，性能受影响可能有死锁风险")])]),s._v(" "),_("tr",[_("td",[_("strong",[s._v("逻辑过期")]),s._v("（性能）")]),s._v(" "),_("td",[s._v("线程无需等待，性能较好")]),s._v(" "),_("td",[s._v("不保证一致性、有额外内存消耗、实现复杂")])])])]),s._v(" "),_("h3",{attrs:{id:"缓存穿透解决方案"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#缓存穿透解决方案"}},[s._v("#")]),s._v(" 缓存穿透解决方案")]),s._v(" "),_("h4",{attrs:{id:"_1、缓存空对象"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1、缓存空对象"}},[s._v("#")]),s._v(" 1、缓存空对象")]),s._v(" "),_("blockquote",[_("p",[s._v("当客户端请求到redis后，未命中去查询数据库，数据库查询返回为null，则缓存为null")])]),s._v(" "),_("p",[s._v("优点：")]),s._v(" "),_("ul",[_("li",[s._v("实现简单，维护方便")])]),s._v(" "),_("p",[s._v("缺点：")]),s._v(" "),_("ul",[_("li",[_("p",[s._v("额外的内存消耗")]),s._v(" "),_("blockquote",[_("p",[s._v("若客户端请求大量数据都是不存在的，则redis会缓存大量的null数据")])])]),s._v(" "),_("li",[_("p",[s._v("可能造成短期的不一致")]),s._v(" "),_("blockquote",[_("p",[s._v("客户端请求不存在的数据后，redis缓存数据为null，并设置了超时时间，此时就新增了一条数据，则再去查询时（还在TTL内），还是为null，只有当时间失效时，才会查询到")]),s._v(" "),_("ul",[_("li",[s._v("可在新增时，更新缓存，可解决短期的不一致")])])])])]),s._v(" "),_("h4",{attrs:{id:"_2、布隆过滤器"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2、布隆过滤器"}},[s._v("#")]),s._v(" 2、布隆过滤器")]),s._v(" "),_("blockquote",[_("p",[s._v("布隆过滤器是一个 bit 向量或者说 bit 数组（超长超长，记住一定要足够长）")]),s._v(" "),_("p",[s._v("将所有可能存在的数据哈希到一个足够大的bitmap中，一个一定不存在的数据会被 这个bitmap拦截掉，从而避免了对底层存储系统的查询压力。")])]),s._v(" "),_("p",[s._v("优点：")]),s._v(" "),_("ul",[_("li",[s._v("内存占用较少，没有多余key")])]),s._v(" "),_("p",[s._v("缺点：")]),s._v(" "),_("ul",[_("li",[s._v("实现复杂")]),s._v(" "),_("li",[s._v("存在误判可能")])]),s._v(" "),_("p",[_("img",{attrs:{src:e(503),alt:"image-20220525172112838"}})]),s._v(" "),_("table",[_("thead",[_("tr",[_("th",[s._v("解决缓存穿透")]),s._v(" "),_("th",[s._v("适用场景")]),s._v(" "),_("th",[s._v("维护成本")])])]),s._v(" "),_("tbody",[_("tr",[_("td",[s._v("缓存空对象")]),s._v(" "),_("td",[s._v("数据命中不高；数据频繁实时性高")]),s._v(" "),_("td",[s._v("代码维护简单；需要较多的缓存空间；数据不一致")])]),s._v(" "),_("tr",[_("td",[s._v("布隆过滤器")]),s._v(" "),_("td",[s._v("数据命中不高；数据相对固定实时性低")]),s._v(" "),_("td",[s._v("代码维护复杂；缓存空间占用少")])])])]),s._v(" "),_("h3",{attrs:{id:"缓存雪崩解决方案"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#缓存雪崩解决方案"}},[s._v("#")]),s._v(" 缓存雪崩解决方案")]),s._v(" "),_("ul",[_("li",[_("strong",[s._v("提高缓存可用性")])])]),s._v(" "),_("ol",[_("li",[s._v("集群部署：通过集群来提升缓存的可用性，可以利用Redis本身的Redis Cluster或者第三方集群方案如Codis等。")]),s._v(" "),_("li",[s._v("多级缓存：设置多级缓存，第一级缓存失效的基础上，访问二级缓存，每一级缓存的失效时间都不同。")])]),s._v(" "),_("ul",[_("li",[_("strong",[s._v("过期时间")])])]),s._v(" "),_("ol",[_("li",[s._v("均匀过期：为了避免大量的缓存在同一时间过期，可以把不同的 key 过期时间随机生成，避免过期时间太过集中。")]),s._v(" "),_("li",[s._v("热点数据永不过期。")])]),s._v(" "),_("ul",[_("li",[_("strong",[s._v("熔断降级")])])]),s._v(" "),_("ol",[_("li",[s._v("服务熔断：当缓存服务器宕机或超时响应时，为了防止整个系统出现雪崩，暂时停止业务服务访问缓存系统。")]),s._v(" "),_("li",[s._v("服务降级：当出现大量缓存失效，而且处在高并发高负荷的情况下，在业务系统内部暂时舍弃对一些非核心的接口和数据的请求，而直接返回一个提前准备好的 fallback（退路）错误处理信息。")])]),s._v(" "),_("ul",[_("li",[_("strong",[s._v("给业务添加多级缓存")])])]),s._v(" "),_("h2",{attrs:{id:"_34、如何保证缓存和数据库数据的一致性"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_34、如何保证缓存和数据库数据的一致性"}},[s._v("#")]),s._v(" 34、如何保证缓存和数据库数据的⼀致性？")]),s._v(" "),_("blockquote",[_("p",[s._v("根据CAP理论，在保证可用性和分区容错性的前提下，无法保证一致性，所以缓存和数据库的绝对一致是不可能实现的，只能尽可能保存缓存和数据库的最终一致性。")])]),s._v(" "),_("h3",{attrs:{id:"选择合适的缓存更新策略"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#选择合适的缓存更新策略"}},[s._v("#")]),s._v(" 选择合适的缓存更新策略")]),s._v(" "),_("p",[_("strong",[s._v("1. 删除缓存而不是更新缓存")])]),s._v(" "),_("blockquote",[_("p",[s._v("当一个线程对缓存的key进行写操作的时候，如果其它线程进来读数据库的时候，读到的就是脏数据，产生了数据不一致问题。")]),s._v(" "),_("p",[s._v("相比较而言，删除缓存的速度比更新缓存的速度快很多，所用时间相对也少很多，读脏数据的概率也小很多。")])]),s._v(" "),_("p",[s._v("2."),_("strong",[s._v("先更数据，后删缓存")]),s._v("先更数据库还是先删缓存？这是一个问题。")]),s._v(" "),_("blockquote",[_("p",[s._v("更新数据，耗时可能在删除缓存的百倍以上。在缓存中不存在对应的key，数据库又没有完成更新的时候，如果有线程进来读取数据，并写入到缓存，那么在更新成功之后，这个key就是一个脏数据。")]),s._v(" "),_("p",[s._v("毫无疑问，先删缓存，再更数据库，缓存中key不存在的时间的时间更长，有更大的概率会产生脏数据。")]),s._v(" "),_("p",[s._v("目前最流行的缓存读写策略cache-aside-pattern就是采用先更数据库，再删缓存的方式。")])]),s._v(" "),_("h3",{attrs:{id:"缓存不一致处理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#缓存不一致处理"}},[s._v("#")]),s._v(" 缓存不一致处理")]),s._v(" "),_("blockquote",[_("p",[s._v("如果不是并发特别高，对缓存依赖性很强，其实一定程序的不一致是可以接受的。但是如果对一致性要求比较高，那就得想办法保证缓存和数据库中数据一致。")])]),s._v(" "),_("p",[s._v("缓存和数据库数据不一致常见的两种原因：")]),s._v(" "),_("ul",[_("li",[s._v("缓存key删除失败")]),s._v(" "),_("li",[s._v("并发导致写入了脏数据")])]),s._v(" "),_("p",[s._v("解决方案：")]),s._v(" "),_("ul",[_("li",[_("strong",[s._v("消息队列保证key被删除")])]),s._v(" "),_("li",[_("strong",[s._v("数据库订阅+消息队列保证key被删除")])]),s._v(" "),_("li",[_("strong",[s._v("延时双删防止脏数据")])]),s._v(" "),_("li",[_("strong",[s._v("设置缓存过期时间兜底")])])]),s._v(" "),_("h4",{attrs:{id:"消息队列保证key被删除"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#消息队列保证key被删除"}},[s._v("#")]),s._v(" 消息队列保证key被删除")]),s._v(" "),_("blockquote",[_("p",[s._v("可以引入消息队列，把要删除的key或者删除失败的key丢尽消息队列，利用消息队列的重试机制，重试删除对应的key。")])]),s._v(" "),_("p",[_("img",{attrs:{src:e(504),alt:"image-20220705160107968"}})]),s._v(" "),_("p",[s._v("这种方案看起来不错，缺点是对业务代码有一定的侵入性。")]),s._v(" "),_("h4",{attrs:{id:"数据库订阅-消息队列保证key被删除"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#数据库订阅-消息队列保证key被删除"}},[s._v("#")]),s._v(" 数据库订阅+消息队列保证key被删除")]),s._v(" "),_("blockquote",[_("p",[s._v("可以用一个服务（比如阿里的 canal）去监听数据库的binlog，获取需要操作的数据。然后用一个公共的服务获取订阅程序传来的信息，进行缓存删除操作。")])]),s._v(" "),_("p",[_("img",{attrs:{src:e(505),alt:"image-20220705160157550"}})]),s._v(" "),_("p",[s._v("这种方式降低了对业务的侵入，但其实整个系统的复杂度是提升的，适合基建完善的大厂。")]),s._v(" "),_("h4",{attrs:{id:"延时双删防止脏数据"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#延时双删防止脏数据"}},[s._v("#")]),s._v(" 延时双删防止脏数据")]),s._v(" "),_("blockquote",[_("p",[s._v("还有一种情况，是在缓存不存在的时候，写入了脏数据，这种情况在先删缓存，再更数据库的缓存更新策略下发生的比较多，解决方案是延时双删。简单说，就是在第一次删除缓存之后，过了一段时间之后，再次删除缓存。")])]),s._v(" "),_("p",[_("img",{attrs:{src:e(506),alt:"image-20220705160239616"}})]),s._v(" "),_("p",[s._v("这种方式的延时时间设置需要仔细考量和测试。")]),s._v(" "),_("h4",{attrs:{id:"设置缓存过期时间兜底"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#设置缓存过期时间兜底"}},[s._v("#")]),s._v(" 设置缓存过期时间兜底")]),s._v(" "),_("blockquote",[_("p",[s._v("这是一个朴素但是有用的办法，给缓存设置一个合理的过期时间，即使发生了缓存数据不一致的问题，它也不会永远不一致下去，缓存过期的时候，自然又会恢复一致。")])]),s._v(" "),_("h2",{attrs:{id:"_35、缓存预热怎么做呢"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_35、缓存预热怎么做呢"}},[s._v("#")]),s._v(" 35、缓存预热怎么做呢？")]),s._v(" "),_("blockquote",[_("p",[s._v("所谓缓存预热，就是提前把数据库里的数据刷到缓存里，通常有这些方法：")]),s._v(" "),_("p",[s._v("1、直接写个缓存刷新页面或者接口，上线时手动操作")]),s._v(" "),_("p",[s._v("2、数据量不大，可以在项目启动的时候自动进行加载")]),s._v(" "),_("p",[s._v("3、定时任务刷新缓存.")])]),s._v(" "),_("h2",{attrs:{id:"_36、热点key重建-问题-解决"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_36、热点key重建-问题-解决"}},[s._v("#")]),s._v(" 36、热点key重建？问题？解决？")]),s._v(" "),_("p",[s._v("开发的时候一般使用“缓存+过期时间”的策略，既可以加速数据读写，又保证数据的定期更新，这种模式基本能够满足绝大部分需求。")]),s._v(" "),_("p",[s._v("但是有两个问题如果同时出现，可能就会出现比较大的问题：")]),s._v(" "),_("ul",[_("li",[s._v("当前key是一个热点key（例如一个热门的娱乐新闻），并发量非常大。")]),s._v(" "),_("li",[s._v("重建缓存不能在短时间完成，可能是一个复杂计算，例如复杂的 SQL、多次IO、多个依赖等。在缓存失效的瞬间，有大量线程来重建缓存，造成后端负载加大，甚至可能会让应用崩溃。")])]),s._v(" "),_("blockquote",[_("p",[_("strong",[s._v("怎么处理呢？")])])]),s._v(" "),_("p",[s._v("要解决这个问题也不是很复杂，解决问题的要点在于：")]),s._v(" "),_("ul",[_("li",[s._v("减少重建缓存的次数。")]),s._v(" "),_("li",[s._v("数据尽可能一致。")]),s._v(" "),_("li",[s._v("较少的潜在危险。")])]),s._v(" "),_("p",[s._v("所以一般采用如下方式：")]),s._v(" "),_("ol",[_("li",[s._v("互斥锁（mutex key） 这种方法只允许一个线程重建缓存，其他线程等待重建缓存的线程执行完，重新从缓存获取数据即可。")]),s._v(" "),_("li",[s._v("永远不过期 “永远不过期”包含两层意思：")])]),s._v(" "),_("ul",[_("li",[s._v("从缓存层面来看，确实没有设置过期时间，所以不会出现热点key过期后产生的问题，也就是“物理”不过期。")]),s._v(" "),_("li",[s._v("从功能层面来看，为每个value设置一个逻辑过期时间，当发现超过逻辑过期时间后，会使用单独的线程去构建缓存。")])]),s._v(" "),_("h2",{attrs:{id:"_37、redis报内存不足怎么处理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_37、redis报内存不足怎么处理"}},[s._v("#")]),s._v(" 37、Redis报内存不足怎么处理？")]),s._v(" "),_("blockquote",[_("p",[s._v("Redis 内存不足有这么几种处理方式：")]),s._v(" "),_("ul",[_("li",[s._v("修改配置文件 redis.conf 的 maxmemory 参数，增加 Redis 可用内存")]),s._v(" "),_("li",[s._v("也可以通过命令set maxmemory动态设置内存上限")]),s._v(" "),_("li",[s._v("修改内存淘汰策略，及时释放内存空间")]),s._v(" "),_("li",[s._v("使用 Redis 集群模式，进行横向扩容。")])])]),s._v(" "),_("h2",{attrs:{id:"_38、大key问题了解吗"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_38、大key问题了解吗"}},[s._v("#")]),s._v(" 38、大key问题了解吗？")]),s._v(" "),_("p",[s._v("Redis使用过程中，有时候会出现大key的情况， 比如：")]),s._v(" "),_("ul",[_("li",[s._v("单个简单的key存储的value很大，size超过10KB")]),s._v(" "),_("li",[s._v("hash， set，zset，list 中存储过多的元素（以万为单位）")])]),s._v(" "),_("p",[_("strong",[s._v("大key会造成什么问题呢？")])]),s._v(" "),_("ul",[_("li",[s._v("客户端耗时增加，甚至超时")]),s._v(" "),_("li",[s._v("对大key进行IO操作时，会严重占用带宽和CPU")]),s._v(" "),_("li",[s._v("造成Redis集群中数据倾斜")]),s._v(" "),_("li",[s._v("主动删除、被动删等，可能会导致阻塞")])]),s._v(" "),_("p",[_("strong",[s._v("如何找到大key?")])]),s._v(" "),_("ul",[_("li",[s._v("bigkeys命令：使用bigkeys命令以遍历的方式分析Redis实例中的所有Key，并返回整体统计信息与每个数据类型中Top1的大Key")]),s._v(" "),_("li",[s._v("redis-rdb-tools：redis-rdb-tools是由Python写的用来分析Redis的rdb快照文件用的工具，它可以把rdb快照文件生成json文件或者生成报表用来分析Redis的使用详情。")])]),s._v(" "),_("p",[_("strong",[s._v("如何处理大key?")])]),s._v(" "),_("ul",[_("li",[_("strong",[s._v("删除大key")])]),s._v(" "),_("li",[_("ul",[_("li",[s._v("当Redis版本大于4.0时，可使用UNLINK命令安全地删除大Key，该命令能够以非阻塞的方式，逐步地清理传入的Key。")])])]),s._v(" "),_("li",[s._v("当Redis版本小于4.0时，避免使用阻塞式命令KEYS，而是建议通过SCAN命令执行增量迭代扫描key，然后判断进行删除。")]),s._v(" "),_("li",[_("strong",[s._v("压缩和拆分key")])]),s._v(" "),_("li",[_("ul",[_("li",[s._v("当vaule是string时，比较难拆分，则使用序列化、压缩算法将key的大小控制在合理范围内，但是序列化和反序列化都会带来更多时间上的消耗。")])])]),s._v(" "),_("li",[s._v("当value是string，压缩之后仍然是大key，则需要进行拆分，一个大key分为不同的部分，记录每个部分的key，使用multiget等操作实现事务读取。")]),s._v(" "),_("li",[s._v("当value是list/set等集合类型时，根据预估的数据规模来进行分片，不同的元素计算后分到不同的片。")])]),s._v(" "),_("h2",{attrs:{id:"_39、redis常见性能问题和解决方案"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_39、redis常见性能问题和解决方案"}},[s._v("#")]),s._v(" 39、Redis常见性能问题和解决方案？")]),s._v(" "),_("blockquote",[_("ol",[_("li",[s._v("Master 最好不要做任何持久化工作，包括内存快照和 AOF 日志文件，特别是不要启用内存快照做持久化。")]),s._v(" "),_("li",[s._v("如果数据比较关键，某个 Slave 开启 AOF 备份数据，策略为每秒同步一次。")]),s._v(" "),_("li",[s._v("为了主从复制的速度和连接的稳定性，Slave 和 Master 最好在同一个局域网内。")]),s._v(" "),_("li",[s._v("尽量避免在压力较大的主库上增加从库。")]),s._v(" "),_("li",[s._v("Master 调用 BGREWRITEAOF 重写 AOF 文件，AOF 在重写的时候会占大量的 CPU 和内存资源，导致服务 load 过高，出现短暂服务暂停现象。")]),s._v(" "),_("li",[s._v("为了 Master 的稳定性，主从复制不要用图状结构，用单向链表结构更稳定，即主从关为：Master<–Slave1<–Slave2<–Slave3…，这样的结构也方便解决单点故障问题，实现 Slave 对 Master 的替换，也即，如果 Master 挂了，可以立马启用 Slave1 做 Master，其他不变。")])])]),s._v(" "),_("h2",{attrs:{id:"_40、使用redis-如何实现异步队列"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_40、使用redis-如何实现异步队列"}},[s._v("#")]),s._v(" 40、使用Redis 如何实现异步队列？")]),s._v(" "),_("p",[_("strong",[s._v("使用list作为队列，lpush生产消息，rpop消费消息")])]),s._v(" "),_("p",[s._v("这种方式，消费者死循环rpop从队列中消费消息。但是这样，即使队列里没有消息，也会进行rpop，会导致Redis CPU的消耗。")]),s._v(" "),_("p",[_("img",{attrs:{src:e(507),alt:"image-20220705162933523"}})]),s._v(" "),_("p",[s._v("可以通过让消费者休眠的方式的方式来处理，但是这样又会又消息的延迟问题。")]),s._v(" "),_("p",[s._v("-"),_("strong",[s._v("使用list作为队列，lpush生产消息，brpop消费消息")])]),s._v(" "),_("p",[s._v("brpop是rpop的阻塞版本，list为空的时候，它会一直阻塞，直到list中有值或者超时。")]),s._v(" "),_("p",[_("img",{attrs:{src:e(508),alt:"图片"}})]),s._v(" "),_("p",[s._v("这种方式只能实现一对一的消息队列。")]),s._v(" "),_("ul",[_("li",[_("strong",[s._v("使用Redis的pub/sub来进行消息的发布/订阅")])])]),s._v(" "),_("p",[s._v("发布/订阅模式可以1：N的消息发布/订阅。发布者将消息发布到指定的频道频道（channel），订阅相应频道的客户端都能收到消息。")]),s._v(" "),_("p",[_("img",{attrs:{src:e(509),alt:"图片"}})]),s._v(" "),_("p",[s._v("但是这种方式不是可靠的，它不保证订阅者一定能收到消息，也不进行消息的存储。")]),s._v(" "),_("p",[s._v("所以，一般的异步队列的实现还是交给专业的消息队列。")]),s._v(" "),_("h2",{attrs:{id:"_41、redis-如何实现延时队列"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_41、redis-如何实现延时队列"}},[s._v("#")]),s._v(" 41、Redis 如何实现延时队列?")]),s._v(" "),_("p",[_("strong",[s._v("使用zset，利用排序实现")])]),s._v(" "),_("blockquote",[_("p",[s._v("可以使用 zset这个结构，用设置好的时间戳作为score进行排序，使用 zadd score1 value1 ....命令就可以一直往内存中生产消息。再利用 zrangebysocre 查询符合条件的所有待处理的任务，通过循环执行队列任务即可。")])]),s._v(" "),_("p",[_("img",{attrs:{src:e(510),alt:"image-20220705163108700"}})]),s._v(" "),_("h2",{attrs:{id:"_42、redis和lua脚本的使用了解吗"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_42、redis和lua脚本的使用了解吗"}},[s._v("#")]),s._v(" 42、Redis和Lua脚本的使用了解吗？")]),s._v(" "),_("p",[s._v("Redis的事务功能比较简单，平时的开发中，可以利用Lua脚本来增强Redis的命令。")]),s._v(" "),_("p",[s._v("Lua脚本能给开发人员带来这些好处：")]),s._v(" "),_("ul",[_("li",[s._v("Lua脚本在Redis中是原子执行的，执行过程中间不会插入其他命令。")]),s._v(" "),_("li",[s._v("Lua脚本可以帮助开发和运维人员创造出自己定制的命令，并可以将这 些命令常驻在Redis内存中，实现复用的效果。")]),s._v(" "),_("li",[s._v("Lua脚本可以将多条命令一次性打包，有效地减少网络开销。")])]),s._v(" "),_("p",[s._v("比如这一段很（烂）经（大）典（街）的秒杀系统利用lua扣减Redis库存的脚本：")]),s._v(" "),_("div",{staticClass:"language-lua line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-lua"}},[_("code",[s._v("   "),_("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 库存未预热")]),s._v("\n   "),_("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("redis"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),_("span",{pre:!0,attrs:{class:"token function"}},[s._v("call")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),_("span",{pre:!0,attrs:{class:"token string"}},[s._v("'exists'")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" KEYS"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),_("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),_("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("then")]),s._v("\n        "),_("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),_("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),_("span",{pre:!0,attrs:{class:"token number"}},[s._v("9")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),_("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),_("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 秒杀商品库存存在")]),s._v("\n    "),_("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("redis"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),_("span",{pre:!0,attrs:{class:"token function"}},[s._v("call")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),_("span",{pre:!0,attrs:{class:"token string"}},[s._v("'exists'")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" KEYS"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),_("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),_("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("then")]),s._v("\n        "),_("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("local")]),s._v(" stock "),_("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),_("span",{pre:!0,attrs:{class:"token function"}},[s._v("tonumber")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("redis"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),_("span",{pre:!0,attrs:{class:"token function"}},[s._v("call")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),_("span",{pre:!0,attrs:{class:"token string"}},[s._v("'get'")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" KEYS"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),_("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),_("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("local")]),s._v(" num "),_("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),_("span",{pre:!0,attrs:{class:"token function"}},[s._v("tonumber")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("ARGV"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),_("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),_("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 剩余库存少于请求数量")]),s._v("\n        "),_("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("stock "),_("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" num"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("then")]),s._v("\n            "),_("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),_("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),_("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("\n        "),_("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),_("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 扣减库存")]),s._v("\n        "),_("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("stock "),_("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">=")]),s._v(" num"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("then")]),s._v("\n            redis"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),_("span",{pre:!0,attrs:{class:"token function"}},[s._v("call")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),_("span",{pre:!0,attrs:{class:"token string"}},[s._v("'incrby'")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" KEYS"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),_("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),_("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" num"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),_("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 扣减成功")]),s._v("\n            "),_("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n        "),_("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),_("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),_("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),_("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),_("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),_("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 秒杀商品库存不存在")]),s._v("\n    "),_("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),_("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),_("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[s._v("1")]),_("br"),_("span",{staticClass:"line-number"},[s._v("2")]),_("br"),_("span",{staticClass:"line-number"},[s._v("3")]),_("br"),_("span",{staticClass:"line-number"},[s._v("4")]),_("br"),_("span",{staticClass:"line-number"},[s._v("5")]),_("br"),_("span",{staticClass:"line-number"},[s._v("6")]),_("br"),_("span",{staticClass:"line-number"},[s._v("7")]),_("br"),_("span",{staticClass:"line-number"},[s._v("8")]),_("br"),_("span",{staticClass:"line-number"},[s._v("9")]),_("br"),_("span",{staticClass:"line-number"},[s._v("10")]),_("br"),_("span",{staticClass:"line-number"},[s._v("11")]),_("br"),_("span",{staticClass:"line-number"},[s._v("12")]),_("br"),_("span",{staticClass:"line-number"},[s._v("13")]),_("br"),_("span",{staticClass:"line-number"},[s._v("14")]),_("br"),_("span",{staticClass:"line-number"},[s._v("15")]),_("br"),_("span",{staticClass:"line-number"},[s._v("16")]),_("br"),_("span",{staticClass:"line-number"},[s._v("17")]),_("br"),_("span",{staticClass:"line-number"},[s._v("18")]),_("br"),_("span",{staticClass:"line-number"},[s._v("19")]),_("br"),_("span",{staticClass:"line-number"},[s._v("20")]),_("br"),_("span",{staticClass:"line-number"},[s._v("21")]),_("br"),_("span",{staticClass:"line-number"},[s._v("22")]),_("br")])]),_("h2",{attrs:{id:"_43、redis回收进程如何工作的"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_43、redis回收进程如何工作的"}},[s._v("#")]),s._v(" 43、Redis回收进程如何工作的？")]),s._v(" "),_("blockquote",[_("ol",[_("li",[_("p",[s._v("一个客户端运行了新的命令，添加了新的数据。")])]),s._v(" "),_("li",[_("p",[s._v("Redis检查内存使用情况，如果大于maxmemory的限制， 则根据设定好的策略进行回收。")])]),s._v(" "),_("li",[_("p",[s._v("一个新的命令被执行，等等。")])]),s._v(" "),_("li",[_("p",[s._v("所以我们不断地穿越内存限制的边界，通过不断达到边界然后不断地回收回到边界以下。")])])]),s._v(" "),_("p",[s._v("如果一个命令的结果导致大量内存被使用（例如很大的集合的交集保存到一个新的键），不用多久内存限制就会被 这个内存使用量超越。")])]),s._v(" "),_("h2",{attrs:{id:"_44、假如redis里面有1亿个key-其中有10w个key是以某个固定的已知的前缀开头的-如果将它们全部找出来"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_44、假如redis里面有1亿个key-其中有10w个key是以某个固定的已知的前缀开头的-如果将它们全部找出来"}},[s._v("#")]),s._v(" 44、假如Redis里面有1亿个key，其中有10w个key是以某个固定的已知的前缀开头的，如果将它们全部找出来？")]),s._v(" "),_("blockquote",[_("p",[s._v("使用keys指令可以扫出指定模式的key列表。")]),s._v(" "),_("p",[s._v("如果这个redis正在给线上的业务提供服务，那使用keys指令会有什么问题？")]),s._v(" "),_("p",[s._v("这个时候你要回答redis关键的一个特性：redis的单线程的。keys指令会导致线程阻塞一段时间，线上服务会停顿，直到指令执行完毕，服务才能恢复。这个时候可以使用scan指令，scan指令可以无阻塞的提取出指定模式的key列表，但是会有一定的重复概率，在客户端做一次去重就可以了，但是整体所花费的时间会比直接用keys指令长。")])])])}),[],!1,null,null,null);t.default=v.exports},338:function(s,t,e){s.exports=e.p+"assets/img/640.72d3a00d.png"},478:function(s,t,e){s.exports=e.p+"assets/img/image-20220629091323779.b05299f2.png"},479:function(s,t,e){s.exports=e.p+"assets/img/image-20220629091509511.b3e51a14.png"},480:function(s,t,e){s.exports=e.p+"assets/img/image-20220629091558035.ede32969.png"},481:function(s,t,e){s.exports=e.p+"assets/img/image-20220629091620736.27af5eb8.png"},482:function(s,t,e){s.exports=e.p+"assets/img/image-20220629091715041.820c96e1.png"},483:function(s,t,e){s.exports=e.p+"assets/img/image-20220705115015303.1babf241.png"},484:function(s,t,e){s.exports=e.p+"assets/img/image-20220705115135124.7610d8f1.png"},485:function(s,t,e){s.exports=e.p+"assets/img/image-20220705115339601.13499555.png"},486:function(s,t,e){s.exports=e.p+"assets/img/image-20220705145354411.d814673e.png"},487:function(s,t,e){s.exports=e.p+"assets/img/image-20220705150156994.92d3cb56.png"},488:function(s,t,e){s.exports=e.p+"assets/img/image-20220705150300624.3c7f18dc.png"},489:function(s,t,e){s.exports=e.p+"assets/img/image-20220705150359710.68e9da5e.png"},490:function(s,t,e){s.exports=e.p+"assets/img/image-20220705151357216.65ec6f4e.png"},491:function(s,t,e){s.exports=e.p+"assets/img/image-20220425225921158.59f3cc79.png"},492:function(s,t,e){s.exports=e.p+"assets/img/image-20220425230502555.78a87ba2.png"},493:function(s,t,e){s.exports=e.p+"assets/img/image-20220425230647469.65931b6b.png"},494:function(s,t,e){s.exports=e.p+"assets/img/image-20220425230712127.00ba1eb3.png"},495:function(s,t,e){s.exports=e.p+"assets/img/image-20220425230845392.bcde2640.png"},496:function(s,t,e){s.exports=e.p+"assets/img/image-20220425230934948.de76e541.png"},497:function(s,t,e){s.exports=e.p+"assets/img/image-20220425231012335.5b1384e1.png"},498:function(s,t,e){s.exports=e.p+"assets/img/image-20220425231209394.89c70d6a.png"},499:function(s,t,e){s.exports=e.p+"assets/img/image-20220425231325048.3d64933f.png"},500:function(s,t,e){s.exports=e.p+"assets/img/image-20220425231331746.d5f25a6f.png"},501:function(s,t,e){s.exports=e.p+"assets/img/image-20220530101002279.2bca4ab5.png"},502:function(s,t,e){s.exports=e.p+"assets/img/image-20220530102216651.2629cbb0.png"},503:function(s,t,e){s.exports=e.p+"assets/img/image-20220525172112838.23046169.png"},504:function(s,t,e){s.exports=e.p+"assets/img/image-20220705160107968.d07c4197.png"},505:function(s,t,e){s.exports=e.p+"assets/img/image-20220705160157550.2afc01a8.png"},506:function(s,t,e){s.exports=e.p+"assets/img/image-20220705160239616.5de7dc5b.png"},507:function(s,t,e){s.exports=e.p+"assets/img/image-20220705162933523.fb3f3e77.png"},508:function(s,t,e){s.exports=e.p+"assets/img/640-16570097849305.7223878c.png"},509:function(s,t,e){s.exports=e.p+"assets/img/640-16570097849306.2f8990d4.png"},510:function(s,t,e){s.exports=e.p+"assets/img/image-20220705163108700.621f8dc7.png"}}]);