import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{r,o as c,c as n,a as e,b as a,d as l,e as i}from"./app-f55ccf80.js";const o={},h=i(`<h2 id="_1、为什么要使用-elasticsearch" tabindex="-1"><a class="header-anchor" href="#_1、为什么要使用-elasticsearch" aria-hidden="true">#</a> 1、为什么要使用 Elasticsearch?</h2><blockquote><p>系统中的数据， 随着业务的发展， 时间的推移， 将会非常多，而业务中往往采用模糊查询进行数据的 搜索，而模糊查询会导致查询引擎放弃索引， 导致系统查询数据时都是全表扫描，在百万级别的数据库中， 查询效率是非常低下的，而我们使用 ES 做一个全文索引， 将经常查询的系统功能的某些字段，比如说电 商系统的商品表中商品名，描述、价格还有 id 这些字段我们放入 ES 索引库里，可以提高查询速度。</p></blockquote><h2 id="_2、elasticsearch-的-master-选举流程" tabindex="-1"><a class="header-anchor" href="#_2、elasticsearch-的-master-选举流程" aria-hidden="true">#</a> 2、Elasticsearch 的 master 选举流程？</h2><blockquote><ul><li>Elasticsearch 的选主是 ZenDiscovery 模块负责的， 主要包含 Ping(节点之间通过这个 RPC 来发现彼此)和 Unicast (单播模块包含一个主机列表以控制哪些节点需要 ping 通)这两部分</li><li>对所有可以成为 master 的节点(node.master: true)根据 nodeId 字典排序，每次选举每个节点都把自己所知道节点排一次序，然后选出第一个(第 0 位)节点， 暂且认为它是 master 节点</li><li>如果对某个节点的投票数达到一定的值(可以成为 master 节点数 n/2+1) 并且该节点自己也选举自己，那这个节点就是 master 。否则重新选举一直到满足上述条件</li><li>master 节点的职责主要包括集群、节点和索引的管理， 不负责文档级别的管理； data 节点可以关闭 http功能</li></ul></blockquote><h2 id="_3、elasticsearch-集群脑裂问题" tabindex="-1"><a class="header-anchor" href="#_3、elasticsearch-集群脑裂问题" aria-hidden="true">#</a> 3、Elasticsearch 集群脑裂问题？</h2><blockquote><p>所谓脑裂问题（类似于精神分裂），就是同一个集群中的不同节点，对于集群的状态有了不一样的理解。</p><p>由于某些节点的失效，部分节点的网络连接会断开，并形成一个与原集群一样名字的集群，这种情况成为集群脑裂（split-brain）现象。这个问题非常危险，因为两个新形成的集群会同时索引和修改集群的数据。</p></blockquote><p><strong>“脑裂”问题可能的成因：</strong></p><ul><li>网络问题：集群间的网络延迟导致一些节点访问不到 master，认为 master 挂掉了从而选举出新的master，并对 master 上的分片和副本标红，分配新的主分片</li><li>节点负载：主节点的角色既为 master 又为 data，访问量较大时可能会导致 ES 停止响应造成大面积延迟，此时其他节点得不到主节点的响应认为主节点挂掉了，会重新选取主节点。</li><li>内存回收：data 节点上的 ES 进程占用的内存较大，引发 JVM 的大规模内存回收，造成 ES 进程失去响应</li></ul><p><strong>脑裂问题解决方案：</strong></p><ul><li>减少误判： discovery.zen.ping_timeout 节点状态的响应时间， 默认为 3s，可以适当调大，如果 master在该响应时间的范围内没有做出响应应答，判断该节点已经挂掉了。调大参数(如 6s ， discovery.zen.ping_timeout:6 ) ，可适当减少误判。</li><li>选举触发: <code>discovery.zen.minimum_master_nodes:1</code>，该参数是用于控制选举行为发生的最小集群主节点数量。当备选主节点的个数大于等于该参数的值， 且备选主节点中有该参数个节点认为主节点挂了， 进行选举。官方建议为(n/2) +1，n 为主节点个数 (即有资格成为主节点的节点个数)</li><li>角色分离：即 master 节点与data 节点分离，限制角色 <ul><li>主节点配置为： node.master: true node.data: false</li><li>从节点配置为： node.master: false node.data: true</li></ul></li></ul><h2 id="_4、文档索引步骤顺序是什么" tabindex="-1"><a class="header-anchor" href="#_4、文档索引步骤顺序是什么" aria-hidden="true">#</a> 4、文档索引步骤顺序是什么？</h2><blockquote><p>新建单个文档所需要的步骤顺序：</p><p><img src="https://javaxiaobear-1301481032.cos.ap-guangzhou.myqcloud.com/picture-bed/es-th-2-4.png" alt="img" loading="lazy"></p><p>客户端向 Node 1 发送新建、索引或者删除请求。</p><p>节点使用文档的 _id 确定文档属于分片 0 。请求会被转发到 Node 3，因为分片 0 的主分片目前被分配在 Node 3 上。</p><p>Node 3 在主分片上面执行请求。如果成功了，它将请求并行转发到 Node 1 和 Node 2 的副本分片上。一旦所有的副本分片都报告成功, Node 3 将向协调节点报告成功，协调节点向客户端报告成功。</p></blockquote><h2 id="_5、elasticsearch-索引文档的流程" tabindex="-1"><a class="header-anchor" href="#_5、elasticsearch-索引文档的流程" aria-hidden="true">#</a> 5、Elasticsearch 索引文档的流程？</h2><p><img src="https://javaxiaobear-1301481032.cos.ap-guangzhou.myqcloud.com/picture-bed/es-th-2-5.jpeg" alt="img" loading="lazy"></p><ul><li>协调节点默认使用文档ID参与计算（也支持通过routing），以便为路由提供合适的分片。</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>shard <span class="token operator">=</span> hash<span class="token punctuation">(</span>document_id<span class="token punctuation">)</span> % <span class="token punctuation">(</span>num_of_primary_shards<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>当分片所在的节点接收到来自协调节点的请求后，会将请求写入到Memory Buffer，然后定时（默认是每隔1秒）写入到Filesystem Cache，这个从Momery Buffer到Filesystem Cache的过程就叫做refresh；</li><li>当然在某些情况下，存在Momery Buffer和Filesystem Cache的数据可能会丢失，ES是通过translog的机制来保证数据的可靠性的。其实现机制是接收到请求后，同时也会写入到translog中，当Filesystem cache中的数据写入到磁盘中时，才会清除掉，这个过程叫做flush。</li><li>在flush过程中，内存中的缓冲将被清除，内容被写入一个新段，段的fsync将创建一个新的提交点，并将内容刷新到磁盘，旧的translog将被删除并开始一个新的translog。 flush触发的时机是定时触发（默认30分钟）或者translog变得太大（默认为512M）时。</li></ul><h2 id="_6、-elasticsearch-更新和删除文档的流程" tabindex="-1"><a class="header-anchor" href="#_6、-elasticsearch-更新和删除文档的流程" aria-hidden="true">#</a> 6、 Elasticsearch 更新和删除文档的流程？</h2><blockquote><ul><li>删除和更新也都是写操作，但是 Elasticsearch 中的文档是不可变的，因此不能被删除或者改动以展示其变更；</li><li>磁盘上的每个段都有一个相应的.del 文件。当删除请求发送后，文档并没有真的被删除，而是在.del文件中被标记为删除。该文档依然能匹配查询，但是会在结果中被过滤掉。当段合并时，在.del 文件中被标记为删除的文档将不会被写入新段。</li><li>在新的文档被创建时， Elasticsearch 会为该文档指定一个版本号， 当执行更新时， 旧版本的文档在.del文件中被标记为删除， 新版本的文档被索引到一个新段。旧版本的文档依然能匹配查询， 但是会在结 果中被过滤掉。</li></ul></blockquote><h2 id="_7、elasticsearch-搜索的流程" tabindex="-1"><a class="header-anchor" href="#_7、elasticsearch-搜索的流程" aria-hidden="true">#</a> 7、Elasticsearch 搜索的流程？</h2><blockquote><ul><li>搜索被执行成一个两阶段过程，我们称之为 Query Then Fetch；</li><li>在初始查询阶段时，查询会广播到索引中每一个分片拷贝(主分片或者副本分片) 。 每个分片在本地执行搜索并构建一个匹配文档的大小为 from + size 的优先队列。PS：在搜索的时候是会查询 Filesystem Cache 的，但是有部分数据还在 Memory Buffer，所以搜索是近实时的。</li><li>每个分片返回各自优先队列中 所有文档的 ID 和排序值 给协调节点， 它合并这些值到自己的优先队列中来产生一个全局排序后的结果列表。</li><li>接下来就是取回阶段， 协调节点辨别出哪些文档需要被取回并向相关的分片提交多个 GET 请求。每个分片加载并丰富文档，如果有需要的话，接着返回文档给协调节点。一旦所有的文档都被取回了， 协调节点返回结果给客户端。</li><li>Query Then Fetch 的搜索类型在文档相关性打分的时候参考的是本分片的数据，这样在文档数量较少的时候可能不够准确， DFS Query Then Fetch 增加了一个预查询的处理，询问 Term 和 Document frequency，这个评分更准确， 但是性能会变差。</li></ul></blockquote><h2 id="_8、gc-方面-在使用-elasticsearch-时要注意什么" tabindex="-1"><a class="header-anchor" href="#_8、gc-方面-在使用-elasticsearch-时要注意什么" aria-hidden="true">#</a> 8、GC 方面，在使用 Elasticsearch 时要注意什么？</h2><blockquote><ul><li>倒排词典的索引需要常驻内存，无法 GC，需要监控 data node 上 segment memory 增长趋势。</li><li>各类缓存， field cache, filter cache, indexing cache, bulk queue 等等， 要设置合理的大小， 并且要应该根据最坏的情况来看 heap 是否够用，也就是各类缓存全部占满的时候，还有 heap 空间可以分配给其他 任务吗？避免采用 clear cache 等“自欺欺人”的方式来释放内存。</li><li>避免返回大量结果集的搜索与聚合。确实需要大量拉取数据的场景， 可以采用 scan &amp; scroll api 来实现。</li><li>cluster stats 驻留内存并无法水平扩展，超大规模集群可以考虑分拆成多个集群通过 tribe node 连接。</li><li>想知道 heap 够不够，必须结合实际应用场景，并对集群的 heap 使用情况做持续的监控。</li></ul></blockquote><h2 id="_9、elasticsearch-在部署时-对-linux-的设置有哪些优化方法" tabindex="-1"><a class="header-anchor" href="#_9、elasticsearch-在部署时-对-linux-的设置有哪些优化方法" aria-hidden="true">#</a> 9、Elasticsearch 在部署时，对 Linux 的设置有哪些优化方法？</h2><blockquote><ul><li>64 GB 内存的机器是非常理想的， 但是 32 GB 和 16 GB 机器也是很常见的。少于 8 GB 会适得其反。</li><li>如果你要在更快的 CPUs 和更多的核心之间选择，选择更多的核心更好。多个内核提供的额外并发远胜过稍微快一点点的时钟频率。</li><li>如果你负担得起 SSD，它将远远超出任何旋转介质。 基于 SSD 的节点， 查询和索引性能都有提升。如果你负担得起， SSD 是一个好的选择。</li><li>即使数据中心们近在咫尺，也要避免集群跨越多个数据中心。绝对要避免集群跨越大的地理距离。</li><li>请确保运行你应用程序的 JVM 和服务器的 JVM 是完全一样的。 在 Elasticsearch 的几个地方，使用 Java 的本地序列化。</li><li>通过设置 gateway.recover_after_nodes、gateway.expected_nodes、gateway.recover_after_time 可以在集群重启的时候避免过多的分片交换，这可能会让数据恢复从数个小时缩短为几秒钟。</li><li>Elasticsearch 默认被配置为使用单播发现，以防止节点无意中加入集群。只有在同一台机器上运行的节点才会自动组成集群。最好使用单播代替组播。</li><li>不要随意修改垃圾回收器(CMS)和各个线程池的大小。</li><li>你的内存的(少于) 一半给 Lucene (但不要超过 32 GB！) ，通过 ES_HEAP_SIZE 环境变量设置。</li><li>内存交换到磁盘对服务器性能来说是致命的。如果内存交换到磁盘上，一个 100 微秒的操作可能变成 10 毫秒。 再想想那么多 10 微秒的操作时延累加起来。 不难看出 swapping 对于性能是多么可怕。</li><li>Lucene 使用了大量的文件。同时， Elasticsearch 在节点和 HTTP 客户端之间进行通信也使用了大量的套接字。 所有这一切都需要足够的文件描述符。你应该增加你的文件描述符， 设置一个很大的值，如 64,000。</li></ul></blockquote><h2 id="_10、索引阶段性能提升方法有哪些" tabindex="-1"><a class="header-anchor" href="#_10、索引阶段性能提升方法有哪些" aria-hidden="true">#</a> 10、索引阶段性能提升方法有哪些？</h2><blockquote><ul><li>使用批量请求并调整其大小：每次批量数据 5 – 15 MB 大是个不错的起始点。</li><li>存储：使用 SSD</li><li>段和合并： Elasticsearch 默认值是 20 MB/s，对机械磁盘应该是个不错的设置。如果你用的是 SSD，可以考虑提高到 100 –200 MB/s。如果你在做批量导入， 完全不在意搜索， 你可以彻底关掉合并限流。 另外还可以增加 index.translog.flush_threshold_size 设置，从默认的 512 MB 到更大一些的值，比如 1 GB ，这可以在一次清空触发的时候在事务日志里积累出更大的段。</li><li>如果你的搜索结果不需要近实时的准确度，考虑把每个索引的 index.refresh_interval 改到 30s。</li><li>如果你在做大批量导入，考虑通过设置 index.number_of_replicas: 0 关闭副本。</li></ul></blockquote><h2 id="_11、elasticsearch-了解多少-说说你们公司-es-的集群架构-索引数据大小-分片有多少-以及一些调优手段-。" tabindex="-1"><a class="header-anchor" href="#_11、elasticsearch-了解多少-说说你们公司-es-的集群架构-索引数据大小-分片有多少-以及一些调优手段-。" aria-hidden="true">#</a> 11、elasticsearch 了解多少，说说你们公司 es 的集群架构，索引数据大小，分片有多少，以及一些调优手段 。</h2><blockquote><p>面试官：想了解应聘者之前公司接触的 ES 使用场景、规模，有没有做过比较大规模的索引设计、规划、调优。</p><p>解答：如实结合自己的实践场景回答即可。</p><p>比如：ES 集群架构 13 个节点，索引根据通道不同共 20+索引，根据日期，每日递增 20+，索引：10分片，每日递增 1 亿+数据，每个通道每天索引大小控制：150GB 之内。</p><p>仅索引层面调优手段：</p></blockquote><p><strong>设计阶段调优</strong></p><ol><li>根据业务增量需求，采取基于日期模板创建索引，通过 roll over API 滚动索引；</li><li>使用别名进行索引管理；</li><li>每天凌晨定时对索引做 force_merge 操作，以释放空间；</li><li>采取冷热分离机制，热数据存储到 SSD，提高检索效率；冷数据定期进行 shrink操作，以缩减存储；</li><li>采取 curator 进行索引的生命周期管理；</li><li>仅针对需要分词的字段，合理的设置分词器；</li><li>Mapping 阶段充分结合各个字段的属性，是否需要检索、是否需要存储等。……..</li></ol><p><strong>写入调优</strong></p><ol><li>写入前副本数设置为 0；</li><li>写入前关闭 refresh_interval 设置为-1，禁用刷新机制；</li><li>写入过程中：采取 bulk 批量写入；</li><li>写入后恢复副本数和刷新间隔；</li><li>尽量使用自动生成的 id。</li></ol><p><strong>查询调优</strong></p><ol><li>禁用 wildcard；</li><li>禁用批量 terms（成百上千的场景）；</li><li>充分利用倒排索引机制，能 keyword 类型尽量 keyword；</li><li>数据量大时候，可以先基于时间敲定索引再检索；</li><li>设置合理的路由机制</li></ol><h2 id="_12、elasticsearch-对于大数据量-上亿量级-的聚合如何实现" tabindex="-1"><a class="header-anchor" href="#_12、elasticsearch-对于大数据量-上亿量级-的聚合如何实现" aria-hidden="true">#</a> 12、Elasticsearch 对于大数据量(上亿量级) 的聚合如何实现？</h2><blockquote><p>Elasticsearch 提供的首个近似聚合是 cardinality 度量。它提供一个字段的基数，即该字段的 distinct 或者 unique 值的数目。它是基于 HLL 算法的。 HLL 会先对我们的输入作哈希运算，然后根据哈希运算的 结果中的 bits 做概率估算从而得到基数。其特点是： 可配置的精度， 用来控制内存的使用(更精确 ＝ 更 多内存)；小的数据集精度是非常高的；我们可以通过配置参数，来设置去重需要的固定内存使用量。无 论数千还是数十亿的唯一值，内存使用量只与你配置的精确度相关</p></blockquote><h2 id="_13、在并发情况下-elasticsearch-如果保证读写一致" tabindex="-1"><a class="header-anchor" href="#_13、在并发情况下-elasticsearch-如果保证读写一致" aria-hidden="true">#</a> 13、在并发情况下，Elasticsearch 如果保证读写一致？</h2><blockquote><ul><li>可以通过版本号使用乐观并发控制，以确保新版本不会被旧版本覆盖，由应用层来处理具体的冲突；</li><li>对于写操作，一致性级别支持 quorum/one/all，默认为 quorum，即只有当大多数分片可用时才允许写操作。但即使大多数可用， 也可能存在因为网络等原因导致写入副本失败， 这样该副本被认为故 障，分片将会在一个不同的节点上重建。</li><li>对于读操作， 可以设置 replication 为 sync(默认)，这使得操作在主分片和副本分片都完成后才会返回；如果设置 replication 为 async 时，也可以通过设置搜索请求参数_preference 为 primary 来查询主分片， 确保文档是最新版本。</li></ul></blockquote><h2 id="_14、如何监控-elasticsearch-集群状态" tabindex="-1"><a class="header-anchor" href="#_14、如何监控-elasticsearch-集群状态" aria-hidden="true">#</a> 14、如何监控 Elasticsearch 集群状态？</h2><blockquote><p>elasticsearch-head 插件 通过 Kibana 监控 Elasticsearch。你可以实时查看你的集群健康状态和性能， 也可以分析过去的集群、 索引和节点指标</p></blockquote><h2 id="_15、是否了解字典树" tabindex="-1"><a class="header-anchor" href="#_15、是否了解字典树" aria-hidden="true">#</a> 15、是否了解字典树？</h2><p>常用字典数据结构如下所示:</p><p><img src="https://javaxiaobear-1301481032.cos.ap-guangzhou.myqcloud.com/picture-bed/image-20230709145642728.png" alt="image-20230709145642728" loading="lazy"></p>`,44),d={href:"https://baike.baidu.com/item/Trie%E6%A0%91",target:"_blank",rel:"noopener noreferrer"},u={href:"https://baike.baidu.com/item/%E6%A0%91%E5%BD%A2%E7%BB%93%E6%9E%84/9663807",target:"_blank",rel:"noopener noreferrer"},p={href:"https://baike.baidu.com/item/%E5%AD%97%E7%AC%A6",target:"_blank",rel:"noopener noreferrer"},_=e("p",null,"它的优点是：利用字符串的公共前缀来减少查询时间，最大限度地减少无谓的字符串比较，查询效率比哈希树高。",-1),b=e("p",null,"Trie 的核心思想是空间换时间，利用字符串的公共前缀来降低查询时间的开销以达到提高效率的目的。",-1),g=e("p",null,"它有 3 个基本性质:",-1),m=e("ul",null,[e("li",null,"根节点不包含字符，除根节点外每一个节点都只包含一个字符"),e("li",null,"从根节点到某一节点，路径上经过的字符连接起来，为该节点对应的字符串"),e("li",null,"每个节点的所有子节点包含的字符都不相同。")],-1),f=e("p",null,"对于中文的字典树，每个节点的子节点用一个哈希表存储， 这样就不用浪费太大的空间， 而且查询速度上 可以保留哈希的复杂度 O(1)。",-1),E=i('<h2 id="_16、-elasticsearch-中的集群、节点、索引、文档、类型是什么" tabindex="-1"><a class="header-anchor" href="#_16、-elasticsearch-中的集群、节点、索引、文档、类型是什么" aria-hidden="true">#</a> 16、 Elasticsearch 中的集群、节点、索引、文档、类型是什么？</h2><blockquote><ul><li>集群是一个或多个节点(服务器) 的集合， 它们共同保存您的整个数据， 并提供跨所有节点的联合索引和搜索功能。群集由唯一名称标识， 默认情况下为“elasticsearch”。此名称很重要， 因为如果节点设 置为按名称加入群集，则该节点只能是群集的一部分。</li><li>节点是属于集群一部分的单个服务器。它存储数据并参与群集索引和搜索功能。</li><li>索引就像关系数据库中的“数据库”。它有一个定义多种类型的映射。索引是逻辑名称空间， 映射到一个或多个主分片，并且可以有零个或多个副本分片。 MySQL =&gt;数据库 Elasticsearch =&gt;索引</li><li>文档类似于关系数据库中的一行。不同之处在于索引中的每个文档可以具有不同的结构(字段) ，但是对于通用字段应该具有相同的数据类型。 MySQL =&gt; Databases =&gt; Tables =&gt; Columns / Rows Elasticsearch =&gt; Indices =&gt; Types =&gt;具有属性的文档.</li><li>类型是索引的逻辑类别/分区，其语义完全取决于用户。</li></ul></blockquote><h2 id="_17、elasticsearch-中的倒排索引是什么" tabindex="-1"><a class="header-anchor" href="#_17、elasticsearch-中的倒排索引是什么" aria-hidden="true">#</a> 17、Elasticsearch 中的倒排索引是什么？</h2><blockquote><p>倒排索引是搜索引擎的核心。搜索引擎的主要目标是在查找发生搜索条件的文档时提供快速搜索。 ES 中的倒排索引其实就是 lucene 的倒排索引，区别于传统的正向索引， 倒排索引会再存储数据时将关键词和数据进行关联，保存到倒排表中，然后查询时，将查询内容进行分词后在倒排表中进行查询，最后匹配数 据即可。</p></blockquote><h2 id="_18、elasticsearch与数据库之间的对应关系是什么" tabindex="-1"><a class="header-anchor" href="#_18、elasticsearch与数据库之间的对应关系是什么" aria-hidden="true">#</a> 18、Elasticsearch与数据库之间的对应关系是什么？</h2><blockquote><table><thead><tr><th style="text-align:center;">Elasticsearch</th><th style="text-align:center;">数据库</th></tr></thead><tbody><tr><td style="text-align:center;">索引index</td><td style="text-align:center;">数据库</td></tr><tr><td style="text-align:center;">文档</td><td style="text-align:center;">表数据</td></tr><tr><td style="text-align:center;">索引库(index)中的映射</td><td style="text-align:center;">数据库(database)中的表结构(table)</td></tr><tr><td style="text-align:center;">字段(Field)</td><td style="text-align:center;">数据表的字段，对文档数据根据不同属性进行的分类标识</td></tr><tr><td style="text-align:center;">反向索引</td><td style="text-align:center;">索引</td></tr><tr><td style="text-align:center;">查询DSL</td><td style="text-align:center;">SQL</td></tr><tr><td style="text-align:center;">get http://</td><td style="text-align:center;">select * from table</td></tr><tr><td style="text-align:center;">put http://</td><td style="text-align:center;">update table set</td></tr><tr><td style="text-align:center;">delete http://</td><td style="text-align:center;">delete</td></tr></tbody></table></blockquote><h2 id="_19、数据库修改信息如何同步elasticsearch" tabindex="-1"><a class="header-anchor" href="#_19、数据库修改信息如何同步elasticsearch" aria-hidden="true">#</a> 19、数据库修改信息如何同步ElasticSearch？</h2><blockquote><ol><li>同步调用：直接在代码里写逻辑，数据在增删改查进数据库的同时，也往es里同步一份</li><li>使用官方的<code>logstash</code>，定时查询数据库，查询到数据有变化就发送到es中</li><li>利用数据库的binlog同步变化数据，然后将数据发送给es,当然也可以通过java代码监听拿到数据，再发送到es或做其他处理。</li><li>MQ中间件，有数据变化的时候，就通知mq，然后监听mq实现数据同步到mq</li></ol></blockquote><h2 id="_20、如何在保留不变性的前提下实现倒排索引的更新" tabindex="-1"><a class="header-anchor" href="#_20、如何在保留不变性的前提下实现倒排索引的更新" aria-hidden="true">#</a> 20、如何在保留不变性的前提下实现倒排索引的更新？</h2><blockquote><p>倒排索引是一种数据结构，用于存储某个词汇项和出现该词汇项的文档之间的映射。在搜索引擎中，如Elasticsearch，倒排索引是实现快速全文搜索的关键。</p><p>然而，对于倒排索引的更新，一种常见的做法是，不直接在现有的倒排索引上修改，而是创建一个新的倒排索引来反映数据的更新，这样就能保持不变性。这种方法通常被称为&quot;索引重建&quot;或&quot;索引刷新&quot;。这通常在后台发生，不会影响正在进行的搜索操作。</p><p>以下是一个简单的步骤示例：</p><ol><li>当文档更新时，首先在内存中创建一个新的倒排索引，包含更新后的文档。</li><li>创建新索引的同时，旧的索引仍然可用，可以继续响应搜索请求。</li><li>一旦新的索引创建完成，搜索操作就可以切换到新的索引上。</li><li>旧的索引在不再被使用后，可以被安全地删除。</li></ol><p>这种方法的优点是，它能保持不变性，这对于在分布式系统中保持数据一致性很重要。此外，它还允许系统在更新数据的同时，继续响应搜索请求，从而提供高可用性。</p><p>当然，这种方法的代价是需要额外的存储空间来保存新的索引，以及可能需要更多的时间来创建新的索引。一些系统可能会使用一些优化策略，比如只对变化的部分创建新的索引，或者在低流量时进行索引重建等。</p><p>在实践中，Elasticsearch和许多其他搜索引擎都使用了这种方法来处理索引的更新。同时，它们还使用了一些其他技术，如合并索引段（Merging Segments），以减少存储的使用和优化查询性能。</p></blockquote><h2 id="_21、elasticsearch的主要功能及应用场景" tabindex="-1"><a class="header-anchor" href="#_21、elasticsearch的主要功能及应用场景" aria-hidden="true">#</a> 21、ElasticSearch的主要功能及应用场景？</h2><blockquote><ul><li>主要功能：</li></ul><p>1）海量数据的分布式存储以及集群管理，达到了服务与数据的高可用以及水平扩展；</p><p>2）近实时搜索，性能卓越。对结构化、全文、地理位置等类型数据的处理；</p><p>3）海量数据的近实时分析（聚合功能）</p><ul><li>应用场景：</li></ul><p>1）网站搜索、垂直搜索、代码搜索；</p><p>2）日志管理与分析、安全指标监控、应用性能监控、Web抓取舆情分析</p></blockquote><h2 id="_22、elasticsearch是怎么进行全文检索的-模糊还是精准" tabindex="-1"><a class="header-anchor" href="#_22、elasticsearch是怎么进行全文检索的-模糊还是精准" aria-hidden="true">#</a> 22、ElasticSearch是怎么进行全文检索的？模糊还是精准？</h2><blockquote><p>Elasticsearch是一个高度可扩展的开源全文搜索和分析引擎。它能够在几乎实时内存取和分析大量数据。Elasticsearch支持全文搜索，这是它的一个主要优势。</p><p>在进行全文搜索时，Elasticsearch使用了称为倒排索引的数据结构，它允许在极短的时间内对大量文本进行高效搜索。倒排索引是一种映射，它将每个唯一的词汇项映射到包含它的文档。</p><p>Elasticsearch的搜索可以是精确的，也可以是模糊的。这取决于你使用的查询类型和配置。</p><ul><li><p><strong>精确查询</strong>：也称作Term查询，用于搜索确切的值。例如，如果你有一个&quot;status&quot;字段，并希望找到所有状态为&quot;active&quot;的文档，你可以使用Term查询。这种查询通常用于过滤结构化的数据，如数字、日期、枚举类型等。</p></li><li><p><strong>全文查询</strong>：也称作Match查询，用于执行全文搜索。Match查询会对你的查询进行分析（例如，将句子分解为单词，处理大小写等），然后在倒排索引中查找匹配项。这种查询通常用于非结构化的文本数据。</p></li><li><p><strong>模糊查询</strong>：Elasticsearch也支持模糊查询（Fuzzy Query），它可以在查询词汇项附近查找匹配项。这可以用来抵消拼写错误或者近似匹配。模糊查询使用Levenshtein编辑距离来找到相似的词汇项。</p></li></ul><p>Elasticsearch的查询功能非常强大，可以通过组合各种查询类型和过滤器来构建复杂的搜索条件。</p></blockquote>',14);function x(y,k){const t=r("ExternalLinkIcon");return c(),n("div",null,[h,e("blockquote",null,[e("p",null,[a("字典树又称单词查找树， "),e("a",d,[a("Trie 树"),l(t)]),e("a",u,[a("，是一种树形结构，是一种哈希树的变种。典型应用是用于统计，"),l(t)]),a(" 排"),e("a",p,[a("序和保存大量的字符串"),l(t)]),a(" (但不仅限于字符串) ，所以经常被搜索引擎系统用于文本词频统计。")]),_,b,g,m,f]),E])}const v=s(o,[["render",x],["__file","ElasticSearch.html.vue"]]);export{v as default};
