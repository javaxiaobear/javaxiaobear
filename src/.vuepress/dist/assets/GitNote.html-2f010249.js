import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as d,o as r,c as l,a,b as e,d as n,e as i}from"./app-f55ccf80.js";const c="/assets/image-20200715140747735-b7c115c0.png",o="/assets/image-20200715140806159-f7c67454.png",h="/assets/image-20200712135009240-d8fbfd07.png",p="/assets/image-20200712135139184-193c7df6.png",u="/assets/image-20200712135519473-e83e1236.png",g="/assets/image-20200712135650878-98c35253.png",b="/assets/image-20200712135833651-fd4ea90a.png",m="/assets/image-20200712140029369-14c28065.png",v="/assets/image-20200712140155909-739ede01.png",_="/assets/image-20200712140348678-a9a86f34.png",x={},f=i('<h2 id="_1、版本控制" tabindex="-1"><a class="header-anchor" href="#_1、版本控制" aria-hidden="true">#</a> 1、版本控制</h2><p>学习git之前，我们需要先明白一个概念: <strong>版本控制</strong></p><blockquote><p>版本控制（Revision control）是一种在开发的过程中用于管理我们对文件、目录或工程等内容的修改历史，方便查看更改历史记录，备份以便恢复以前的版本的软件工程技术。</p><ul><li>实现跨区域多人协同开发</li><li>追踪和记载一个或者多个文件的历史记录</li><li>组织和保护你的源代码和文档</li><li>统计工作量</li><li>并行开发、提高开发效率</li><li>跟踪记录整个软件的开发过程</li><li>减轻开发人员的负担，节省时间，同时降低人为错误</li></ul></blockquote><p>简单说就是用于管理多人协同开发项目的技术。</p><p>没有进行版本控制或者版本控制本身缺乏正确的流程管理，在软件开发过程中将会引入很多问题，如软件代码的一致性、软件内容的冗余、软件过程的事物性、软件开发过程中的并发性、软件源代码的安全性，以及软件的整合等问题。</p><h2 id="_2、常见的版本控制工具" tabindex="-1"><a class="header-anchor" href="#_2、常见的版本控制工具" aria-hidden="true">#</a> 2、常见的版本控制工具</h2><p>主流的版本控制器有如下这些：</p><ul><li><strong>Git</strong></li><li><strong>SVN</strong>（Subversion）</li><li><strong>CVS</strong>（Concurrent Versions System）</li><li><strong>VSS</strong>（Micorosoft Visual SourceSafe）</li><li><strong>TFS</strong>（Team Foundation Server）</li><li>Visual Studio Online</li></ul><p>版本控制产品非常的多（Perforce、Rational ClearCase、RCS（GNU Revision Control System）、Serena Dimention、SVK、BitKeeper、Monotone、Bazaar、Mercurial、SourceGear Vault），现在影响力最大且使用最广泛的是Git与SVN</p><h2 id="_3、版本控制分类" tabindex="-1"><a class="header-anchor" href="#_3、版本控制分类" aria-hidden="true">#</a> 3、版本控制分类</h2><h3 id="_1、本地版本控制" tabindex="-1"><a class="header-anchor" href="#_1、本地版本控制" aria-hidden="true">#</a> 1、本地版本控制</h3><p><img src="'+c+'" alt="image-20200715140747735" loading="lazy"></p><h3 id="_2、集中版本控制-svn" tabindex="-1"><a class="header-anchor" href="#_2、集中版本控制-svn" aria-hidden="true">#</a> 2、集中版本控制 SVN</h3><p>所有的版本数据都保存在服务器上，协同开发者从服务器上同步更新或上传自己的修改</p><p><img src="'+o+'" alt="image-20200715140806159" loading="lazy"></p><p>所有的版本数据都存在服务器上，用户的本地只有自己以前所同步的版本，如果不连网的话，用户就看不到历史版本，也无法切换版本验证问题，或在不同分支工作。而且，所有数据都保存在单一的服务器上，有很大的风险这个服务器会损坏，这样就会丢失所有的数据，当然可以定期备份。代表产品：SVN、CVS、VSS</p><h3 id="_3、分布式版本控制-git" tabindex="-1"><a class="header-anchor" href="#_3、分布式版本控制-git" aria-hidden="true">#</a> 3、分布式版本控制 Git</h3><p>每个人都拥有全部的代码！安全隐患！</p><p>所有版本信息仓库全部同步到本地的每个用户，这样就可以在本地查看所有版本历史，可以离线在本地提交，只需在连网时push到相应的服务器或其他用户那里。由于每个用户那里保存的都是所有的版本数据，只要有一个用户的设备没有问题就可以恢复所有的数据，但这增加了本地存储空间的占用。</p><p>不会因为服务器损坏或者网络问题，造成不能工作的情况！</p><h3 id="_4、git与svn的主要区别" tabindex="-1"><a class="header-anchor" href="#_4、git与svn的主要区别" aria-hidden="true">#</a> 4、Git与SVN的主要区别</h3><p>SVN是集中式版本控制系统，版本库是集中放在中央服务器的，而工作的时候，用的都是自己的电脑，所以首先要从中央服务器得到最新的版本，然后工作，完成工作后，需要把自己做完的活推送到中央服务器。集中式版本控制系统是必须联网才能工作，对网络带宽要求较高。</p><p>Git是分布式版本控制系统，没有中央服务器，每个人的电脑就是一个完整的版本库，工作的时候不需要联网了，因为版本都在自己电脑上。协同的方法是这样的：比如说自己在电脑上改了文件A，其他人也在电脑上改了文件A，这时，你们两之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。Git可以直接看到更新了哪些代码和文件！</p><p><strong>Git是目前世界上最先进的分布式版本控制系统。</strong></p><h2 id="_4、git的历史" tabindex="-1"><a class="header-anchor" href="#_4、git的历史" aria-hidden="true">#</a> 4、Git的历史</h2><p>同生活中的许多伟大事物一样，Git 诞生于一个极富纷争大举创新的年代。</p><p>Linux 内核开源项目有着为数众广的参与者。绝大多数的 Linux 内核维护工作都花在了提交补丁和保存归档的繁琐事务上(1991－2002年间)。到 2002 年，整个项目组开始启用一个专有的分布式版本控制系统 BitKeeper 来管理和维护代码。</p><p>Linux社区中存在很多的大佬！破解研究 BitKeeper ！</p><p>到了 2005 年，开发 BitKeeper 的商业公司同 Linux 内核开源社区的合作关系结束，他们收回了 Linux 内核社区免费使用 BitKeeper 的权力。这就迫使 Linux 开源社区(特别是 Linux 的缔造者 Linus Torvalds)基于使用 BitKeeper 时的经验教训，开发出自己的版本系统。（2周左右！） 也就是后来的 Git！</p><p><strong>Git是目前世界上最先进的分布式版本控制系统。</strong></p><p>Git是免费、开源的，最初Git是为辅助 Linux 内核开发的，来替代 BitKeeper！</p><h2 id="_5、git下载" tabindex="-1"><a class="header-anchor" href="#_5、git下载" aria-hidden="true">#</a> 5、Git下载</h2>',32),k={href:"https://git-scm.com/%EF%BC%8C%E4%B8%8B%E8%BD%BDgit%E5%AF%B9%E5%BA%94%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%89%88%E6%9C%AC%E3%80%82",target:"_blank",rel:"noopener noreferrer"},G=a("p",null,"所有东西下载慢的话就可以去找镜像！",-1),S={href:"http://npm.taobao.org/mirrors/git-for-windows/",target:"_blank",rel:"noopener noreferrer"},B=a("p",null,"下载对应的版本即可安装！",-1),V=a("p",null,"安装：无脑下一步即可！安装完毕就可以使用了！",-1),E=a("h2",{id:"_6、git使用",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#_6、git使用","aria-hidden":"true"},"#"),e(" 6、Git使用")],-1),q=a("h3",{id:"_1、配置用户名和邮箱以及ssh",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#_1、配置用户名和邮箱以及ssh","aria-hidden":"true"},"#"),e(" 1、配置用户名和邮箱以及ssh")],-1),N={href:"https://www.runoob.com/git/git-remote-repo.html",target:"_blank",rel:"noopener noreferrer"},y=i('<h3 id="_2、git创建仓库" tabindex="-1"><a class="header-anchor" href="#_2、git创建仓库" aria-hidden="true">#</a> 2、Git创建仓库</h3><h4 id="git-init" tabindex="-1"><a class="header-anchor" href="#git-init" aria-hidden="true">#</a> git init</h4><blockquote><p>Git 使用 <strong>git init</strong> 命令来初始化一个 Git 仓库，Git 的很多命令都需要在 Git 的仓库中运行，所以 <strong>git init</strong> 是使用 Git 的第一个命令。在执行完成 <strong>git init</strong> 命令后，Git 仓库会生成一个 .git 目录，该目录包含了资源的所有元数据，其他的项目目录保持不变（不像 SVN 会在每个子目录生成 .svn 目录，Git 只在仓库的根目录生成 .git 目录）。</p></blockquote><p><img src="'+h+'" alt="image-20200712135009240" loading="lazy"></p><h4 id="git-clone" tabindex="-1"><a class="header-anchor" href="#git-clone" aria-hidden="true">#</a> git clone</h4><p>一般情况下，我们是从GitHub或者gitee上创建好仓库，然后我们克隆下来就好了</p><p><img src="'+p+`" alt="image-20200712135139184" loading="lazy"></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code> git clone https://github.com/yhx1001/JavaWeb-note.git
 //git clone 仓库地址
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3、基本操作" tabindex="-1"><a class="header-anchor" href="#_3、基本操作" aria-hidden="true">#</a> 3、基本操作</h3><p>这里以克隆下来为例，因为我们常用的就是这个</p><h4 id="_1、把自己的代码或者文件夹、文件放入克隆下来的目录" tabindex="-1"><a class="header-anchor" href="#_1、把自己的代码或者文件夹、文件放入克隆下来的目录" aria-hidden="true">#</a> 1、把自己的代码或者文件夹、文件放入克隆下来的目录</h4><h5 id="从git-bash进入克隆的文件目录" tabindex="-1"><a class="header-anchor" href="#从git-bash进入克隆的文件目录" aria-hidden="true">#</a> 从git bash进入克隆的文件目录</h5><p><img src="`+u+`" alt="image-20200712135519473" loading="lazy"></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>cd 仓库名称
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2、git-add" tabindex="-1"><a class="header-anchor" href="#_2、git-add" aria-hidden="true">#</a> 2、git add</h4><blockquote><p>git add 命令可将该文件添加到缓存</p></blockquote><p><img src="`+g+`" alt="image-20200712135650878" loading="lazy"></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git add .
将所有文件添加到缓存
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3、git-status" tabindex="-1"><a class="header-anchor" href="#_3、git-status" aria-hidden="true">#</a> 3、git status</h4><p>命令用于查看项目的当前状态。</p><p><img src="`+b+'" alt="image-20200712135833651" loading="lazy"></p><h4 id="_4、git-commit" tabindex="-1"><a class="header-anchor" href="#_4、git-commit" aria-hidden="true">#</a> 4、git commit</h4><p>git commit 将缓存区内容添加到仓库中</p><p>Git 为你的每一个提交都记录你的名字与电子邮箱地址，所以第一步需要配置用户名和邮箱地址。</p><p><img src="'+m+'" alt="image-20200712140029369" loading="lazy"></p><p><img src="'+v+`" alt="image-20200712140155909" loading="lazy"></p><h4 id="_5、推送到远程仓库" tabindex="-1"><a class="header-anchor" href="#_5、推送到远程仓库" aria-hidden="true">#</a> 5、推送到远程仓库</h4><p>推送你的新分支与数据到某个远端仓库命令:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git push [alias] [branch]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+_+`" alt="image-20200712140348678" loading="lazy"></p><h2 id="_7、总结" tabindex="-1"><a class="header-anchor" href="#_7、总结" aria-hidden="true">#</a> 7、总结</h2><h3 id="_1、git基础设置" tabindex="-1"><a class="header-anchor" href="#_1、git基础设置" aria-hidden="true">#</a> 1、git基础设置</h3><h4 id="_1、设置用户名" tabindex="-1"><a class="header-anchor" href="#_1、设置用户名" aria-hidden="true">#</a> 1、设置用户名</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name <span class="token string">&quot;xiaobear&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2、设置邮箱" tabindex="-1"><a class="header-anchor" href="#_2、设置邮箱" aria-hidden="true">#</a> 2、设置邮箱</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email <span class="token string">&quot;xxxx.@gmail.com&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_3、查看配置" tabindex="-1"><a class="header-anchor" href="#_3、查看配置" aria-hidden="true">#</a> 3、查看配置</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> config <span class="token parameter variable">--list</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2、创建版本库" tabindex="-1"><a class="header-anchor" href="#_2、创建版本库" aria-hidden="true">#</a> 2、创建版本库</h3><h4 id="_1、克隆远程版本库" tabindex="-1"><a class="header-anchor" href="#_1、克隆远程版本库" aria-hidden="true">#</a> 1、克隆远程版本库</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> clone 地址
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2、初始化本地版本库" tabindex="-1"><a class="header-anchor" href="#_2、初始化本地版本库" aria-hidden="true">#</a> 2、初始化本地版本库</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> init
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_3、修改和提交" tabindex="-1"><a class="header-anchor" href="#_3、修改和提交" aria-hidden="true">#</a> 3、修改和提交</h3><h4 id="_1、查看状态" tabindex="-1"><a class="header-anchor" href="#_1、查看状态" aria-hidden="true">#</a> 1、查看状态</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> status
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2、查看变更内容" tabindex="-1"><a class="header-anchor" href="#_2、查看变更内容" aria-hidden="true">#</a> 2、查看变更内容</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> <span class="token function">diff</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_3、跟踪所有改动过的文件" tabindex="-1"><a class="header-anchor" href="#_3、跟踪所有改动过的文件" aria-hidden="true">#</a> 3、跟踪所有改动过的文件</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> <span class="token function">add</span> <span class="token parameter variable">-A</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_4、跟踪指定文件" tabindex="-1"><a class="header-anchor" href="#_4、跟踪指定文件" aria-hidden="true">#</a> 4、跟踪指定文件</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> <span class="token function">add</span> <span class="token operator">&lt;</span>file<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_5、文件改名" tabindex="-1"><a class="header-anchor" href="#_5、文件改名" aria-hidden="true">#</a> 5、文件改名</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> <span class="token function">mv</span> <span class="token operator">&lt;</span>oldfile<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>newfile<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_6、删除文件" tabindex="-1"><a class="header-anchor" href="#_6、删除文件" aria-hidden="true">#</a> 6、删除文件</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> <span class="token function">rm</span> <span class="token operator">&lt;</span>file<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_7、停止跟踪文件但不删除" tabindex="-1"><a class="header-anchor" href="#_7、停止跟踪文件但不删除" aria-hidden="true">#</a> 7、停止跟踪文件但不删除</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> <span class="token function">rm</span> <span class="token parameter variable">--cache</span> <span class="token operator">&lt;</span>file<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_8、提交所有更改过的文件" tabindex="-1"><a class="header-anchor" href="#_8、提交所有更改过的文件" aria-hidden="true">#</a> 8、提交所有更改过的文件</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&quot;commit message&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_9、修改最后一次更改" tabindex="-1"><a class="header-anchor" href="#_9、修改最后一次更改" aria-hidden="true">#</a> 9、修改最后一次更改</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> commit <span class="token parameter variable">--amend</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_4、查看提交历史" tabindex="-1"><a class="header-anchor" href="#_4、查看提交历史" aria-hidden="true">#</a> 4、查看提交历史</h3><h4 id="_1、查看提交历史" tabindex="-1"><a class="header-anchor" href="#_1、查看提交历史" aria-hidden="true">#</a> 1、查看提交历史</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> log
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2、查看指定文件提交历史" tabindex="-1"><a class="header-anchor" href="#_2、查看指定文件提交历史" aria-hidden="true">#</a> 2、查看指定文件提交历史</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> log <span class="token parameter variable">-p</span> <span class="token operator">&lt;</span>file<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_3、以列表方式查看指定文件提交历史" tabindex="-1"><a class="header-anchor" href="#_3、以列表方式查看指定文件提交历史" aria-hidden="true">#</a> 3、以列表方式查看指定文件提交历史</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> blame <span class="token operator">&lt;</span>file<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_5、撤销" tabindex="-1"><a class="header-anchor" href="#_5、撤销" aria-hidden="true">#</a> 5、撤销</h3><h4 id="_1、撤销工作目录中所有未提交文件的修改内容" tabindex="-1"><a class="header-anchor" href="#_1、撤销工作目录中所有未提交文件的修改内容" aria-hidden="true">#</a> 1、撤销工作目录中所有未提交文件的修改内容</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> reset <span class="token parameter variable">-hard</span>	HEAD
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2、撤销指定未提交文件的修改内容" tabindex="-1"><a class="header-anchor" href="#_2、撤销指定未提交文件的修改内容" aria-hidden="true">#</a> 2、撤销指定未提交文件的修改内容</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> checkout HEAD <span class="token operator">&lt;</span>file<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_3、撤销指定的提交" tabindex="-1"><a class="header-anchor" href="#_3、撤销指定的提交" aria-hidden="true">#</a> 3、撤销指定的提交</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> revert <span class="token operator">&lt;</span>commit<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_6、分支与标签" tabindex="-1"><a class="header-anchor" href="#_6、分支与标签" aria-hidden="true">#</a> 6、分支与标签</h3><h4 id="_1、显示本地所有分支" tabindex="-1"><a class="header-anchor" href="#_1、显示本地所有分支" aria-hidden="true">#</a> 1、显示本地所有分支</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> branch
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2、切换到指定分支或标签" tabindex="-1"><a class="header-anchor" href="#_2、切换到指定分支或标签" aria-hidden="true">#</a> 2、切换到指定分支或标签</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> checkout <span class="token operator">&lt;</span>branch/tag<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_3、创建新分支" tabindex="-1"><a class="header-anchor" href="#_3、创建新分支" aria-hidden="true">#</a> 3、创建新分支</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> branch <span class="token operator">&lt;</span>new branch<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_4、删除本地分支" tabindex="-1"><a class="header-anchor" href="#_4、删除本地分支" aria-hidden="true">#</a> 4、删除本地分支</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> branch <span class="token parameter variable">-d</span> <span class="token operator">&lt;</span>branch<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_5、列出本地所有标签" tabindex="-1"><a class="header-anchor" href="#_5、列出本地所有标签" aria-hidden="true">#</a> 5、列出本地所有标签</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> tag
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_6、基于最新提交创建标签" tabindex="-1"><a class="header-anchor" href="#_6、基于最新提交创建标签" aria-hidden="true">#</a> 6、基于最新提交创建标签</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> tag <span class="token operator">&lt;</span>tagname<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_7、删除标签" tabindex="-1"><a class="header-anchor" href="#_7、删除标签" aria-hidden="true">#</a> 7、删除标签</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> tag <span class="token parameter variable">-d</span> <span class="token operator">&lt;</span>tagname<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我们省去那些概念以及下载，就我们常用的来说就是8步：</p><ul><li><p>gitHub或gitee创建仓库</p></li><li><p>git bash克隆仓库到本地</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git clone 地址
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>把你的文件夹或者文件放到克隆的目录</p></li><li><p>git bash进入克隆文件夹</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>cd 仓库名称
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>git add 命令可将该文件添加到缓存</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git add .
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>git status 命令用于查看项目的当前状态（可要可不要）</p></li><li><p>git commit 将缓存区内容添加到仓库中</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git commit -m &quot;注释&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>推送到远程仓库gitHub或者gitee</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git push
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul>`,93);function C(w,z){const s=d("ExternalLinkIcon");return r(),l("div",null,[f,a("p",null,[e("打开 [git官网] "),a("a",k,[e("https://git-scm.com/，下载git对应操作系统的版本。"),n(s)])]),G,a("p",null,[e("官网下载太慢，我们可以使用淘宝镜像下载："),a("a",S,[e("http://npm.taobao.org/mirrors/git-for-windows/"),n(s)])]),B,V,E,q,a("p",null,[a("a",N,[e("https://www.runoob.com/git/git-remote-repo.html"),n(s)])]),y])}const K=t(x,[["render",C],["__file","GitNote.html.vue"]]);export{K as default};
