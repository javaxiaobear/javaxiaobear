const e=JSON.parse('{"key":"v-3ebc9d28","path":"/interview/distributed/RabbitMQ.html","title":"RabbitMQ 26道面试题","lang":"zh-CN","frontmatter":{"title":"RabbitMQ 26道面试题","description":"1、为什么要使用MQ 1、流量消峰\\r 举个例子：如果订单系统最多能处理一万次订单，这个处理能力应付正常时段的下单时绰绰有余，正常时段我们下单一秒后就能返回结果。但是在高峰期，如果有两万次下单操作系统是处理不了的，只能限制订单超过一万后不允许用户下单。使用消息队列做缓冲，我们可以取消这个限制，把一秒内下的订单分散成一段时间来处理，这时有些用户可能在下单十...","head":[["meta",{"property":"og:url","content":"https://javaxiaobear.cn/interview/distributed/RabbitMQ.html"}],["meta",{"property":"og:site_name","content":"小熊学Java 全能学习+面试指南"}],["meta",{"property":"og:title","content":"RabbitMQ 26道面试题"}],["meta",{"property":"og:description","content":"1、为什么要使用MQ 1、流量消峰\\r 举个例子：如果订单系统最多能处理一万次订单，这个处理能力应付正常时段的下单时绰绰有余，正常时段我们下单一秒后就能返回结果。但是在高峰期，如果有两万次下单操作系统是处理不了的，只能限制订单超过一万后不允许用户下单。使用消息队列做缓冲，我们可以取消这个限制，把一秒内下的订单分散成一段时间来处理，这时有些用户可能在下单十..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-09-21T11:19:08.000Z"}],["meta",{"property":"article:author","content":"小熊同学"}],["meta",{"property":"article:modified_time","content":"2023-09-21T11:19:08.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"RabbitMQ 26道面试题\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-09-21T11:19:08.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"小熊同学\\",\\"url\\":\\"https://javaxiaobear.cn\\"}]}"]]},"headers":[{"level":2,"title":"1、为什么要使用MQ","slug":"_1、为什么要使用mq","link":"#_1、为什么要使用mq","children":[{"level":3,"title":"1、流量消峰","slug":"_1、流量消峰","link":"#_1、流量消峰","children":[]},{"level":3,"title":"2、应用解耦","slug":"_2、应用解耦","link":"#_2、应用解耦","children":[]},{"level":3,"title":"3、异步处理","slug":"_3、异步处理","link":"#_3、异步处理","children":[]}]},{"level":2,"title":"2、什么是RabbitMQ","slug":"_2、什么是rabbitmq","link":"#_2、什么是rabbitmq","children":[]},{"level":2,"title":"3、RabbitMQ各组件的功能","slug":"_3、rabbitmq各组件的功能","link":"#_3、rabbitmq各组件的功能","children":[]},{"level":2,"title":"3、RabbitMQ工作原理","slug":"_3、rabbitmq工作原理","link":"#_3、rabbitmq工作原理","children":[]},{"level":2,"title":"4、RabbitMQ 上的一个 queue 中存放的 message 是否有数量限制？","slug":"_4、rabbitmq-上的一个-queue-中存放的-message-是否有数量限制","link":"#_4、rabbitmq-上的一个-queue-中存放的-message-是否有数量限制","children":[]},{"level":2,"title":"5、RabbitMQ 允许发送的 message 最大可达多大？","slug":"_5、rabbitmq-允许发送的-message-最大可达多大","link":"#_5、rabbitmq-允许发送的-message-最大可达多大","children":[]},{"level":2,"title":"6、RabbitMQ的工作模式","slug":"_6、rabbitmq的工作模式","link":"#_6、rabbitmq的工作模式","children":[{"level":3,"title":"1、simple模式（即最简单的收发模式）","slug":"_1、simple模式-即最简单的收发模式","link":"#_1、simple模式-即最简单的收发模式","children":[]},{"level":3,"title":"2、Work Queues(工作队列)","slug":"_2、work-queues-工作队列","link":"#_2、work-queues-工作队列","children":[]},{"level":3,"title":"3、publish/subscribe发布订阅(共享资源)","slug":"_3、publish-subscribe发布订阅-共享资源","link":"#_3、publish-subscribe发布订阅-共享资源","children":[]},{"level":3,"title":"4、routing路由模式","slug":"_4、routing路由模式","link":"#_4、routing路由模式","children":[]},{"level":3,"title":"5、topic 主题模式(路由模式的一种)","slug":"_5、topic-主题模式-路由模式的一种","link":"#_5、topic-主题模式-路由模式的一种","children":[]}]},{"level":2,"title":"7、如何保证RabbitMQ消息的顺序性？","slug":"_7、如何保证rabbitmq消息的顺序性","link":"#_7、如何保证rabbitmq消息的顺序性","children":[]},{"level":2,"title":"8、RabbitMQ消息丢失的情况有哪些？","slug":"_8、rabbitmq消息丢失的情况有哪些","link":"#_8、rabbitmq消息丢失的情况有哪些","children":[{"level":3,"title":"1、生产者发送消息RabbitMQ Server 消息丢失","slug":"_1、生产者发送消息rabbitmq-server-消息丢失","link":"#_1、生产者发送消息rabbitmq-server-消息丢失","children":[]},{"level":3,"title":"2、RabbitMQ Server中存储的消息丢失","slug":"_2、rabbitmq-server中存储的消息丢失","link":"#_2、rabbitmq-server中存储的消息丢失","children":[]},{"level":3,"title":"3、RabbitMQ Server到消费者消息丢失","slug":"_3、rabbitmq-server到消费者消息丢失","link":"#_3、rabbitmq-server到消费者消息丢失","children":[]}]},{"level":2,"title":"9、RabbitMQ如何保证消息不丢失？","slug":"_9、rabbitmq如何保证消息不丢失","link":"#_9、rabbitmq如何保证消息不丢失","children":[{"level":3,"title":"1、生产者发送消息RabbitMQ Server 消息丢失解决方案","slug":"_1、生产者发送消息rabbitmq-server-消息丢失解决方案","link":"#_1、生产者发送消息rabbitmq-server-消息丢失解决方案","children":[]},{"level":3,"title":"2、RabbitMQ Server中存储的消息丢失解决方案","slug":"_2、rabbitmq-server中存储的消息丢失解决方案","link":"#_2、rabbitmq-server中存储的消息丢失解决方案","children":[]},{"level":3,"title":"3、RabbitMQ Server到消费者消息丢失解决方案","slug":"_3、rabbitmq-server到消费者消息丢失解决方案","link":"#_3、rabbitmq-server到消费者消息丢失解决方案","children":[]}]},{"level":2,"title":"10、RabbitMQ消息基于什么传输？","slug":"_10、rabbitmq消息基于什么传输","link":"#_10、rabbitmq消息基于什么传输","children":[]},{"level":2,"title":"11、RabbitMQ支持消息的幂等性吗？","slug":"_11、rabbitmq支持消息的幂等性吗","link":"#_11、rabbitmq支持消息的幂等性吗","children":[]},{"level":2,"title":"12、RabbitMQ怎么确保消息已被消费？","slug":"_12、rabbitmq怎么确保消息已被消费","link":"#_12、rabbitmq怎么确保消息已被消费","children":[]},{"level":2,"title":"13、RabbitMQ支持事务消息吗？","slug":"_13、rabbitmq支持事务消息吗","link":"#_13、rabbitmq支持事务消息吗","children":[]},{"level":2,"title":"14、RabbitMQ消息持久化的条件？","slug":"_14、rabbitmq消息持久化的条件","link":"#_14、rabbitmq消息持久化的条件","children":[]},{"level":2,"title":"15、RabiitMQ消息什么情况下会变成死信消息？","slug":"_15、rabiitmq消息什么情况下会变成死信消息","link":"#_15、rabiitmq消息什么情况下会变成死信消息","children":[]},{"level":2,"title":"16、RabbitMQ死信消息的来源？","slug":"_16、rabbitmq死信消息的来源","link":"#_16、rabbitmq死信消息的来源","children":[]},{"level":2,"title":"17、RabbitMQ死信队列的用处？","slug":"_17、rabbitmq死信队列的用处","link":"#_17、rabbitmq死信队列的用处","children":[]},{"level":2,"title":"18、RabbitMQ支持延迟队列吗？","slug":"_18、rabbitmq支持延迟队列吗","link":"#_18、rabbitmq支持延迟队列吗","children":[]},{"level":2,"title":"19、RabbitMQ延迟队列的使用场景","slug":"_19、rabbitmq延迟队列的使用场景","link":"#_19、rabbitmq延迟队列的使用场景","children":[]},{"level":2,"title":"20、RabbitMQ实现延迟队列的有什么条件？","slug":"_20、rabbitmq实现延迟队列的有什么条件","link":"#_20、rabbitmq实现延迟队列的有什么条件","children":[]},{"level":2,"title":"21、RabbitMQ怎么实现优先级队列？","slug":"_21、rabbitmq怎么实现优先级队列","link":"#_21、rabbitmq怎么实现优先级队列","children":[]},{"level":2,"title":"22、哪些情况下推荐使用RabbitMQ的惰性队列","slug":"_22、哪些情况下推荐使用rabbitmq的惰性队列","link":"#_22、哪些情况下推荐使用rabbitmq的惰性队列","children":[]},{"level":2,"title":"23、RabbitMQ如何处理消息堆积情况？","slug":"_23、rabbitmq如何处理消息堆积情况","link":"#_23、rabbitmq如何处理消息堆积情况","children":[]},{"level":2,"title":"24、RabbitMQ如何处理消息堆积过程中丢失的数据？","slug":"_24、rabbitmq如何处理消息堆积过程中丢失的数据","link":"#_24、rabbitmq如何处理消息堆积过程中丢失的数据","children":[]},{"level":2,"title":"25、RabbitMQ如何处理长时间未处理导致写满的情况？","slug":"_25、rabbitmq如何处理长时间未处理导致写满的情况","link":"#_25、rabbitmq如何处理长时间未处理导致写满的情况","children":[]},{"level":2,"title":"26、如何设计一个消息队列？","slug":"_26、如何设计一个消息队列","link":"#_26、如何设计一个消息队列","children":[]}],"git":{"createdTime":1695295148000,"updatedTime":1695295148000,"contributors":[{"name":"javaxiaobear","email":"2861184805@qq.com","commits":1}]},"readingTime":{"minutes":22.27,"words":6681},"filePathRelative":"interview/distributed/RabbitMQ.md","localizedDate":"2023年9月21日","copyright":{"author":"小熊学Java"},"autoDesc":true,"excerpt":""}');export{e as data};
