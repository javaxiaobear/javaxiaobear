import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e as t}from"./app-f55ccf80.js";const e="/assets/image-20210903140657163-72064a72.png",p="/assets/image-20210903141017502-17465eac.png",o="/assets/image-20210903141124911-3600ff35.png",i="/assets/image-20210903141204799-5db7f3ef.png",l="/assets/image-20210903141445870-f2d41d70.png",c="/assets/image-20210903141658199-f1468bc2.png",r="/assets/image-20210903141749830-50a8f5db.png",u="/assets/image-20210903141844185-82379430.png",d={},k=t(`<blockquote><p>把整个流程分成三个阶段：<strong>准备阶段——&gt; 匹配阶段——&gt;执行阶段</strong></p></blockquote><h3 id="准备阶段" tabindex="-1"><a class="header-anchor" href="#准备阶段" aria-hidden="true">#</a> <strong>准备阶段</strong></h3><ol><li><p>在 Web 容器第一次用到 DispatcherServlet 的时候，会创建其对象并执行 init 方法</p></li><li><p>init 方法内会创建 Spring Web 容器，并调用容器 refresh 方法</p></li><li><p>refresh 过程中会创建并初始化 SpringMVC 中的重要组件， 例如 MultipartResolver，HandlerMapping，HandlerAdapter，HandlerExceptionResolver、ViewResolver 等</p><p>DispatcherServlet源码分析</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onRefresh</span><span class="token punctuation">(</span><span class="token class-name">ApplicationContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">initStrategies</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initStrategies</span><span class="token punctuation">(</span><span class="token class-name">ApplicationContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//初始化多部 请求解析器，没有默认的实现</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">initMultipartResolver</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//初始化地域解析器,默认的实现为AcceptHeaderLocaleResolver</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">initLocaleResolver</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//初始化主题解析器，默认的实现为FixedThemeResolver</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">initThemeResolver</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//初始化处理器映射器，这是一个集合，默认的实现为 BeanNameUrlHandlerMapping</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">initHandlerMappings</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//初始化处理器适配器，这也是一个集合，默认的实现有HttpRequestHandlerAdapter、SimpleControllerHandlerAdapter</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">initHandlerAdapters</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//初始化异常解析器，也是一个集合</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">initHandlerExceptionResolvers</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//初始化请求到视图名解析器，默认的实现为DefaultRequestToViewNameTranslator</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">initRequestToViewNameTranslator</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//初始化视图解析器，也是一个集合，InternalResourceViewResolver</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">initViewResolvers</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">initFlashMapManager</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>容器初始化后，会将上一步初始化好的重要组件，赋值给 DispatcherServlet 的成员变量，留待后用</p></li></ol><img src="`+e+'" alt="image-20210903140657163" style="zoom:80%;"><h3 id="匹配阶段" tabindex="-1"><a class="header-anchor" href="#匹配阶段" aria-hidden="true">#</a> <strong>匹配阶段</strong></h3><ol><li><p>用户发送的请求统一到达前端控制器 DispatcherServlet</p></li><li><p>DispatcherServlet 遍历所有 HandlerMapping ，找到与路径匹配的处理器</p><p>① HandlerMapping 有多个，每个 HandlerMapping 会返回不同的处理器对象，谁先匹配，返回谁的处理器。其中能识别 @RequestMapping 的优先级最高</p><p>② 对应 @RequestMapping 的处理器是 HandlerMethod，它包含了控制器对象和控制器方法信息</p><p>③ 其中路径与处理器的映射关系在 HandlerMapping 初始化时就会建立好</p></li></ol><img src="'+p+'" alt="image-20210903141017502" style="zoom:80%;"><ol start="3"><li>将 HandlerMethod 连同匹配到的拦截器，生成调用链对象 HandlerExecutionChain 返回</li></ol><img src="'+o+'" alt="image-20210903141124911" style="zoom:80%;"><ol start="4"><li>遍历HandlerAdapter 处理器适配器，找到能处理 HandlerMethod 的适配器对象，开始调用</li></ol><img src="'+i+'" alt="image-20210903141204799" style="zoom:80%;"><h3 id="调用阶段" tabindex="-1"><a class="header-anchor" href="#调用阶段" aria-hidden="true">#</a> <strong>调用阶段</strong></h3><ol><li>执行拦截器 preHandle</li></ol><img src="'+l+'" alt="image-20210903141445870" style="zoom:67%;"><ol start="2"><li><p>由 HandlerAdapter 调用 HandlerMethod</p><p>① 调用前处理不同类型的参数</p><p>② 调用后处理不同类型的返回值</p></li></ol><img src="'+c+'" alt="image-20210903141658199" style="zoom:67%;"><ol start="3"><li><p>第 2 步没有异常</p><p>① 返回 ModelAndView</p><p>② 执行拦截器 postHandle 方法</p><p>③ 解析视图，得到 View 对象，进行视图渲染</p></li></ol><img src="'+r+'" alt="image-20210903141749830" style="zoom:67%;"><ol start="4"><li>第 2 步有异常，进入 HandlerExceptionResolver 异常处理流程</li></ol><img src="'+u+'" alt="image-20210903141844185" style="zoom:67%;"><ol start="5"><li><p>最后都会执行拦截器的 afterCompletion 方法</p></li><li><p>如果控制器方法标注了 @ResponseBody 注解，则在第 2 步，就会生成 json 结果，并标记 ModelAndView 已处理，这样就不会执行第 3 步的视图渲染</p></li></ol>',21),m=[k];function v(g,h){return s(),a("div",null,m)}const _=n(d,[["render",v],["__file","Spring-MVC-execution-flow.html.vue"]]);export{_ as default};
