import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e}from"./app-f55ccf80.js";const p={},t=e(`<h3 id="_1、平衡树-查找树" tabindex="-1"><a class="header-anchor" href="#_1、平衡树-查找树" aria-hidden="true">#</a> 1、平衡树--查找树</h3><h4 id="_1、查找树的定义" tabindex="-1"><a class="header-anchor" href="#_1、查找树的定义" aria-hidden="true">#</a> 1、查找树的定义</h4><blockquote><p>一棵2-3查找树要么为空，要么满足满足下面两个要求：</p><ul><li><p>2-结点</p><p>含有一个键(及其对应的值)和两条链，左链接指向2-3树中的键都小于该结点，右链接指向的2-3树中的键都大于该结点。</p></li><li><p>3-结点</p><p>含有两个键(及其对应的值)和三条链，左链接指向的2-3树中的键都小于该结点，中链接指向的2-3树中的键都位于该结点的两个键之间，右链接指向的2-3树中的键都大于该结点。</p></li></ul></blockquote><h4 id="_2、查找树的操作" tabindex="-1"><a class="header-anchor" href="#_2、查找树的操作" aria-hidden="true">#</a> 2、查找树的操作</h4><h5 id="_1、查找" tabindex="-1"><a class="header-anchor" href="#_1、查找" aria-hidden="true">#</a> 1、查找</h5><blockquote><p>将二叉查找树的查找算法一般化我们就能够直接得到2-3树的查找算法。要判断一个键是否在树中，我们先将它和根结点中的键比较。如果它和其中任意一个相等，查找命中；否则我们就根据比较的结果找到指向相应区间的连接，并在其指向的子树中递归地继续查找。如果这个是空链接，查找未命中。</p></blockquote><h5 id="_2、插入" tabindex="-1"><a class="header-anchor" href="#_2、插入" aria-hidden="true">#</a> 2、插入</h5><h6 id="_1、向2-结点中插入新键" tabindex="-1"><a class="header-anchor" href="#_1、向2-结点中插入新键" aria-hidden="true">#</a> 1、向2-结点中插入新键</h6><blockquote><p>往2-3树中插入元素和往二叉查找树中插入元素一样，首先要进行查找，然后将节点挂到未找到的节点上。2-3树之所以能够保证在最差的情况下的效率的原因在于其插入之后仍然能够保持平衡状态。如果查找后未找到的节点是一个2-结点，那么很容易，我们只需要将新的元素放到这个2-结点里面使其变成一个3-结点即可。但是如果查找的节点结束于一个3-结点，那么可能有点烦。</p></blockquote><h6 id="_2、向一棵只含有一个3-结点的树中插入新键" tabindex="-1"><a class="header-anchor" href="#_2、向一棵只含有一个3-结点的树中插入新键" aria-hidden="true">#</a> 2、向一棵只含有一个3-结点的树中插入新键</h6><blockquote><p>假设2-3树只包含一个3-结点，这个结点有两个键，没有空间来插入第三个键了，最自然的方式是我们假设这个结点能存放三个元素，暂时使其变成一个4-结点，同时他包含四条链接。然后，我们将这个4-结点的中间元素提升，左边的键作为其左子结点，右边的键作为其右子结点。插入完成，变为平衡2-3查找树，树的高度从0变为1。</p></blockquote><h6 id="_3、向一个父结点为2-结点的3-结点中插入新键" tabindex="-1"><a class="header-anchor" href="#_3、向一个父结点为2-结点的3-结点中插入新键" aria-hidden="true">#</a> 3、向一个父结点为2-结点的3-结点中插入新键</h6><blockquote><p>和上面的情况一样一样，我们也可以将新的元素插入到3-结点中，使其成为一个临时的4-结点，然后，将该结点中的中间元素提升到父结点即2-结点中，使其父结点成为一个3-结点，然后将左右结点分别挂在这个3-结点的恰当位置。</p></blockquote><h6 id="_4、向一个父结点为3-结点的3-结点中插入新键" tabindex="-1"><a class="header-anchor" href="#_4、向一个父结点为3-结点的3-结点中插入新键" aria-hidden="true">#</a> 4、向一个父结点为3-结点的3-结点中插入新键</h6><blockquote><p>当我们插入的结点是3-结点的时候，我们将该结点拆分，中间元素提升至父结点，但是此时父结点是一个3-结点，插入之后，父结点变成了4-结点，然后继续将中间元素提升至其父结点，直至遇到一个父结点是2-结点，然后将其变为3-结点，不需要继续进行拆分。</p></blockquote><h6 id="_5、分解根结点" tabindex="-1"><a class="header-anchor" href="#_5、分解根结点" aria-hidden="true">#</a> 5、分解根结点</h6><blockquote><p>当插入结点到根结点的路径上全部是3-结点的时候，最终我们的根结点会编程一个临时的4-结点，此时，就需要将根结点拆分为两个2-结点，树的高度加1。</p></blockquote><h4 id="_3、树的性质" tabindex="-1"><a class="header-anchor" href="#_3、树的性质" aria-hidden="true">#</a> 3、树的性质</h4><h5 id="_1、2-3树的性质" tabindex="-1"><a class="header-anchor" href="#_1、2-3树的性质" aria-hidden="true">#</a> 1、2-3树的性质</h5><p>通过对2-3树插入操作的分析，我们发现在插入的时候，2-3树需要做一些局部的变换来保持2-3树的平衡。</p><blockquote><p>一棵完全平衡的2-3树具有以下性质：</p><ul><li><p>任意空链接到根结点的路径长度都是相等的。</p></li><li><p>4-结点变换为3-结点时，树的高度不会发生变化，只有当根结点是临时的4-结点，分解根结点时，树高+1。</p></li><li><p>2-3树与普通二叉查找树最大的区别在于，普通的二叉查找树是自顶向下生长，而2-3树是自底向上生长。</p></li></ul></blockquote><h4 id="_4、树的实现" tabindex="-1"><a class="header-anchor" href="#_4、树的实现" aria-hidden="true">#</a> 4、树的实现</h4><h5 id="_1、2-3的实现" tabindex="-1"><a class="header-anchor" href="#_1、2-3的实现" aria-hidden="true">#</a> 1、2-3的实现</h5><blockquote><p>直接实现2-3树比较复杂，因为：</p><ul><li>需要处理不同的结点类型，非常繁琐；</li><li>需要多次比较操作来将结点下移；</li><li>需要上移来拆分4-结点；</li><li>拆分4-结点的情况有很多种；</li></ul></blockquote><p>2-3查找树实现起来比较复杂，在某些情况插入后的平衡操作可能会使得效率降低。但是2-3查找树作为一种比较重要的概念和思路对于我们后面要讲到的红黑树、B树和B+树非常重要。</p><h3 id="_2、平衡树-红黑树" tabindex="-1"><a class="header-anchor" href="#_2、平衡树-红黑树" aria-hidden="true">#</a> 2、平衡树--红黑树</h3><p>我们前面介绍了2-3树，可以看到2-3树能保证在插入元素之后，树依然保持平衡状态，它的最坏情况下所有子结点都是2-结点，树的高度为lgN,相比于我们普通的二叉查找树，最坏情况下树的高度为N，确实保证了最坏情况下的时间复杂度，但是2-3树实现起来过于复杂，所以我们介绍一种2-3树思想的简单实现：红黑树。</p><blockquote><p>红黑树主要是对2-3树进行编码，红黑树背后的基本思想是用标准的二叉查找树(完全由2-结点构成)和一些额外的信 息(替换3-结点)来表示2-3树。我们将树中的链接分为两种类型：</p><ul><li>红链接：将两个2-结点连接起来构成一个3-结点</li><li>黑链接：2-3树中的普通链接</li></ul><p>我们将3-结点表示为由由一条左斜的红色链接(两个2-结点其中之一是另一个的左子结点)相连的两个2-结点。这种表示法的一个优点是，我们无需修改就可以直接使用标准的二叉查找树的get方法。</p></blockquote><h4 id="_1、红黑树的定义" tabindex="-1"><a class="header-anchor" href="#_1、红黑树的定义" aria-hidden="true">#</a> 1、红黑树的定义</h4><blockquote><p>红黑树是含有红黑链接并满足下列条件的二叉查找树：</p><ul><li>红链接均为左连接</li><li>没有任何一个节点同时和两条红链接相连</li><li>该树是完美黑色平衡的，即是任意空链接到根节点的路径上的黑链接数量相同</li></ul></blockquote><p>红黑树与2-3树的对应关系：</p><h4 id="_2、红黑树的api" tabindex="-1"><a class="header-anchor" href="#_2、红黑树的api" aria-hidden="true">#</a> 2、红黑树的API</h4><blockquote><p>因为每个结点都只会有一条指向自己的链接（从它的父结点指向它），我们可以在之前的Node结点中添加一个布尔类型的变量color来表示链接的颜色。如果指向它的链接是红色的，那么该变量的值为true，如果链接是黑色的，那么该变量的值为false。</p></blockquote><p>API设计</p><table><thead><tr><th>类名</th><th>Node&lt;Key,Value&gt;</th></tr></thead><tbody><tr><td>构造方法</td><td>Node(Key key, Value value, Node left, Node right，boolean color)：创建Node对象</td></tr><tr><td>成员变量</td><td>public Node left:记录左子结点<br>public Node right:记录右子结点<br>public Key key:存储键<br>public Value value:存储值<br>public boolean color:由其父结点指向它的链接的颜色</td></tr></tbody></table><h4 id="_3、平衡化" tabindex="-1"><a class="header-anchor" href="#_3、平衡化" aria-hidden="true">#</a> 3、平衡化</h4><blockquote><p>在对红黑树进行一些增删改查的操作后，很有可能会出现红色的右链接或者两条连续红色的链接，而这些都不满足红黑树的定义，所以我们需要对这些情况通过旋转进行修复，让红黑树保持平衡。</p></blockquote><h5 id="_1、左旋" tabindex="-1"><a class="header-anchor" href="#_1、左旋" aria-hidden="true">#</a> 1、左旋</h5><blockquote><p>当某个结点的左子结点为黑色，右子结点为红色，此时需要左旋。</p></blockquote><p><em>前提：当前结点为h，它的右子结点为x；</em></p><p><em>左旋过程：</em></p><ol><li><p>让x的左子结点变为h的右子结点：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>h<span class="token punctuation">.</span>right<span class="token operator">=</span>x<span class="token punctuation">.</span>left<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>让h成为x的左子结点：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>x<span class="token punctuation">.</span>left<span class="token operator">=</span>h<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>让h的color属性变为x的color属性值：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>x<span class="token punctuation">.</span>color<span class="token operator">=</span>h<span class="token punctuation">.</span>color<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>让h的color属性变为RED：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>h<span class="token punctuation">.</span>color<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><h5 id="_2、右旋" tabindex="-1"><a class="header-anchor" href="#_2、右旋" aria-hidden="true">#</a> 2、右旋</h5><blockquote><p>当某个结点的左子结点是红色，且左子结点的左子结点也是红色，需要右旋</p></blockquote><p><em>前提：当前结点为h，它的左子结点为x；</em></p><p><em>右旋过程：</em></p><ol><li><p>让x的右子结点成为h的左子结点：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>h<span class="token punctuation">.</span>left <span class="token operator">=</span> x<span class="token punctuation">.</span>right<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>让h成为x的右子结点：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>x<span class="token punctuation">.</span>right<span class="token operator">=</span>h<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>让x的color变为h的color属性值：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>x<span class="token punctuation">.</span>color <span class="token operator">=</span> h<span class="token punctuation">.</span>color<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>让h的color为RED；</p></li></ol><h4 id="_4、操作" tabindex="-1"><a class="header-anchor" href="#_4、操作" aria-hidden="true">#</a> 4、操作</h4><h5 id="_1、向单个2-结点中插入新键" tabindex="-1"><a class="header-anchor" href="#_1、向单个2-结点中插入新键" aria-hidden="true">#</a> 1、向单个2-结点中插入新键</h5><blockquote><p>一棵只含有一个键的红黑树只含有一个2-结点。插入另一个键后，我们马上就需要将他们旋转。</p></blockquote><ul><li><p>如果新键小于当前结点的键，我们只需要新增一个红色结点即可，新的红黑树和单个3-结点完全等价。</p></li><li><p>如果新键大于当前结点的键，那么新增的红色结点将会产生一条红色的右链接，此时我们需要通过左旋，把红色右链接变成左链接，插入操作才算完成。形成的新的红黑树依然和3-结点等价，其中含有两个键，一条红色链接。</p></li></ul><h5 id="_2、向底部的2-结点插入新键" tabindex="-1"><a class="header-anchor" href="#_2、向底部的2-结点插入新键" aria-hidden="true">#</a> 2、向底部的2-结点插入新键</h5><blockquote><p>用和二叉查找树相同的方式向一棵红黑树中插入一个新键，会在树的底部新增一个结点（可以保证有序性），唯一区别的地方是我们会用红链接将新结点和它的父结点相连。如果它的父结点是一个2-结点，那么刚才讨论的两种方式仍然适用。</p></blockquote><h5 id="_3、颜色反转" tabindex="-1"><a class="header-anchor" href="#_3、颜色反转" aria-hidden="true">#</a> 3、颜色反转</h5><blockquote><p>当一个结点的左子结点和右子结点的color都为RED时，也就是出现了临时的4-结点，此时只需要把左子结点和右子结点的颜色变为BLACK，同时让当前结点的颜色变为RED即可。</p></blockquote><h5 id="_4、向一棵双键树-即一个3-结点-中插入新键" tabindex="-1"><a class="header-anchor" href="#_4、向一棵双键树-即一个3-结点-中插入新键" aria-hidden="true">#</a> 4、向一棵双键树(即一个3-结点)中插入新键</h5><p>这种情况分为三种情况：</p><ol><li><p>新键大于原树中的两个键</p></li><li><p>新键小于原树中的两个键</p></li><li><p>新键介于原树中两个键之间</p></li></ol><h5 id="_5、根节点的颜色总是黑色" tabindex="-1"><a class="header-anchor" href="#_5、根节点的颜色总是黑色" aria-hidden="true">#</a> 5、根节点的颜色总是黑色</h5><blockquote><p>由于根结点不存在父结点，所以每次插入操作后，我们都需要把根结点的颜色设置为黑色。</p></blockquote><h5 id="_6、向树底部的3-结点插入新键" tabindex="-1"><a class="header-anchor" href="#_6、向树底部的3-结点插入新键" aria-hidden="true">#</a> 6、向树底部的3-结点插入新键</h5><blockquote><p>假设在树的底部的一个3-结点下加入一个新的结点。前面我们所讲的3种情况都会出现。指向新结点的链接可能是：</p><ul><li>3-结点的右链接（此时我们只需要转换颜色即可）</li><li>或是左链接(此时我们需要进行右旋转然后再转换)</li><li>或是中链接(此时需要先左旋转然后再右旋转，最后转换颜色)。</li></ul><p>颜色转换会使中间结点的颜色变红，相当于将它送入了父结点。这意味着父结点中继续插入一个新键，我们只需要使用相同的方法解决即可，直到遇到一个2-结点或者根结点为止。</p></blockquote><h4 id="_5、api的设计" tabindex="-1"><a class="header-anchor" href="#_5、api的设计" aria-hidden="true">#</a> 5、API的设计</h4><table><thead><tr><th>类名</th><th>RedBlackTree&lt;Key,Value&gt;</th></tr></thead><tbody><tr><td>构造方法</td><td>RedBlackTree()：创建RedBlackTree对象</td></tr><tr><td>成员方法</td><td>1.private boolean isRed(Node x)：判断当前结点的父指向链接是否为红色<br>2.private Node rotateLeft(Node h):左旋调整<br>3.private Node rotateRight(Node h):右旋调整<br>4.private void flipColors(Node h)：颜色反转,相当于完成拆分4-结点<br>5.public void put(Key key, Value val):在整个树上完成插入操作<br>6.private Node put(Node h, Key key, Value val):在指定树中，完成插入操作,并返回添加元素后<br>新的树<br>7.public Value get(Key key):根据key，从树中找出对应的值<br>8.private Value get(Node x, Key key):从指定的树x中，找出key对应的值<br>9.public int size():获取树中元素的个数</td></tr><tr><td>成员变量</td><td>1.private Node root : 记录根结点<br>2.private int N:记录树中元素的个数<br>3.private static final boolean RED：红色链接标识<br>4.private static final boolean BLACK:黑色链接标识</td></tr></tbody></table><h4 id="_6、代码实现" tabindex="-1"><a class="header-anchor" href="#_6、代码实现" aria-hidden="true">#</a> 6、代码实现</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedBlackTree</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Key</span> <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token punctuation">&lt;</span><span class="token class-name">Key</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span><span class="token class-name">Value</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 根结点
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">Node</span> root<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 元素个数
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 红链接
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token constant">RED</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 黑链接
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token constant">BLACK</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 判断当前结点的父指向链接是否为红色
     * <span class="token keyword">@param</span> <span class="token parameter">x</span>
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">isRed</span><span class="token punctuation">(</span><span class="token class-name">Node</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> x<span class="token punctuation">.</span>color <span class="token operator">==</span> <span class="token constant">RED</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 左旋调整
     * <span class="token keyword">@param</span> <span class="token parameter">h</span>
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">Node</span> <span class="token function">rotateLeft</span><span class="token punctuation">(</span><span class="token class-name">Node</span> h<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//找到当前节点的右子结点</span>
        <span class="token class-name">Node</span> rightNode <span class="token operator">=</span> h<span class="token punctuation">.</span>right<span class="token punctuation">;</span>
        <span class="token comment">//找到右子结点的左子结点</span>
        <span class="token class-name">Node</span> left <span class="token operator">=</span> rightNode<span class="token punctuation">.</span>left<span class="token punctuation">;</span>
        <span class="token comment">//让当前结点h的右子结点的左子结点成为当前结点的右子结点</span>
        h<span class="token punctuation">.</span>right <span class="token operator">=</span> left<span class="token punctuation">;</span>
        <span class="token comment">//让当前节点h变为rightNode的左子节点</span>
        rightNode<span class="token punctuation">.</span>left <span class="token operator">=</span> h<span class="token punctuation">;</span>
        <span class="token comment">//让当前结点h的color变成右子结点的color</span>
        rightNode<span class="token punctuation">.</span>color <span class="token operator">=</span> h<span class="token punctuation">.</span>color<span class="token punctuation">;</span>
        <span class="token comment">//让当前结点的color变成RED</span>
        h<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token constant">RED</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> rightNode<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 右旋调整
     * <span class="token keyword">@param</span> <span class="token parameter">h</span>
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">Node</span> <span class="token function">rotateRight</span><span class="token punctuation">(</span><span class="token class-name">Node</span> h<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//找到当前结点的左子结点</span>
        <span class="token class-name">Node</span> leftNode <span class="token operator">=</span> h<span class="token punctuation">.</span>left<span class="token punctuation">;</span>
        <span class="token comment">//找到leftNode的右子结点</span>
        <span class="token class-name">Node</span> right <span class="token operator">=</span> leftNode<span class="token punctuation">.</span>right<span class="token punctuation">;</span>
        <span class="token comment">//让right变成当前结点的左子结点</span>
        h<span class="token punctuation">.</span>left <span class="token operator">=</span> right<span class="token punctuation">;</span>
        <span class="token comment">//让当前节点变为leftNode的右子结点</span>
        leftNode<span class="token punctuation">.</span>right <span class="token operator">=</span> h<span class="token punctuation">;</span>
        <span class="token comment">//让当前结点h的color值变为左子结点的color值</span>
        leftNode<span class="token punctuation">.</span>color <span class="token operator">=</span> h<span class="token punctuation">.</span>color<span class="token punctuation">;</span>
        <span class="token comment">//让当前结点的color变为RED</span>
        h<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token constant">RED</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> leftNode<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 颜色反转,相当于完成拆分4-结点
     * <span class="token keyword">@param</span> <span class="token parameter">h</span>
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">flipColors</span><span class="token punctuation">(</span><span class="token class-name">Node</span> h<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//当前结点变为RED</span>
        h<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token constant">RED</span><span class="token punctuation">;</span>
        <span class="token comment">//左右子结点的color变为BLACK</span>
        h<span class="token punctuation">.</span>left<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token constant">BLACK</span><span class="token punctuation">;</span>
        h<span class="token punctuation">.</span>right<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token constant">BLACK</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 在整个树上完成插入操作
     * <span class="token keyword">@param</span> <span class="token parameter">key</span>
     * <span class="token keyword">@param</span> <span class="token parameter">val</span>
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">Key</span> key<span class="token punctuation">,</span> <span class="token class-name">Value</span> val<span class="token punctuation">)</span><span class="token punctuation">{</span>
        root <span class="token operator">=</span> <span class="token function">put</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span>key<span class="token punctuation">,</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//让根节点颜色变为BLACK</span>
        root<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token constant">BLACK</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 在指定树中，完成插入操作,并返回添加元素后新的树
     * <span class="token keyword">@param</span> <span class="token parameter">h</span>
     * <span class="token keyword">@param</span> <span class="token parameter">key</span>
     * <span class="token keyword">@param</span> <span class="token parameter">val</span>
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">Node</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">Node</span> h<span class="token punctuation">,</span> <span class="token class-name">Key</span> key<span class="token punctuation">,</span> <span class="token class-name">Value</span> val<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//根结点</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>h <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            size<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span>key<span class="token punctuation">,</span>val<span class="token punctuation">,</span><span class="token constant">RED</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//比较当前节点的键与key</span>
        <span class="token keyword">int</span> compare <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>compare <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment">//往左子结点插入</span>
            h<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">put</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>left<span class="token punctuation">,</span>key<span class="token punctuation">,</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>compare <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment">//往右子结点插入</span>
            h<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">put</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>right<span class="token punctuation">,</span>key<span class="token punctuation">,</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">//更新值</span>
            h<span class="token punctuation">.</span>value <span class="token operator">=</span> val<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//如果当前结点的右链接是红色，左链接为黑色，需要左旋</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isRed</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isRed</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            h <span class="token operator">=</span> <span class="token function">rotateLeft</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//如果当前节点的左子结点以及左子结点的左子结点都是红链接，需要右旋</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isRed</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isRed</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>right<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            h <span class="token operator">=</span> <span class="token function">rotateRight</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//颜色变换：当前节点的左右子结点都是红链接</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isRed</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isRed</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token function">flipColors</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> h<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 根据key，从树中找出对应的值
     * <span class="token keyword">@param</span> <span class="token parameter">key</span>
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">Value</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Key</span> key<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">get</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 从指定的树x中，找出key对应的值
     * <span class="token keyword">@param</span> <span class="token parameter">x</span>
     * <span class="token keyword">@param</span> <span class="token parameter">key</span>
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">Value</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Node</span> x<span class="token punctuation">,</span> <span class="token class-name">Key</span> key<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">int</span> compare <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">&gt;</span> compare<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token function">get</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>left<span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">&lt;</span> compare<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token function">get</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>right<span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> x<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 获取树中元素的个数
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> size<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token doc-comment comment">/**
     * 结点类
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token class-name">Node</span> left<span class="token punctuation">;</span>
        <span class="token keyword">public</span> <span class="token class-name">Node</span> right<span class="token punctuation">;</span>
        <span class="token keyword">public</span> <span class="token class-name">Key</span> key<span class="token punctuation">;</span>
        <span class="token keyword">public</span> <span class="token class-name">Value</span> value<span class="token punctuation">;</span>
        <span class="token keyword">public</span> <span class="token keyword">boolean</span> color<span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token class-name">Node</span> left<span class="token punctuation">,</span> <span class="token class-name">Node</span> right<span class="token punctuation">,</span> <span class="token class-name">Key</span> key<span class="token punctuation">,</span> <span class="token class-name">Value</span> value<span class="token punctuation">,</span> <span class="token keyword">boolean</span> color<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">=</span> left<span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">=</span> right<span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>测试类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedBlackTreeTest</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">RedBlackTree</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> tree <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedBlackTree</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        tree<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&quot;1111&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        tree<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">&quot;2222&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        tree<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">&quot;3333&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        tree<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">&quot;4444&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>tree<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        tree<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">&quot;666666&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>tree<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_3、b-树" tabindex="-1"><a class="header-anchor" href="#_3、b-树" aria-hidden="true">#</a> 3、B-树</h3><blockquote><p>前面我们已经学习了二叉查找树、2-3树以及它的实现红黑树。2-3树中，一个结点做多能有两个key，它的实现红黑树中使用对链接染色的方式去表达这两个key。接下来我们学习另外一种树型结构B树，这种数据结构中，一个结点允许多于两个key的存在。</p><p>B树是一种树状数据结构，它能够存储数据、对其进行排序并允许以O(logn)的时间复杂度进行查找、顺序读取、插入和删除等操作。</p></blockquote><h4 id="_1、b-树的特性" tabindex="-1"><a class="header-anchor" href="#_1、b-树的特性" aria-hidden="true">#</a> 1、B-树的特性</h4><blockquote><p>B树中允许一个结点中包含多个key，可以是3个、4个、5个甚至更多，并不确定，需要看具体的实现。现在我们选择一个参数M，来构造一个B树，我们可以把它称作是M阶的B树，那么该树会具有如下特点：</p><ul><li>每个结点最多有M-1个Key，并且升序排列</li><li>每个结点最多有M个子结点</li><li>根节点至少有两个子结点</li></ul></blockquote><p>在实际应用中B树的阶数一般都比较大（通常大于100），所以，即使存储大量的数据，B树的高度仍然比较小，这样在某些应用场景下，就可以体现出它的优势。</p><h4 id="_2、b-树存储数据" tabindex="-1"><a class="header-anchor" href="#_2、b-树存储数据" aria-hidden="true">#</a> 2、B-树存储数据</h4><p>若参数M选择为5，那么每个结点最多包含4个键值对，我们以5阶B树为例，看看B树的数据存储。</p><h4 id="_3、b树在磁盘文件中的应用" tabindex="-1"><a class="header-anchor" href="#_3、b树在磁盘文件中的应用" aria-hidden="true">#</a> 3、B树在磁盘文件中的应用</h4><blockquote><p>在我们的程序中，不可避免的需要通过IO操作文件，而我们的文件是存储在磁盘上的。计算机操作磁盘上的文件是通过文件系统进行操作的，在文件系统中就使用到了B树这种数据结构。</p></blockquote><h5 id="_1、磁盘" tabindex="-1"><a class="header-anchor" href="#_1、磁盘" aria-hidden="true">#</a> 1、磁盘</h5><blockquote><p>磁盘能够保存大量的数据，从GB一直到TB级，但是 他的读取速度比较慢，因为涉及到机器操作，读取速度为毫秒级 。</p></blockquote><p>磁盘由盘片构成,每个盘片有两面，又称为盘面 。盘片中央有一个可以旋转的主轴，他使得盘片以固定的旋转速率旋转，通常是5400rpm或者是7200rpm,一个磁盘中包含了多个这样的盘片并封装在一个密封的容器内 。盘片的每个表面是由一组称为磁道同心圆组成的 ，每个磁道被划分为了一组扇区 ，每个扇区包含相等数量的数据位，通常是512个子节，扇区之间由一些间隙隔开,这些间隙中不存储数据 。</p><h5 id="_2、磁盘io" tabindex="-1"><a class="header-anchor" href="#_2、磁盘io" aria-hidden="true">#</a> 2、磁盘IO</h5><blockquote><p>磁盘用磁头来读写存储在盘片表面的位，而磁头连接到一个移动臂上，移动臂沿着盘片半径前后移动，可以将磁头定位到任何磁道上，这称之为寻道操作。一旦定位到磁道后，盘片转动，磁道上的每个位经过磁头时，读写磁头就可以感知到该位的值，也可以修改值。对磁盘的访问时间分为 寻道时间，旋转时间，以及传送时间。</p></blockquote><p>由于存储介质的特性，磁盘本身存取就比主存慢很多，再加上机械运动耗费，因此为了提高效率，要尽量减少磁盘I/O，减少读写操作。 为了达到这个目的，磁盘往往不是严格按需读取，而是每次都会预读，即使只需要一个字节，磁盘也会从这个位置开始，顺序向后读取一定长度的数据放入内存。这样做的理论依据是计算机科学中著名的局部性原理：当一个数据被用到时，其附近的数据也通常会马上被使用。由于磁盘顺序读取的效率很高（不需要寻道时间，只需很少的旋转时间），因此预读可以提高I/O效率。</p><blockquote><p>页是计算机管理存储器的逻辑块，硬件及操作系统往往将主存和磁盘存储区分割为连续的大小相等的块，每个存储块称为一页（1024个字节或其整数倍），预读的长度一般为页的整倍数。主存和磁盘以页为单位交换数据。当程序要读取的数据不在主存中时，会触发一个缺页异常，此时系统会向磁盘发出读盘信号，磁盘会找到数据的起始位置并向后连续读取一页或几页载入内存中，然后异常返回，程序继续运行。</p></blockquote><blockquote><p>文件系统的设计者利用了磁盘预读原理，将一个结点的大小设为等于一个页（1024个字节或其整数倍），这样每个结点只需要一次I/O就可以完全载入。那么3层的B树可以容纳102410241024差不多10亿个数据，如果换成二叉查找树，则需要30层！假定操作系统一次读取一个节点，并且根节点保留在内存中，那么B树在10亿个数据中查找目标值，只需要小于3次硬盘读取就可以找到目标值，但红黑树需要小于30次，因此B树大大提高了IO的操作效率。</p></blockquote><h3 id="_4、b-树" tabindex="-1"><a class="header-anchor" href="#_4、b-树" aria-hidden="true">#</a> 4、B+树</h3><blockquote><p>B+树是对B树的一种变形树，它与B树的差异在于：</p><ol><li>非叶结点仅具有索引作用，也就是说，非叶子结点只存储key，不存储value；</li><li>树的所有叶结点构成一个有序链表，可以按照key排序的次序遍历全部数据。</li></ol></blockquote><h4 id="_1、b-树存储数据" tabindex="-1"><a class="header-anchor" href="#_1、b-树存储数据" aria-hidden="true">#</a> 1、B+树存储数据</h4><blockquote><p>若参数M选择为5，那么每个结点最多包含4个键值对，我们以5阶B+树为例，看看B+树的数据存储。</p></blockquote><h4 id="_2、b-树和b树的对比" tabindex="-1"><a class="header-anchor" href="#_2、b-树和b树的对比" aria-hidden="true">#</a> 2、B+树和B树的对比</h4><p>B+ 树的优点</p><blockquote><p>由于B+树在非叶子结点上不包含真正的数据，只当做索引使用，因此在内存相同的情况下，能够存放更多的key。 2.B+树的叶子结点都是相连的，因此对整棵树的遍历只需要一次线性遍历叶子结点即可。而且由于数据顺序排列并且相连，所以便于区间查找和搜索。而B树则需要进行每一层的递归遍历。</p></blockquote><p>B树的优点</p><blockquote><p>由于B树的每一个节点都包含key和value，因此我们根据key查找value时，只需要找到key所在的位置，就能找到value，但B+树只有叶子结点存储数据，索引每一次查找，都必须一次一次，一直找到树的最大深度处，也就是叶子结点的深度，才能找到value。</p></blockquote><h4 id="_3、b-树在数据库中的应用" tabindex="-1"><a class="header-anchor" href="#_3、b-树在数据库中的应用" aria-hidden="true">#</a> 3、B+树在数据库中的应用</h4><blockquote><p>在数据库的操作中，查询操作可以说是最频繁的一种操作，因此在设计数据库时，必须要考虑到查询的效率问题，在很多数据库中，都是用到了B+树来提高查询的效率； 在操作数据库时，我们为了提高查询效率，可以基于某张表的某个字段建立索引，就可以提高查询效率，那其实这个索引就是B+树这种数据结构实现的。</p></blockquote><h5 id="_1、未建立主键索引查询" tabindex="-1"><a class="header-anchor" href="#_1、未建立主键索引查询" aria-hidden="true">#</a> 1、未建立主键索引查询</h5><p>执行</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">18</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>需要从第一条数据开始，一直查询到第6条，发现id=18，此时才能查询出目标结果，共需要比较6次；</p><h5 id="_2、建立主键索引查询" tabindex="-1"><a class="header-anchor" href="#_2、建立主键索引查询" aria-hidden="true">#</a> 2、建立主键索引查询</h5><h5 id="_3、区间查询" tabindex="-1"><a class="header-anchor" href="#_3、区间查询" aria-hidden="true">#</a> 3、区间查询</h5><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">where</span> id<span class="token operator">&gt;=</span><span class="token number">12</span> <span class="token operator">and</span> id<span class="token operator">&lt;=</span><span class="token number">18</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果有了索引，由于B+树的叶子结点形成了一个有序链表，所以我们只需要找到id为12的叶子结点，按照遍历链表的方式顺序往后查即可，效率非常高。</p>`,103),o=[t];function c(l,i){return s(),a("div",null,o)}const d=n(p,[["render",c],["__file","Treeadvancement.html.vue"]]);export{d as default};
