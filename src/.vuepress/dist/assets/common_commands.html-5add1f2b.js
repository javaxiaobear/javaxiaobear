import{_ as r}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o as n,c as s,a as e,b as d,d as l,e as i}from"./app-f55ccf80.js";const c="/assets/image-20220409211128203-03cfd361.png",o="/assets/image-20220409211628931-e1fbc6f6.png",u="/assets/image-20220409212552970-1d5a4e9d.png",v="/assets/image-20220409224855550-075a976f.png",m="/assets/image-20220409231225018-010c561c.png",b="/assets/image-20220410154448928-7623ba86.png",h="/assets/image-20220410190930000-bc03d7b1.png",p={},x=i(`<h3 id="_1、帮助类启动命令" tabindex="-1"><a class="header-anchor" href="#_1、帮助类启动命令" aria-hidden="true">#</a> 1、帮助类启动命令</h3><ul><li>启动docker： systemctl start docker</li><li>停止docker： systemctl stop docker</li><li>重启docker： systemctl restart docker</li><li>查看docker状态： systemctl status docker</li><li>开机启动： systemctl enable docker</li><li>查看docker概要信息： docker info</li><li>查看docker总体帮助文档： docker --help</li><li>查看docker命令帮助文档： docker 具体命令 --help</li></ul><h3 id="_2、镜像命令" tabindex="-1"><a class="header-anchor" href="#_2、镜像命令" aria-hidden="true">#</a> 2、镜像命令</h3><h4 id="_1、列出本地主机上的镜像" tabindex="-1"><a class="header-anchor" href="#_1、列出本地主机上的镜像" aria-hidden="true">#</a> 1、列出本地主机上的镜像</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker images
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+c+`" alt="image-20220409211128203" loading="lazy"></p><p>各个选项说明:</p><ul><li>REPOSITORY：表示镜像的仓库源</li><li>TAG：镜像的标签版本号</li><li>IMAGE ID：镜像ID</li><li>CREATED：镜像创建时间</li><li>SIZE：镜像大小</li></ul><blockquote><p>同一仓库源可以有多个 TAG版本，代表这个仓库源的不同个版本，我们使用 REPOSITORY:TAG 来定义不同的镜像。 如果你不指定一个镜像的版本标签，例如你只使用 ubuntu，docker 将默认使用 ubuntu:latest 镜像</p></blockquote><p>OPTIONS说明：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>-a :列出本地所有的镜像（含历史映像层）
docker ../../images -a

-q :只显示镜像ID。
docker ../../images -q
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2、搜索镜像" tabindex="-1"><a class="header-anchor" href="#_2、搜索镜像" aria-hidden="true">#</a> 2、搜索镜像</h4>`,12),g={href:"https://hub.docker.com/",target:"_blank",rel:"noopener noreferrer"},k=i(`<p>命令</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker search [OPTIONS] 镜像名字
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[root@docker ~]## docker search mysql
NAME                             DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED
mysql                            MySQL is a widely used, open-source relation…   12378     [OK]       
mariadb                          MariaDB Server is a high performing open sou…   4762      [OK]       
mysql/mysql-server               Optimized MySQL Server Docker ../../images. Create…   917                  [OK]
percona                          Percona Server is a fork of the MySQL relati…   572       [OK]       
phpmyadmin                       phpMyAdmin - A web interface for MySQL and M…   494       [OK]       
mysql/mysql-cluster              Experimental MySQL Cluster Docker ../../images. Cr…   93                   
centos/mysql-57-centos7          MySQL 5.7 SQL database server                   92                   
bitnami/mysql                    Bitnami MySQL Docker Image                      68                   [OK]
ubuntu/mysql                     MySQL open source fast, stable, multi-thread…   29                   
circleci/mysql                   MySQL is a widely used, open-source relation…   25                   
mysql/mysql-router               MySQL Router provides transparent routing be…   23                   
centos/mysql-56-centos7          MySQL 5.6 SQL database server                   22                   
google/mysql                     MySQL server for Google Compute Engine          21                   [OK]
vmware/harbor-db                 Mysql container for Harbor                      10                   
mysqlboy/docker-mydumper         docker-mydumper containerizes MySQL logical …   3                    
mysqlboy/mydumper                mydumper for mysql logcial backups              3                    
bitnami/mysqld-exporter                                                          2                    
ibmcom/mysql-s390x               Docker image for mysql-s390x                    2                    
mysql/mysql-operator             MySQL Operator for Kubernetes                   0                    
ibmcom/tidb-ppc64le              TiDB is a distributed NewSQL database compat…   0                    
mysqlboy/elasticsearch                                                           0                    
mysqleatmydata/mysql-eatmydata                                                   0                    
cimg/mysql                                                                       0                    
mysql/ndb-operator               MySQL NDB Operator for Kubernetes               0                    
mirantis/mysql  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+o+`" alt="image-20220409211628931" loading="lazy"></p><h5 id="options说明" tabindex="-1"><a class="header-anchor" href="#options说明" aria-hidden="true">#</a> OPTIONS说明：</h5><ul><li>--limit : 只列出N个镜像，默认25个</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker search --limit 5 redis
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_3、拉取-下载-镜像" tabindex="-1"><a class="header-anchor" href="#_3、拉取-下载-镜像" aria-hidden="true">#</a> 3、拉取（下载）镜像</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker pull 某个XXX镜像名字
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p>docker pull 某个XXX镜像名字[:TAG]</p></li><li><p>docker pull 镜像名字</p><blockquote><ul><li>没有TAG就是最新版</li><li>等价于：docker pull 镜像名字:latest</li></ul></blockquote></li></ul><h4 id="_4、查看镜像" tabindex="-1"><a class="header-anchor" href="#_4、查看镜像" aria-hidden="true">#</a> 4、查看镜像</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker system df 查看镜像/容器/数据卷所占的空间
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[root@docker ~]## docker system df
TYPE            TOTAL     ACTIVE    SIZE      RECLAIMABLE
../../images          1         1         13.26kB   0B (0%)
Containers      1         0         0B        0B
Local Volumes   0         0         0B        0B
Build Cache     0         0         0B        0B
[root@docker ~]## 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5、删除镜像" tabindex="-1"><a class="header-anchor" href="#_5、删除镜像" aria-hidden="true">#</a> 5、删除镜像</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker rmi 某个XXX镜像名字ID
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_1、删除单个" tabindex="-1"><a class="header-anchor" href="#_1、删除单个" aria-hidden="true">#</a> 1、删除单个</h5><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker rmi  -f 镜像ID
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_2、删除多个" tabindex="-1"><a class="header-anchor" href="#_2、删除多个" aria-hidden="true">#</a> 2、删除多个</h5><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker rmi -f 镜像名1:TAG 镜像名2:TAG 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_3、删除全部" tabindex="-1"><a class="header-anchor" href="#_3、删除全部" aria-hidden="true">#</a> 3、删除全部</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker rmi -f $(docker ../../images -qa)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_6、面试题-谈谈docker虚悬镜像是什么" tabindex="-1"><a class="header-anchor" href="#_6、面试题-谈谈docker虚悬镜像是什么" aria-hidden="true">#</a> 6、面试题：谈谈docker虚悬镜像是什么？</h4><blockquote><p>仓库名、标签都是<code>&lt;none&gt;</code>的镜像，俗称虚悬镜像dangling image</p></blockquote><p><img src="`+u+'" alt="image-20220409212552970" loading="lazy"></p><h3 id="_3、容器命令" tabindex="-1"><a class="header-anchor" href="#_3、容器命令" aria-hidden="true">#</a> 3、容器命令</h3><blockquote><p>有镜像才能创建容器</p></blockquote><p><img src="'+v+`" alt="image-20220409224855550" loading="lazy"></p><p>本次用centos进行演示</p><h4 id="_1、新建-启动命令" tabindex="-1"><a class="header-anchor" href="#_1、新建-启动命令" aria-hidden="true">#</a> 1、新建+启动命令</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker run [OPTIONS] IMAGE [COMMAND] [ARG...]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>OPTIONS说明（常用）：有些是一个减号，有些是两个减号</p><p>--name=&quot;容器新名字&quot; 为容器指定一个名称； -d: 后台运行容器并返回容器ID，也即启动守护式容器(后台运行)；</p><p>-i：以交互模式运行容器，通常与 -t 同时使用； -t：为容器重新分配一个伪输入终端，通常与 -i 同时使用； 也即启动交互式容器(前台有伪终端，等待交互)；</p><p>-P: 随机端口映射，大写P -p: 指定端口映射，小写p</p><p><img src="`+m+'" alt="image-20220409231225018" loading="lazy"></p><p><img src="'+b+`" alt="image-20220410154448928" loading="lazy"></p><blockquote><p>#使用镜像centos:latest以交互模式启动一个容器,在容器内执行/bin/bash命令。</p></blockquote><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker run -it centos /bin/bash 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数说明： -i: 交互式操作。 -t: 终端。 centos : centos 镜像。 /bin/bash：放在镜像名后的是命令，这里我们希望有个交互式 Shell，因此用的是 /bin/bash。 要退出终端，直接输入 exit:</p><h4 id="_2、列出当前所有正在运行的容器" tabindex="-1"><a class="header-anchor" href="#_2、列出当前所有正在运行的容器" aria-hidden="true">#</a> 2、列出当前所有正在运行的容器</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker ps [OPTIONS]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>OPTIONS说明（常用）：</p><p>-a :列出当前所有正在运行的容器+历史上运行过的 -l :显示最近创建的容器。 -n：显示最近n个创建的容器。 -q :静默模式，只显示容器编号。</p></blockquote><h4 id="_3、退出容器" tabindex="-1"><a class="header-anchor" href="#_3、退出容器" aria-hidden="true">#</a> 3、退出容器</h4><h5 id="_1、exec退出" tabindex="-1"><a class="header-anchor" href="#_1、exec退出" aria-hidden="true">#</a> 1、<code>exec</code>退出</h5><blockquote><p>run进去容器，exit退出，容器停止</p></blockquote><h5 id="_2、ctrl-p-q" tabindex="-1"><a class="header-anchor" href="#_2、ctrl-p-q" aria-hidden="true">#</a> 2、<code>ctrl+p+q</code></h5><blockquote><p>run进去容器，ctrl+p+q退出，容器不停止</p></blockquote><h4 id="_4、启动已停止运行的容器" tabindex="-1"><a class="header-anchor" href="#_4、启动已停止运行的容器" aria-hidden="true">#</a> 4、启动已停止运行的容器</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker start 容器ID或者容器名
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_5、重启容器" tabindex="-1"><a class="header-anchor" href="#_5、重启容器" aria-hidden="true">#</a> 5、重启容器</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker restart 容器ID或者容器名
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_6、停止容器" tabindex="-1"><a class="header-anchor" href="#_6、停止容器" aria-hidden="true">#</a> 6、停止容器</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker stop 容器ID或者容器名
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_7、强制停止容器" tabindex="-1"><a class="header-anchor" href="#_7、强制停止容器" aria-hidden="true">#</a> 7、强制停止容器</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker kill 容器ID或容器名
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_8、删除已停止的容器" tabindex="-1"><a class="header-anchor" href="#_8、删除已停止的容器" aria-hidden="true">#</a> 8、删除已停止的容器</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker rm 容器ID
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="一次性删除多个容器实例" tabindex="-1"><a class="header-anchor" href="#一次性删除多个容器实例" aria-hidden="true">#</a> 一次性删除多个容器实例</h5><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker rm -f $(docker ps -a -q)

docker ps -a -q | xargs docker rm
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>docker ps -a -q</code>：查询进行的容器ID</p><h3 id="_4、实操" tabindex="-1"><a class="header-anchor" href="#_4、实操" aria-hidden="true">#</a> 4、实操</h3><h4 id="_1、启动守护式容器-后台服务器" tabindex="-1"><a class="header-anchor" href="#_1、启动守护式容器-后台服务器" aria-hidden="true">#</a> 1、启动守护式容器(后台服务器)</h4><blockquote><p>在大部分的场景下，我们希望 docker 的服务是在后台运行的，我们可以过 -d 指定容器的后台运行模式。</p></blockquote><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker run -d 容器名
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>#使用镜像centos:latest以后台模式启动一个容器</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker run -d centos
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>问题：然后docker ps -a 进行查看, 会发现容器已经退出很重要的要说明的一点: Docker容器后台运行,就必须有一个前台进程.容器运行的命令如果不是那些一直挂起的命令（比如运行top，tail），就是会自动退出的。</p><p>这个是docker的机制问题,比如你的web容器,我们以nginx为例，正常情况下,我们配置启动服务只需要启动响应的service即可。例如service nginx start但是,这样做,nginx为后台进程模式运行,就导致docker前台没有运行的应用,这样的容器后台启动后,会立即自杀因为他觉得他没事可做了.所以，最佳的解决方案是,将你要运行的程序以前台进程的形式运行，常见就是命令行模式，表示我还有交互操作，别中断，O(∩_∩)O哈哈~</p><h5 id="案例演示" tabindex="-1"><a class="header-anchor" href="#案例演示" aria-hidden="true">#</a> 案例演示</h5><blockquote><p>redis 前后台启动演示case（下载一个Redis6.0.8镜像演示）</p></blockquote><ul><li><p>前台交互式启动</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker run -it redis
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>后台守护式启动</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker run -d redis
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><p>PS：启动容器后，先查看容器是否启动正常，往往伴随着<code>docker ps</code></p><h4 id="_2、查看容器日志" tabindex="-1"><a class="header-anchor" href="#_2、查看容器日志" aria-hidden="true">#</a> 2、查看容器日志</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker logs 容器ID
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>PS：容器ID可省略为前三位</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[root@docker ~]## docker ps 
CONTAINER ID   IMAGE     COMMAND                  CREATED         STATUS         PORTS      NAMES
94b526c73db2   redis     &quot;docker-entrypoint.s…&quot;   4 seconds ago   Up 3 seconds   6379/tcp   admiring_poincare
[root@docker ~]## docker logs 94b
1:C 10 Apr 2022 09:50:03.396 ## oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo
1:C 10 Apr 2022 09:50:03.396 ## Redis version=6.2.6, bits=64, commit=00000000, modified=0, pid=1, just started
1:C 10 Apr 2022 09:50:03.396 ## Warning: no config file specified, using the default config. In order to specify a config file use redis-server /path/to/redis.conf
1:M 10 Apr 2022 09:50:03.397 * monotonic clock: POSIX clock_gettime
1:M 10 Apr 2022 09:50:03.398 * Running mode=standalone, port=6379.
1:M 10 Apr 2022 09:50:03.399 ## WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.
1:M 10 Apr 2022 09:50:03.399 ## Server initialized
1:M 10 Apr 2022 09:50:03.399 ## WARNING overcommit_memory is set to 0! Background save may fail under low memory condition. To fix this issue add &#39;vm.overcommit_memory = 1&#39; to /etc/sysctl.conf and then reboot or run the command &#39;sysctl vm.overcommit_memory=1&#39; for this to take effect.
1:M 10 Apr 2022 09:50:03.399 * Ready to accept connections
[root@docker ~]## 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3、查看容器内运行的进程" tabindex="-1"><a class="header-anchor" href="#_3、查看容器内运行的进程" aria-hidden="true">#</a> 3、查看容器内运行的进程</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker top 容器ID
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[root@docker ~]## docker top 94b
UID                 PID                 PPID                C                   STIME               TTY                 TIME                CMD
polkitd             35360               35341               0                   17:50               ?                   00:00:00            redis-server *:6379
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4、查看容器内部细节" tabindex="-1"><a class="header-anchor" href="#_4、查看容器内部细节" aria-hidden="true">#</a> 4、查看容器内部细节</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker inspect 容器ID
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_5、进入容器内部" tabindex="-1"><a class="header-anchor" href="#_5、进入容器内部" aria-hidden="true">#</a> 5、进入容器内部</h4><h5 id="_1、使用exec进入容器" tabindex="-1"><a class="header-anchor" href="#_1、使用exec进入容器" aria-hidden="true">#</a> 1、使用<code>exec</code>进入容器</h5><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker exec -it 容器ID bashShell
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[root@docker ~]## docker exec -it 94b /bin/bash
root@94b526c73db2:/data## redis-c
redis-check-aof  redis-check-rdb  redis-cli        
root@94b526c73db2:/data## redis-cli 
127.0.0.1:6379&gt; ping
PONG
127.0.0.1:6379&gt; set k1 v1
OK
127.0.0.1:6379&gt; get k1
&quot;v1&quot;
127.0.0.1:6379&gt; exit
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>exec帮助命令</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[root@docker ~]## docker exec --help

Usage:  docker exec [OPTIONS] CONTAINER COMMAND [ARG...]

Run a command in a running container

Options:
  -d, --detach               Detached mode: run command in the background
      --detach-keys string   Override the key sequence for detaching a container
  -e, --env list             Set environment variables
      --env-file list        Read in a file of environment variables
  -i, --interactive          Keep STDIN open even if not attached
      --privileged           Give extended privileges to the command
  -t, --tty                  Allocate a pseudo-TTY
  -u, --user string          Username or UID (format: &lt;name|uid&gt;[:&lt;group|gid&gt;])
  -w, --workdir string       Working directory inside the container
[root@docker ~]## 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2、使用attach-进入容器" tabindex="-1"><a class="header-anchor" href="#_2、使用attach-进入容器" aria-hidden="true">#</a> 2、使用<code>attach </code>进入容器</h5><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker attach 容器ID
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3、两者的区别" tabindex="-1"><a class="header-anchor" href="#_3、两者的区别" aria-hidden="true">#</a> 3、两者的区别</h5><ul><li>attach 直接进入容器启动命令的终端，不会启动新的进程，用exit退出，会导致容器的停止。</li><li>exec 是在容器中打开新的终端，并且可以启动新的进程，用exit退出，不会导致容器的停止。</li></ul><p>PS：推荐大家使用<code> docker exec</code> 命令，因为退出容器终端，不会导致容器的停止。</p><h3 id="_5、从容器内拷贝文件到主机上" tabindex="-1"><a class="header-anchor" href="#_5、从容器内拷贝文件到主机上" aria-hidden="true">#</a> 5、从容器内拷贝文件到主机上</h3><blockquote><p>把文件从容器内部复制到主机上</p></blockquote><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker cp  容器ID:容器内路径 目的主机路径
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code> docker cp 3065f084c80d:a.txt a.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_6、导入和导出容器" tabindex="-1"><a class="header-anchor" href="#_6、导入和导出容器" aria-hidden="true">#</a> 6、导入和导出容器</h3><h4 id="_1、导出容器" tabindex="-1"><a class="header-anchor" href="#_1、导出容器" aria-hidden="true">#</a> 1、导出容器</h4><blockquote><p>export 导出容器的内容留作为一个tar归档文件[对应import命令]</p></blockquote><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker export 容器ID &gt; 文件名.tar
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[root@docker /]## docker export 3065f084c80d &gt; centos.tar.gz
[root@docker /]## ll
总用量 233004
-rw-r--r--.   1 root root         0 4月  10 18:16 a.txt
lrwxrwxrwx.   1 root root         7 4月   9 15:59 bin -&gt; usr/bin
dr-xr-xr-x.   5 root root      4096 4月   9 16:06 boot
-rw-r--r--.   1 root root 238572032 4月  10 19:04 centos.tar.gz
drwxr-xr-x.  20 root root      3220 4月   9 16:29 dev
drwxr-xr-x.  86 root root      8192 4月  10 11:03 etc
drwxr-xr-x.   3 root root        22 4月   9 16:05 home
lrwxrwxrwx.   1 root root         7 4月   9 15:59 lib -&gt; usr/lib
lrwxrwxrwx.   1 root root         9 4月   9 15:59 lib64 -&gt; usr/lib64
drwxr-xr-x.   2 root root         6 4月  11 2018 media
drwxr-xr-x.   2 root root         6 4月  11 2018 mnt
drwxr-xr-x.   4 root root        34 4月   9 20:38 opt
dr-xr-xr-x. 124 root root         0 4月   9 16:29 proc
dr-xr-x---.   5 root root       176 4月   9 20:36 root
drwxr-xr-x.  31 root root       940 4月   9 21:01 run
lrwxrwxrwx.   1 root root         8 4月   9 15:59 sbin -&gt; usr/sbin
drwxr-xr-x.   2 root root         6 4月  11 2018 srv
dr-xr-xr-x.  13 root root         0 4月   9 16:29 sys
drwxrwxrwt.  13 root root      4096 4月  10 18:16 tmp
drwxr-xr-x.  13 root root       155 4月   9 15:59 usr
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2、导入容器" tabindex="-1"><a class="header-anchor" href="#_2、导入容器" aria-hidden="true">#</a> 2、导入容器</h4><blockquote><p>import 从tar包中的内容创建一个新的文件系统再导入为镜像[对应export]</p></blockquote><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>cat 文件名.tar | docker import - 镜像用户/镜像名:镜像版本号
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[root@docker /]## cat centos.tar.gz | docker import - xiaobear/centos:8.8
sha256:12e7a58fc36a755fa63a82f78364291de7271c3ade90f2f5581cc50bc2416cb2
[root@docker /]## docker ../../images
REPOSITORY        TAG       IMAGE ID       CREATED              SIZE
xiaobear/centos   8.8       12e7a58fc36a   About a minute ago   231MB
redis             latest    7614ae9453d1   3 months ago         113MB
hello-world       latest    feb5d9fea6a5   6 months ago         13.3kB
centos            latest    5d0da3dc9764   6 months ago         231MB
[root@docker /]## 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7、常用命令汇总" tabindex="-1"><a class="header-anchor" href="#_7、常用命令汇总" aria-hidden="true">#</a> 7、常用命令汇总</h3><p><img src="`+h+'" alt="image-20220410190930000" loading="lazy"></p><table><thead><tr><th>命令</th><th>英文</th><th>中文</th></tr></thead><tbody><tr><td>attach</td><td>Attach to a running container</td><td>当前 shell 下 attach 连接指定运行镜像</td></tr><tr><td>build</td><td>Build an image from a Dockerfile</td><td>通过 Dockerfile 定制镜像</td></tr><tr><td>commit</td><td>Create a new image from a container changes</td><td>提交当前容器为新的镜像</td></tr><tr><td>cp</td><td>Copy files/folders from the containers filesystem to the host path</td><td>容器中拷贝指定文件或者目录到宿主机中</td></tr><tr><td>create</td><td>Create a new container</td><td>创建一个新的容器，同 run，但不启动容器</td></tr><tr><td>diff</td><td>Inspect changes on a container&#39;s filesystem</td><td>查看 docker 容器变化</td></tr><tr><td>events</td><td>Get real time events from the server</td><td>从 docker 服务获取容器实时事件</td></tr><tr><td>exec</td><td>Run a command in an existing container</td><td>在已存在的容器上运行命令</td></tr><tr><td>export</td><td>Stream the contents of a container as a tar archive</td><td>导出容器的内容流作为一个 tar 归档文件[对应 import ]</td></tr><tr><td>history</td><td>Show the history of an image</td><td>展示一个镜像形成历史</td></tr><tr><td>../../images</td><td>List ../../images</td><td>列出系统当前镜像</td></tr><tr><td>import</td><td>Create a new filesystem image from the contents of a tarball</td><td>从tar包中的内容创建一个新的文件系统映像[对应export]</td></tr><tr><td>info</td><td>Display system-wide information</td><td>显示系统相关信息</td></tr><tr><td>inspect</td><td>Return low-level information on a container</td><td>查看容器详细信息</td></tr><tr><td>kill</td><td>Kill a running container</td><td>kill 指定 docker 容器</td></tr><tr><td>load</td><td>Load an image from a tar archive</td><td>从一个 tar 包中加载一个镜像[对应 save]</td></tr><tr><td>login</td><td>Register or Login to the docker registry server</td><td>注册或者登陆一个 docker 源服务器</td></tr><tr><td>logout</td><td>Log out from a Docker registry server</td><td>从当前 Docker registry 退出</td></tr><tr><td>logs</td><td>Fetch the logs of a container</td><td>输出当前容器日志信息</td></tr><tr><td>port</td><td>Lookup the public-facing port which is NAT-ed to PRIVATE_PORT</td><td>查看映射端口对应的容器内部源端口</td></tr><tr><td>pause</td><td>Pause all processes within a container</td><td>暂停容器</td></tr><tr><td>ps</td><td>List containers</td><td>列出容器列表</td></tr></tbody></table>',108);function f(_,y){const a=t("ExternalLinkIcon");return n(),s("div",null,[x,e("p",null,[d("官方搜索网址："),e("a",g,[d("https://hub.docker.com/"),l(a)])]),k])}const O=r(p,[["render",f],["__file","common_commands.html.vue"]]);export{O as default};
