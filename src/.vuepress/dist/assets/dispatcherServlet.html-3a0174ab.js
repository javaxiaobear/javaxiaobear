import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as l,c as o,a as n,b as a,d as c,e as s}from"./app-f55ccf80.js";const u="/assets/image-20200627231021051-c28d7164.png",i="/assets/image-20200628102005467-61ed415d.png",r={},d=s(`<h3 id="_1、dispatcherservlet" tabindex="-1"><a class="header-anchor" href="#_1、dispatcherservlet" aria-hidden="true">#</a> 1、<code>DispatcherServlet</code></h3><blockquote><p>DispatcherServlet 是前端控制器设计模式的实现，提供 Spring Web MVC 的集中访问点，而且负责职责的分派，而且与 Spring IoC 容器无缝集成，从而可以获得 Spring 的所有好处。DispatcherServlet 主要用作职责调度工作，本身主要用于控制流程，主要职责如下：</p><ul><li>文件上传解析，如果请求类型是 multipart 将通过 MultipartResolver 进行文件上传解析</li><li>通过 HandlerMapping，将请求映射到处理器（返回一个 HandlerExecutionChain，它包括一个处理器、多个 HandlerInterceptor 拦截器）</li><li>通过 HandlerAdapter 支持多种类型的处理器(HandlerExecutionChain 中的处理器)</li><li>通过 ViewResolver 解析逻辑视图名到具体视图实现</li><li>本地化解析</li><li>渲染具体的视图等</li><li>如果执行过程中遇到异常将交给 HandlerExceptionResolver 来解析</li></ul></blockquote><h4 id="_1、dispatcherservlet配置详解" tabindex="-1"><a class="header-anchor" href="#_1、dispatcherservlet配置详解" aria-hidden="true">#</a> 1、<code>DispatcherServlet</code>配置详解</h4><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!--注册DispatcherServlet--&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>springmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">&gt;</span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>classpath:springmvc-servlet.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>springmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>• <code>load-on-startup</code>：表示启动容器时初始化该<code> Servlet</code></p><p>• <code>url-pattern</code>：表示哪些请求交给<code>Spring Web MVC</code>处理， &quot;/&quot; 是用来定义默认servlet 映射的。也可以如</p><p>*.html 表示拦截所有以 html 为扩展名的请求</p><p>• <code>contextConfigLocation</code>：表示 SpringMVC 配置文件的路径</p><p><strong>DispatcherServlet其他初始化参数</strong></p>`,9),k=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"left"}},"参数"),n("th",{style:{"text-align":"left"}},"说明")])],-1),g=n("tr",null,[n("td",{style:{"text-align":"left"}},[n("code",null,"contextClass")]),n("td",{style:{"text-align":"left"}},[a("实现类，"),n("code",null,"ConfigurableWebApplicationContext"),a("由该Servlet实例化并在本地配置。默认情况下，"),n("code",null,"XmlWebApplicationContext"),a("使用。")])],-1),v=n("tr",null,[n("td",{style:{"text-align":"left"}},[n("code",null,"contextConfigLocation")]),n("td",{style:{"text-align":"left"}},[a("传递给上下文实例的字符串（由指定"),n("code",null,"contextClass"),a("），以指示可以在哪里找到上下文。该字符串可能包含多个字符串（使用逗号作为分隔符）以支持多个上下文。对于具有两次定义的bean的多个上下文位置，以最新位置为准。")])],-1),m=n("tr",null,[n("td",{style:{"text-align":"left"}},[n("code",null,"namespace")]),n("td",{style:{"text-align":"left"}},[n("code",null,"WebApplicationContext"),a("命名空间。默认为"),n("code",null,"[servlet-name]-servlet"),a("。")])],-1),b=n("td",{style:{"text-align":"left"}},[n("code",null,"throwExceptionIfNoHandlerFound")],-1),h={style:{"text-align":"left"}},q=n("code",null,"NoHandlerFoundException",-1),x=n("code",null,"HandlerExceptionResolver",-1),_=n("code",null,"@ExceptionHandler",-1),f=n("code",null,"false",-1),H=n("code",null,"DispatcherServlet",-1),y={href:"https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-default-servlet-handler",target:"_blank",rel:"noopener noreferrer"},S=s('<h3 id="_2、处理器" tabindex="-1"><a class="header-anchor" href="#_2、处理器" aria-hidden="true">#</a> 2、处理器</h3><h4 id="_1、handlermapping" tabindex="-1"><a class="header-anchor" href="#_1、handlermapping" aria-hidden="true">#</a> 1、HandlerMapping</h4><p>HandlerMapping ，中文译作处理器映射器，在 SpringMVC 中，系统提供了很多 HandlerMapping</p><p><img src="'+u+`" alt="image-20200627231021051" loading="lazy"></p><p><code>HandlerMapping</code> 是负责根据 <code>request</code> 请求找到对应的<code> Handler</code> 处理器及<code> Interceptor</code> 拦截器，将它们封装在 <code>HandlerExecutionChain</code> 对象中返回给前端控制器。</p><ul><li><p><code>BeanNameUrlHandlerMapping</code></p><blockquote><p>BeanNameUrl 处理器映射器，根据请求的 url 与 Spring 容器中定义的 bean 的 name 进行匹配，从而从 Spring 容器中找到 bean 实例，就是说，请求的 Url 地址就是处理器 Bean 的名字。</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.springframework.web.servlet.handler.BeanNameUrlHand lerMapping<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>handlerMapping<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span> 
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>beanName<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/hello<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote></li><li><p><code>SimpleUrlHandlerMapping</code></p></li></ul><blockquote><p>SimpleUrlHandlerMapping 是 BeanNameUrlHandlerMapping 的增强版本，它可以将 url 和处理器 bean 的 id 进行统一映射配置:</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.springframework.web.servlet.handler.SimpleUrlHandle rMapping<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>handlerMapping<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>mappings<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>props</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/hello<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>myController<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">&gt;</span></span> 
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/hello2<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>myController2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>props</span><span class="token punctuation">&gt;</span></span> 
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span> 
<span class="token comment">&lt;!--注意，在 props 中，可以配置多个请求路径和处理器实例的映射关系。--&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h4 id="_2、handleradapter" tabindex="-1"><a class="header-anchor" href="#_2、handleradapter" aria-hidden="true">#</a> 2、<code>HandlerAdapter </code></h4><blockquote><p>HandlerAdapter 会根据适配器接口对后端控制器进行包装（适配），包装后即可对处理器进行执行，通过扩展处理器适配器可以执行多种类型的处理器，这里使用了适配器设计模式。</p></blockquote><p><img src="`+i+`" alt="image-20200628102005467" loading="lazy"></p><ul><li><code>SimpleControllerHandlerAdapter</code></li></ul><blockquote><p><code>SimpleControllerHandlerAdapter</code> 简单控制器处理器适配器，所有实现了 <code>org.springframework.web.servlet.mvc.Controller</code> 接口的 <code>Bean</code> 通过此适配器进行适配、执行，也就是说，如果我们开发的接口是通过实现 <code>Controller</code> 接口来完成的（不是通过注解开发的接口），那么 <code>HandlerAdapter</code> 必须是 <code>SimpleControllerHandlerAdapter</code>。</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></blockquote><ul><li><code>HttpRequestHandlerAdapter</code></li></ul><blockquote><p>HttpRequestHandlerAdapter，http 请求处理器适配器，所有实现了 org.springframework.web.HttpRequestHandler 接口的 Bean 通过此适配器进行适配、执行。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Controller</span> 
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyController2</span> <span class="token keyword">implements</span> <span class="token class-name">HttpRequestHandler</span> <span class="token punctuation">{</span> 
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleRequest</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServlet</span> <span class="token class-name">Response</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span> 
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;-----MyController2-----&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> 
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.springframework.web.servlet.handler.SimpleUrlHandle rMapping<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>handlerMapping<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span> 
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>mappings<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>props</span><span class="token punctuation">&gt;</span></span> 
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/hello2<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>myController2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">&gt;</span></span> 
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>props</span><span class="token punctuation">&gt;</span></span> 
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.springframework.web.servlet.mvc.HttpRequestHandlerA dapter<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>handlerAdapter<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote>`,14);function C(w,M){const t=p("ExternalLinkIcon");return l(),o("div",null,[d,n("table",null,[k,n("tbody",null,[g,v,m,n("tr",null,[b,n("td",h,[q,a("在找不到请求的处理程序时是否抛出。然后可以使用"),x,a("（例如，通过使用 "),_,a("控制器方法）捕获该异常并将其作为其他任何异常进行处理。默认情况下，它设置为"),f,a("，在这种情况下，"),H,a("将响应状态设置为404（NOT_FOUND），而不会引发异常。请注意，如果还配置了"),n("a",y,[a("默认servlet处理"),c(t)]),a("，则始终将未解决的请求转发到默认servlet，并且永远不会引发404。")])])])]),S])}const N=e(r,[["render",C],["__file","dispatcherServlet.html.vue"]]);export{N as default};
