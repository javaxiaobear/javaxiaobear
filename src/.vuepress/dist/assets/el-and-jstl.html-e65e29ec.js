import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as l,c,a as n,b as s,d as o,e as a}from"./app-f55ccf80.js";const i={},u=a(`<h3 id="_1、el-表达式" tabindex="-1"><a class="header-anchor" href="#_1、el-表达式" aria-hidden="true">#</a> 1、EL 表达式</h3><h4 id="_1、什么是el-表达式-el-表达式的作用" tabindex="-1"><a class="header-anchor" href="#_1、什么是el-表达式-el-表达式的作用" aria-hidden="true">#</a> 1、什么是EL 表达式，EL 表达式的作用?</h4><blockquote><p>EL 表达式的全称是：Expression Language。是表达式语言。</p><p>EL 表达式的什么作用：EL 表达式主要是代替jsp 页面中的表达式脚本在jsp 页面中进行数据的输出。 因为EL 表达式在输出数据的时候，要比jsp 的表达式脚本要简洁很多。</p></blockquote><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>&lt;%
request.setAttribute(&quot;key&quot;,&quot;鄢汉雄&quot;);
%&gt;
表达式脚本输出的值是：&lt;%=request.getAttribute(&quot;key&quot;)%&gt;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>br</span><span class="token punctuation">&gt;</span></span>
EL表达式输出的值是：\${key}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><mark>EL 表达式的格式是：\${表达式}</mark></p><p>EL 表达式在输出null 值的时候，输出的是空串。</p><p>jsp 表达式脚本输出null 值的时候，输出的是null 字符串</p><h4 id="_2、el-表达式搜索域数据的顺序" tabindex="-1"><a class="header-anchor" href="#_2、el-表达式搜索域数据的顺序" aria-hidden="true">#</a> 2、EL 表达式搜索域数据的顺序</h4><p>EL 表达式主要是在jsp 页面中输出数据。主要是<strong>输出域对象中的数据</strong>。</p><p>当四个域中都有相同的key 的数据的时候，EL 表达式会按照四个域的从小到大的顺序去进行搜索，找到就输出。</p><p><mark><strong>pageContext ----&gt; request ----&gt; session ----&gt; application</strong></mark></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>&lt;%
    request.setAttribute(&quot;key&quot;,&quot;request&quot;);
    session.setAttribute(&quot;key&quot;,&quot;session&quot;);
    application.setAttribute(&quot;key&quot;,&quot;application&quot;);
    pageContext.setAttribute(&quot;key&quot;,&quot;pageContext&quot;);
%&gt;
&lt;%----%&gt;
表达式脚本输出的值是：&lt;%=request.getAttribute(&quot;key&quot;)%&gt;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>br</span><span class="token punctuation">&gt;</span></span>
EL表达式输出的值是：\${key}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3、el-表达式输出bean-的普通属性-数组属性。list-集合属性-map-集合属性" tabindex="-1"><a class="header-anchor" href="#_3、el-表达式输出bean-的普通属性-数组属性。list-集合属性-map-集合属性" aria-hidden="true">#</a> 3、EL 表达式输出Bean 的普通属性，数组属性。List 集合属性，map 集合属性</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@AllArgsConstructor</span>
<span class="token annotation punctuation">@NoArgsConstructor</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> phone<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> city<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> map<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>&lt;%
    Person person = new Person();
    person.setId(12);
    person.setPhone(new String[]{&quot;18391242239&quot;,&quot;1234523121&quot;});
    ArrayList<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>String</span><span class="token punctuation">&gt;</span></span> objects = new ArrayList&lt;&gt;();
    objects.add(&quot;湖南&quot;);
    objects.add(&quot;长沙&quot;);
    objects.add(&quot;上海&quot;);
    person.setCity(objects);
    Map<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>String,</span> <span class="token attr-name">Object</span><span class="token punctuation">&gt;</span></span> map = new HashMap&lt;&gt;();
    map.put(&quot;Key1&quot;,&quot;value1&quot;);
    map.put(&quot;Key2&quot;,&quot;value2&quot;);
    map.put(&quot;Key3&quot;,&quot;value3&quot;);
    person.setMap(map);
    pageContext.setAttribute(&quot;p&quot;, person);
%&gt;

输出person:\${p}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>br</span><span class="token punctuation">&gt;</span></span>
输出person id的属性：\${p.id}
输出Person 的pnones 数组属性值：\${p.phones[2]} <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>
输出Person 的cities 集合中的元素值：\${p.city} <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>
输出Person 的List 集合中个别元素值：\${p.city[2]} <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>
输出Person 的Map 集合: \${p.map} <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>
输出Person 的Map 集合中某个key 的值: \${p.map.key3} <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4、el-表达式——运算" tabindex="-1"><a class="header-anchor" href="#_4、el-表达式——运算" aria-hidden="true">#</a> 4、EL 表达式——运算</h4>`,16),d=n("blockquote",{运算表达式:""},[n("p",null,"语法：$")],-1),r=a(`<h5 id="_1、关系运算" tabindex="-1"><a class="header-anchor" href="#_1、关系运算" aria-hidden="true">#</a> 1、关系运算</h5><table><thead><tr><th>关系运算符</th><th>说明</th><th>范例</th><th>结果</th></tr></thead><tbody><tr><td>== 或eq</td><td>等于</td><td><code>\${1001 == 1001} or \${1001 eq 1001}</code></td><td>true or true</td></tr><tr><td>!= 或ne</td><td>不等于</td><td><code>\${1001 != 1001} or \${1001 ne 1001}</code></td><td>false or false</td></tr><tr><td>&lt;或lt</td><td>小于</td><td><code>\${1001 &lt; 1004} or \${1001 lt 1001}</code></td><td>true or false</td></tr><tr><td>&gt; 或者gt</td><td>大于</td><td><code>\${1001 &gt; 1004} or \${1001 gt 1001} </code></td><td>false or false</td></tr><tr><td>&lt;= 或le</td><td>小于等于</td><td><code>\${1001 &lt;= 1004} or \${1001 le 1001}</code></td><td>true or true</td></tr><tr><td>&gt;= 或ge</td><td>大于等于</td><td><code>\${1001 &gt;= 1004} or \${1001 ge 1001}</code></td><td>false or true</td></tr></tbody></table><h5 id="_2、逻辑运算" tabindex="-1"><a class="header-anchor" href="#_2、逻辑运算" aria-hidden="true">#</a> 2、逻辑运算</h5><table><thead><tr><th>逻辑运算符</th><th>说明</th><th>范例</th><th>结果</th></tr></thead><tbody><tr><td>&amp;&amp; 或and</td><td>与运算</td><td><code>\${14 == 10 &amp;&amp; 10 &lt; 14} or \${14 == 10 and 10 &lt; 14}</code></td><td>false or false</td></tr><tr><td>||或or</td><td>或运算</td><td><code>\${14 == 10 || 10 &lt; 14} or \${14 == 10 or 10 &lt; 14}</code></td><td>true or true</td></tr><tr><td>! 或not</td><td>取反运算</td><td><code>\${!false} or \${not true}</code></td><td>true or false</td></tr></tbody></table><h5 id="_3、算数运算" tabindex="-1"><a class="header-anchor" href="#_3、算数运算" aria-hidden="true">#</a> 3、算数运算</h5><table><thead><tr><th>逻辑运算符</th><th>说明</th><th>范例</th><th>结果</th></tr></thead><tbody><tr><td>+</td><td>加</td><td><code>\${10 + 14}</code></td><td>24</td></tr><tr><td>-</td><td>减</td><td><code>\${520 - 250}</code></td><td>270</td></tr><tr><td>*</td><td>乘</td><td><code>\${25 * 25} </code></td><td>625</td></tr><tr><td>/或div</td><td>除</td><td><code>\${99 / 3} or \${99 div 3}</code></td><td>33.0 or 33.0</td></tr><tr><td>%或mod</td><td>取余</td><td><code>\${100 % 3} or \${100 mod 3}</code></td><td>1 or 1</td></tr></tbody></table><h5 id="_4、empty运算" tabindex="-1"><a class="header-anchor" href="#_4、empty运算" aria-hidden="true">#</a> 4、empty运算</h5><blockquote><p>empty 运算可以判断一个数据是否为空，如果为空，则输出true,不为空输出false</p></blockquote><p><strong>为空的情况：</strong></p><ul><li>值为null 值的时候，为空</li><li>值为空串的时候，为空</li><li>值是Object 类型数组，长度为零的时候</li><li>list 集合，元素个数为零</li><li>map 集合，元素个数为零</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>&lt;%
//值为null 值的时候，为空
    request.setAttribute(&quot;emptyNull&quot;,null);
//值为空串的时候，为空
request.setAttribute(&quot;emptyStr&quot;,&quot;&quot;);
// 值是Object 类型数组，长度为零的时候
request.setAttribute(&quot;emptyArr&quot;,new Object[]{});
//list 集合，元素个数为零
request.setAttribute(&quot;emptyList&quot;,new ArrayList&lt;&gt;());
//map 集合，元素个数为零
    request.setAttribute(&quot;emptyMap&quot;,new HashMap&lt;&gt;());
%&gt;
\${ empty emptyNull } <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>
\${ empty emptyStr } <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>
\${ empty emptyArr } <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>
\${ empty emptyList } <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>
\${ empty emptyMap } <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_5、三元运算" tabindex="-1"><a class="header-anchor" href="#_5、三元运算" aria-hidden="true">#</a> 5、三元运算</h5><blockquote><p>表达式1？表达式2：表达式3</p></blockquote><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>\${100&gt;120?&quot;Xiaobear很帅！！&quot;:&quot;非常帅！！！&quot;}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_6、-点运算和-中括号运算符" tabindex="-1"><a class="header-anchor" href="#_6、-点运算和-中括号运算符" aria-hidden="true">#</a> 6、.点运算和[] 中括号运算符</h5><blockquote><p>.点运算，可以输出Bean 对象中某个属性的值。 []中括号运算，可以输出有序集合中某个元素的值。 并且[]中括号运算，还可以输出map 集合中key 里含有特殊字符的key 的值。</p></blockquote><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>&lt;%
    HashMap<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>String,</span> <span class="token attr-name">Object</span><span class="token punctuation">&gt;</span></span> map = new HashMap<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>String,Object</span><span class="token punctuation">&gt;</span></span>();
    map.put(&quot;a.b.c&quot;,&quot;abc&quot;);
    map.put(&quot;a-b-c&quot;,&quot;a-b-c&quot;);
    request.setAttribute(&quot;map&quot;,map);
%&gt;

\${map[&#39;a.b.c&#39;]}
\${map[&#39;a-b-c&#39;]}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5、el-表达式的11-个隐含对象" tabindex="-1"><a class="header-anchor" href="#_5、el-表达式的11-个隐含对象" aria-hidden="true">#</a> 5、EL 表达式的11 个隐含对象</h4><table><thead><tr><th>变量</th><th>类型</th><th>作用</th></tr></thead><tbody><tr><td>pageContext</td><td>pageContextImpl</td><td>它可以获取jsp 中的九大内置对象</td></tr><tr><td>pageScope</td><td>Map&lt;String,Object&gt;</td><td>它可以获取pageContext 域中的数据</td></tr><tr><td>requestScope</td><td>Map&lt;String,Object&gt;</td><td>它可以获取Request 域中的数据</td></tr><tr><td>sessionScope</td><td>Map&lt;String,Object&gt;</td><td>它可以获取Session 域中的数据</td></tr><tr><td>applicationScope</td><td>Map&lt;String,Object&gt;</td><td>它可以获取ServletContext 域中的数据</td></tr><tr><td>param</td><td>Map&lt;String,String&gt;</td><td>它可以获取请求参数的值</td></tr><tr><td>paramValues</td><td>Map&lt;String,String[]&gt;</td><td>它也可以获取请求参数的值，获取多个值的时候使用。</td></tr><tr><td>header</td><td>Map&lt;String,String&gt;</td><td>它可以获取请求头的信息</td></tr><tr><td>headerValues</td><td>Map&lt;String,String[]&gt;</td><td>它可以获取请求头的信息，它可以获取多个值的情况</td></tr><tr><td>cookie</td><td>Map&lt;String,Cookie&gt;</td><td>它可以获取当前请求的Cookie 信息</td></tr><tr><td>initParam</td><td>Map&lt;String,String&gt;</td><td>它可以获取在web.xml 中配置的<code>&lt;context-param&gt;</code>上下文参数</td></tr></tbody></table><h5 id="_1、el-获取四个特定域中的属性" tabindex="-1"><a class="header-anchor" href="#_1、el-获取四个特定域中的属性" aria-hidden="true">#</a> 1、EL 获取四个特定域中的属性</h5><blockquote><p>pageScope ====== pageContext 域 requestScope ====== Request 域 sessionScope ====== Session 域 applicationScope ====== ServletContext 域</p></blockquote><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>&lt;%
    pageContext.setAttribute(&quot;key1&quot;,&quot;value1&quot;);
    pageContext.setAttribute(&quot;key2&quot;,&quot;value2&quot;);
    request.setAttribute(&quot;key2&quot;,&quot;value2&quot;);
    session.setAttribute(&quot;key2&quot;,&quot;value2&quot;);
    application.setAttribute(&quot;key2&quot;,&quot;value2&quot;);
%&gt;
\${applicationScope.key2}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2、pagecontext-对象的使用" tabindex="-1"><a class="header-anchor" href="#_2、pagecontext-对象的使用" aria-hidden="true">#</a> 2、pageContext 对象的使用</h5><ol><li><p>协议：</p></li><li><p>服务器ip：</p></li><li><p>服务器端口：</p></li><li><p>获取工程路径：</p></li><li><p>获取请求方法：</p></li><li><p>获取客户端ip 地址：</p></li><li><p>获取会话的id 编号：</p></li></ol><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>&lt;%
    request.setAttribute(&quot;req&quot;,request);
%&gt;
&lt;%=request.getScheme() %&gt; <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>
1.协议： \${ req.scheme }<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>
2.服务器ip：\${ pageContext.request.serverName }<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>
3.服务器端口：\${ pageContext.request.serverPort }<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>
4.获取工程路径：\${ pageContext.request.contextPath }<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>
5.获取请求方法：\${ pageContext.request.method }<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>
6.获取客户端ip 地址：\${ pageContext.request.remoteHost }<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>
7.获取会话的id 编号：\${ pageContext.session.id }<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2、jstl-标签库" tabindex="-1"><a class="header-anchor" href="#_2、jstl-标签库" aria-hidden="true">#</a> 2、JSTL 标签库</h3><blockquote><p>JSTL 标签库全称是指JSP Standard Tag Library JSP 标准标签库。是一个不断完善的开放源代码的JSP 标签库。 EL 表达式主要是为了替换jsp 中的表达式脚本，而标签库则是为了替换代码脚本。这样使得整个jsp 页面变得更佳简洁。</p></blockquote><p><strong>JSTL 标签库的使用步骤：</strong></p>`,28),k={href:"http://archive.apache.org/dist/jakarta/taglibs/standard/binaries/",target:"_blank",rel:"noopener noreferrer"},v=n("li",null,[n("p",null,"使用taglib 指令引入标签库"),n("div",{class:"language-html line-numbers-mode","data-ext":"html"},[n("pre",{class:"language-html"},[n("code",null,`<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
`)]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])])],-1),g=a(`<h4 id="_1、core-核心库使用" tabindex="-1"><a class="header-anchor" href="#_1、core-核心库使用" aria-hidden="true">#</a> 1、core 核心库使用</h4><h5 id="_1、-c-set-使用很少" tabindex="-1"><a class="header-anchor" href="#_1、-c-set-使用很少" aria-hidden="true">#</a> 1、&lt;c:set /&gt;（使用很少）</h5><blockquote><p>set 标签可以往域中保存数据</p></blockquote><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>保存之前：\${requestScope.abc}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">c:</span>set</span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>session<span class="token punctuation">&quot;</span></span> <span class="token attr-name">var</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>abc<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>abcValue<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">c:</span>set</span><span class="token punctuation">&gt;</span></span>
保存之后：\${sessionScope.abc}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2、-c-if" tabindex="-1"><a class="header-anchor" href="#_2、-c-if" aria-hidden="true">#</a> 2、&lt;c:if /&gt;</h5><blockquote><p>if 标签用来做if 判断。不支持if-else</p></blockquote><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>&lt;%--
ii.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">c:</span>if</span> <span class="token punctuation">/&gt;</span></span>
if 标签用来做if 判断。
test 属性表示判断的条件（使用EL 表达式输出）
--%&gt;
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">c:</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>\${ 12 == 12 }<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>12 等于12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">c:</span>if</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">c:</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>\${ 12 != 12 }<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>12 不等于12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">c:</span>if</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3、-c-choose-c-when-c-otherwise-标签" tabindex="-1"><a class="header-anchor" href="#_3、-c-choose-c-when-c-otherwise-标签" aria-hidden="true">#</a> 3、&lt;c:choose&gt; &lt;c:when&gt; &lt;c:otherwise&gt;标签</h5><blockquote><p>多路判断。跟switch ... case .... default 非常接近</p></blockquote><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>&lt;%--<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">c:</span>choose</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">c:</span>when</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">c:</span>otherwise</span><span class="token punctuation">&gt;</span></span>标签
    1、标签里不能使用html 注释，要使用jsp 注释
	2、when 标签的父标签一定要是choose 标签
    --%&gt;
&lt;%
    request.setAttribute(&quot;height&quot;,175);
%&gt;
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">c:</span>choose</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">c:</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>\${requestScope.height} &gt; 180<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>是巨人<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">c:</span>when</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">c:</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>\${requestScope.height} &lt; 170<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>还可以<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">c:</span>when</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">c:</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>\${requestScope.height} &gt; 185<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>超巨人<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">c:</span>when</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">c:</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>\${requestScope.height} &gt; 180<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>可以<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">c:</span>when</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">c:</span>otherwise</span><span class="token punctuation">&gt;</span></span>
    qita
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">c:</span>otherwise</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">c:</span>choose</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_4、-c-foreach" tabindex="-1"><a class="header-anchor" href="#_4、-c-foreach" aria-hidden="true">#</a> 4、&lt;c:forEach /&gt;</h5><blockquote><p>遍历输出使用。</p></blockquote><h6 id="_1-遍历1-到10" tabindex="-1"><a class="header-anchor" href="#_1-遍历1-到10" aria-hidden="true">#</a> 1. 遍历1 到10</h6><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>&lt;%--1.遍历1 到10，输出
begin 属性设置开始的索引
end 属性设置结束的索引
var 属性表示循环的变量(也是当前正在遍历到的数据)
for (int i = 1; i &lt; 10; i++)
--%&gt;
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">c:</span>forEach</span> <span class="token attr-name">begin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1<span class="token punctuation">&quot;</span></span> <span class="token attr-name">end</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>10<span class="token punctuation">&quot;</span></span> <span class="token attr-name">var</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>i<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    \${i}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">c:</span>forEach</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_2、遍历object-数组" tabindex="-1"><a class="header-anchor" href="#_2、遍历object-数组" aria-hidden="true">#</a> 2、遍历Object 数组</h6><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>&lt;%-- 2.遍历Object 数组
for (Object item: arr)
items 表示遍历的数据源（遍历的集合）
var 表示当前遍历到的数据
--%&gt;
&lt;%
    request.setAttribute(&quot;hello&quot;,new String[]{&quot;123&quot;,&quot;1234&quot;,&quot;124&quot;});
%&gt;
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">c:</span>forEach</span> <span class="token attr-name">items</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>\${requestScope.hello}<span class="token punctuation">&quot;</span></span> <span class="token attr-name">var</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    \${item}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">c:</span>forEach</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_3、遍历map-集合" tabindex="-1"><a class="header-anchor" href="#_3、遍历map-集合" aria-hidden="true">#</a> 3、遍历Map 集合</h6><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>&lt;%
Map<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>String,Object</span><span class="token punctuation">&gt;</span></span> map = new HashMap<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>String,</span> <span class="token attr-name">Object</span><span class="token punctuation">&gt;</span></span>();
map.put(&quot;key1&quot;, &quot;value1&quot;);
map.put(&quot;key2&quot;, &quot;value2&quot;);
map.put(&quot;key3&quot;, &quot;value3&quot;);
// for ( Map.Entry<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>String,Object</span><span class="token punctuation">&gt;</span></span> entry : map.entrySet()) {
// }
request.setAttribute(&quot;map&quot;, map);
%&gt;
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">c:</span>forEach</span> <span class="token attr-name">items</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>\${ requestScope.map }<span class="token punctuation">&quot;</span></span> <span class="token attr-name">var</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>entry<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>\${entry.key} = \${entry.value}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">c:</span>forEach</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_4、遍历list-集合" tabindex="-1"><a class="header-anchor" href="#_4、遍历list-集合" aria-hidden="true">#</a> 4、遍历List 集合</h6><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@AllArgsConstructor</span>
<span class="token annotation punctuation">@NoArgsConstructor</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> phone<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>&lt;%
    ArrayList<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Student</span><span class="token punctuation">&gt;</span></span> objects = new ArrayList<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Student</span><span class="token punctuation">&gt;</span></span>();
    for (int i = 0; i &lt;= 10; i++) {
        objects.add(new Student(1,&quot;username&quot;+i,&quot;pass&quot;+i,18+i,&quot;phone&quot;+i));
    }
    request.setAttribute(&quot;stu&quot;,objects);
%&gt;
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>编号<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>用户名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>密码<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>年龄<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>电话<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>操作<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>
    &lt;%--
    items 表示遍历的集合
    var 表示遍历到的数据
    begin 表示遍历的开始索引值
    end 表示结束的索引值
    step 属性表示遍历的步长值
    varStatus 属性表示当前遍历到的数据的状态
    for（int i = 1; i &lt; 10; i+=2）
    --%&gt;
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">c:</span>forEach</span> <span class="token attr-name">begin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>2<span class="token punctuation">&quot;</span></span> <span class="token attr-name">end</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>7<span class="token punctuation">&quot;</span></span> <span class="token attr-name">varStatus</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>status<span class="token punctuation">&quot;</span></span> <span class="token attr-name">items</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>\${requestScope.stu}<span class="token punctuation">&quot;</span></span> <span class="token attr-name">var</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>stu<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>\${stu.id}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>\${stu.username}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>\${stu.password}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>\${stu.age}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>\${stu.phone}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">c:</span>forEach</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,21);function m(b,h){const t=p("ExternalLinkIcon");return l(),c("div",null,[u,d,r,n("ul",null,[n("li",null,[n("p",null,[s("先导入jstl 标签库的jar 包。"),n("a",k,[s("http://archive.apache.org/dist/jakarta/taglibs/standard/binaries/"),o(t)])])]),v]),g])}const f=e(i,[["render",m],["__file","el-and-jstl.html.vue"]]);export{f as default};
