import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as i,c as r,a as s,b as n,d as t,e}from"./app-f55ccf80.js";const l="/assets/image-20210623151121065-87c64d9b.png",c="/assets/image-20210623151409087-7ec7a154.png",u="/assets/image-20210623151541259-5321e62b.png",d="/assets/image-20210623152421482-a9c9a796.png",m="/assets/image-20210623172541563-3b56f874.png",k="/assets/image-20210623172613872-6c4d3d71.png",g="/assets/image-20210623172711103-0d13302d.png",_="/assets/image-20210623172849925-e09a4d5b.png",h="/assets/image-20210623172956299-ab0d94a5.png",v="/assets/image-20210623173335617-7fe95bce.png",b="/assets/image-20210623173447796-0960f92e.png",q="/assets/image-20210623174330942-1be632b2.png",y="/assets/image-20210623174346603-c393114d.png",f="/assets/image-20210623174428993-7137a169.png",E="/assets/image-20210623175109841-752eab6a.png",x="/assets/image-20210623175713112-ee928d7a.png",T="/assets/image-20210624092812116-b96bd10c.png",w="/assets/image-20210624093007479-ab7deb6c.png",P="/assets/image-20210624093027530-369e79a7.png",S="/assets/image-20210624093414565-e42e927b.png",z="/assets/image-20210624093502267-024bcca4.png",j="/assets/image-20210624093820945-d795fca7.png",O="/assets/image-20210624093910975-50c5eb65.png",D="/assets/image-20210624094030078-e8c0e551.png",J="/assets/image-20210624094211809-5386a41b.png",L="/assets/image-20210624094259953-dbdd2a81.png",G="/assets/image-20210624094427227-36e3f4c1.png",U="/assets/image-20210624094459012-cba6b2a4.png",H="/assets/image-20210624101012667-9c846829.png",R="/assets/image-20210624101141251-c507a665.png",I="/assets/image-20210902112314138-50d4ef33.png",M="/assets/image-20210902112349705-ee3b3104.png",V="/assets/image-20210902113234313-0828cabc.png",W="/assets/image-20210902113659632-9e64dedd.png",N={},X=s("h3",{id:"_1、elasticsearch-安装",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_1、elasticsearch-安装","aria-hidden":"true"},"#"),n(" 1、Elasticsearch 安装")],-1),A=s("h4",{id:"_1、下载",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_1、下载","aria-hidden":"true"},"#"),n(" 1、下载")],-1),K={href:"https://www.elastic.co/cn/",target:"_blank",rel:"noopener noreferrer"},Q={href:"https://www.elastic.co/cn/downloads/past-releases#elasticsearch",target:"_blank",rel:"noopener noreferrer"},B=e('<p>Elasticsearch 分为 Linux 和 WindowWindows版本，基于我们主要学习的是 ElasticElasticsearch 的 Java客户端的使用，所以 课程 中使用的是安装较为简便的 WindowWindows版本 。</p><h4 id="_2、安装" tabindex="-1"><a class="header-anchor" href="#_2、安装" aria-hidden="true">#</a> 2、安装</h4><p>Windows版的 ElasticElasticsearch 的安装很简单，解压即安装完毕，解压后的 ElasticElasticsearch 的 目录结构如下</p><p><img src="'+l+'" alt="image-20210623151121065" loading="lazy"></p><table><thead><tr><th>目录</th><th>含义</th></tr></thead><tbody><tr><td>bin</td><td>可执行脚本目录</td></tr><tr><td>config</td><td>配置目录</td></tr><tr><td>jdk</td><td>内置JDK 目录</td></tr><tr><td>lib</td><td>类库</td></tr><tr><td>logs</td><td>日志目录</td></tr><tr><td>modules</td><td>模块目录</td></tr><tr><td>plugins</td><td>插件目录</td></tr></tbody></table><p>解压后，进入bin 文件目录，点击 <strong>elasticsearch.bat</strong> 文件启动 ES 服务</p><p><img src="'+c+'" alt="image-20210623151409087" loading="lazy"></p><p><strong>注意：</strong></p><ul><li><p><code>9300</code> 端口为 Elastic s earch 集群间组件的通信端口，</p></li><li><p><code>9200</code> 端口为浏览器访问的 http协议 RESTful 端口。</p></li></ul>',9),Y={href:"http://localhost:9200",target:"_blank",rel:"noopener noreferrer"},C=e('<p><img src="'+u+'" alt="image-20210623151541259" loading="lazy"></p><h4 id="_3、问题解决" tabindex="-1"><a class="header-anchor" href="#_3、问题解决" aria-hidden="true">#</a> 3、问题解决</h4><ul><li><p>ElasticSearch 是使用 java 开发的，且 7.13.2版本的 ES 需要 JDK 版本 1.8 以上，默认安装包带有 jdk 环境，如果系统配置 JAVA_HOME ，那么使用系统默认的 JDK ，如果没有配置使用自带的 JDK ，一般建议使用系统配置的 JDK 。</p></li><li><p>双击启动窗口闪退，通过路径访问追踪错误，如果是“空间不足”，请修改config/jvm.options 配置文件</p><blockquote><p>设置 JVM 初始内存为 1G 。此值可以设置与 Xmx 相同，以避免每次垃圾回收完成后 JVM 重新分配内存</p><p>Xms represents the initial size of total heap space</p><p>设置 JVM 最大可用内存为 1G</p><p>Xmx represents the maximum size of total heap space</p><p>Xms1g Xmx1g</p></blockquote></li></ul><h3 id="_2、基本操作" tabindex="-1"><a class="header-anchor" href="#_2、基本操作" aria-hidden="true">#</a> 2、基本操作</h3><h4 id="_1、restful" tabindex="-1"><a class="header-anchor" href="#_1、restful" aria-hidden="true">#</a> 1、RESTful</h4><p>​ REST指的是一组架构约束条件和原则。满足这些约束条件和原则的应用程序或设计就是 RESTful 。 Web 应用程序最重要的 REST 原则是，客户端和服务器之间的交互在请求之间是无状态的。从客户端到服务器的每个请求都必须包含理解请求所必需的信息。如果服务器在请求之间的任何时间点重启，客户端不会得到通知。此外，无状态请求可以由任何可用服务器回答，这十分适合云计算之类的环境。客户端可以缓存数据以改进性能。</p><p>​ 在服务器端，应用程序状态和功能可以分为各种资源。资源是一个有趣的概念实体，它向客户端公开。资源的例子有：应用程序对象、数据库记录、算法等等。每个资源都使用 URI(Universal Resource Identifier) 得到一个唯一的地址。所有资源都共享统一的接口，以便在客户端和服务器之间传输状态。使用的是标准的 HTTP 方法，比如 GET 、 PUT 、 POST 和DELETE 。</p><p>​ 在REST 样式的 Web 服务中，每个资源都有一个地址。资源本身都是方法调用的目标，方法列表对所有资源都是一样的。这些方法都是标准方法，包括 HTTP GET 、 POST 、PUT 、 DELETE ，还可能包括 HEAD 和 OPTIONS 。简单的理解就是，如果想要访问互联网上的资源，就必须向资源所在的服务器发出请求，请求体中必须包含资源的网络路径， 以及对资源进行的操作 增删改查 。</p><h4 id="_2、postman安装" tabindex="-1"><a class="header-anchor" href="#_2、postman安装" aria-hidden="true">#</a> 2、Postman安装</h4><p>​ 如果直接通过浏览器向Elasticsearch 服务器发请求，那么需要在发送的请求中包含HTTP 标准的方法，而 HTTP 的大部分特性且仅支持 GET 和 POST 方法。所以为了能方便地进行客户端的访问，可以使用 Postman 软件 ​ Postman是一款强大 的 网页调试工具，提供功能强大的 Web API 和 HTTP 请求调试。软件功能强大，界面简洁明晰、操作方便快捷，设计得很人性化。 Postman 中文版能够发送任何类型的 HTTP 请求 (GET, POST, PUT..) PUT..)，不仅能够表单提交，且可以附带任意类型请求体。</p>',10),Z={href:"https://www.getpostman.com",target:"_blank",rel:"noopener noreferrer"},F={href:"https://www.getpostman.com/apps",target:"_blank",rel:"noopener noreferrer"},$=e('<h4 id="_3、数据格式" tabindex="-1"><a class="header-anchor" href="#_3、数据格式" aria-hidden="true">#</a> 3、数据格式</h4><p>Elasticsearch是面向文档型数据库，一条数据在这里就是一个文档。 为了方便大家理解，我们将 Elastic s earch 里 存储 文档 数据和关系型数据库 MySQL 存储数据的概念进行一个类比</p><p><img src="'+d+'" alt="image-20210623152421482" loading="lazy"></p><p>ES里的 Index 可以看做一个库，而 Types 相当于表， Documents 则相当于表的行。这里Types 的概念已经被逐渐弱化， Elasticsearch 6.X 中，一个 index 下已经只能包含一个type Elasticsearch 7.X 中 , Type 的概念已经被删除了。</p><h4 id="_4、http操作" tabindex="-1"><a class="header-anchor" href="#_4、http操作" aria-hidden="true">#</a> 4、HTTP操作</h4><h5 id="_1、索引操作" tabindex="-1"><a class="header-anchor" href="#_1、索引操作" aria-hidden="true">#</a> 1、索引操作</h5><h6 id="_1、创建索引" tabindex="-1"><a class="header-anchor" href="#_1、创建索引" aria-hidden="true">#</a> 1、创建索引</h6><blockquote><p>对比关系型数据库，创建索引就等同于创建数据库</p></blockquote>',8),ss=s("strong",null,"PUT",-1),ns={href:"http://127.0.0.1:9200/start",target:"_blank",rel:"noopener noreferrer"},as=e('<p><img src="'+m+'" alt="image-20210623172541563" loading="lazy"></p><p>请求后，服务器返回响应</p><p><img src="'+k+`" alt="image-20210623172613872" loading="lazy"></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&quot; 【响应结果】 : true, ## true 操作成功
&quot;shards_ 【分片结果】 : true, ## 分片操作成功
&quot; 【索引名称】 : &quot;
## 注意：创建索引库的分片数默认 1 片，在 7.0.0 之前的 Elasticsearch 版本中，默认 5 片
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果重复添加索引，会返回错误信息</p><p><img src="`+g+'" alt="image-20210623172711103" loading="lazy"></p><h6 id="_2、查看索引" tabindex="-1"><a class="header-anchor" href="#_2、查看索引" aria-hidden="true">#</a> 2、查看索引</h6>',7),ts=s("strong",null,"GET",-1),es={href:"http://127.0.0.1:9200/_cat/indices?v",target:"_blank",rel:"noopener noreferrer"},os=s("p",null,[n("这里请求路径中的**_cat 表示查看的意思**， "),s("strong",null,"indices 表示索引"),n("，所以整体含义就是查看当前 ES服务器中的所有索引，就好像 MySQL 中的 show tables 的感觉，服务器响应结果如下")],-1),ps=s("p",null,[s("img",{src:_,alt:"image-20210623172849925",loading:"lazy"})],-1),is=s("p",null,[s("img",{src:h,alt:"image-20210623172956299",loading:"lazy"})],-1),rs=s("h6",{id:"_3、查看单个索引",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_3、查看单个索引","aria-hidden":"true"},"#"),n(" 3、查看单个索引")],-1),ls=s("strong",null,"GET",-1),cs={href:"http://127.0.0.1:9200/start",target:"_blank",rel:"noopener noreferrer"},us=e('<p><img src="'+v+'" alt="image-20210623173335617" loading="lazy"></p><p>查看索引向ES 服务器发送的请求路径和创建索引是一致的。但是 HTTP 方法不一致。这里可以体会一下 RESTful 的意义，请求后，服务器响应结果如下：</p><p><img src="'+b+`" alt="image-20210623173447796" loading="lazy"></p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token string">&quot;start&quot;</span>【索引名】<span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token string">&quot;aliases&quot;</span>【别名】<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token string">&quot;mappings&quot;</span>【映射】<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token string">&quot;settings&quot;</span>【设置】<span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token string">&quot;index&quot;</span>【设置-索引】<span class="token operator">:</span> <span class="token punctuation">{</span>
                <span class="token property">&quot;routing&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                    <span class="token property">&quot;allocation&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                        <span class="token property">&quot;include&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                            <span class="token property">&quot;_tier_preference&quot;</span><span class="token operator">:</span> <span class="token string">&quot;data_content&quot;</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span><span class="token punctuation">,</span>
                <span class="token string">&quot;number_of_shards&quot;</span>【设置-索引-主分片数量】<span class="token operator">:</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span>
                <span class="token string">&quot;provided_name&quot;</span>【名称】<span class="token operator">:</span> <span class="token string">&quot;start&quot;</span><span class="token punctuation">,</span>
                <span class="token string">&quot;creation_date&quot;</span>【创建时间】<span class="token operator">:</span> <span class="token string">&quot;1624440317651&quot;</span><span class="token punctuation">,</span>
                <span class="token string">&quot;number_of_replicas&quot;</span>【设置-索引-副分片数量】<span class="token operator">:</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span>
                <span class="token string">&quot;uuid&quot;</span>【唯一标识】<span class="token operator">:</span> <span class="token string">&quot;5tI3rmvvQsKJISZ8GDR-YQ&quot;</span><span class="token punctuation">,</span>
                <span class="token string">&quot;version&quot;</span>【设置-索引-版本】<span class="token operator">:</span> <span class="token punctuation">{</span>
                    <span class="token property">&quot;created&quot;</span><span class="token operator">:</span> <span class="token string">&quot;7130299&quot;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_4、删除索引" tabindex="-1"><a class="header-anchor" href="#_4、删除索引" aria-hidden="true">#</a> 4、删除索引</h6>`,5),ds=s("strong",null,"DELETE",-1),ms={href:"http://127.0.0.1:9200/start",target:"_blank",rel:"noopener noreferrer"},ks=e('<p><img src="'+q+'" alt="image-20210623174330942" loading="lazy"></p><p><img src="'+y+'" alt="image-20210623174346603" loading="lazy"></p><p>重新访问索引时，服务器返回响应：<strong>索引不存在</strong></p><p><img src="'+f+'" alt="image-20210623174428993" loading="lazy"></p><h5 id="_2、文档操作" tabindex="-1"><a class="header-anchor" href="#_2、文档操作" aria-hidden="true">#</a> 2、文档操作</h5><h6 id="_1、创建文档" tabindex="-1"><a class="header-anchor" href="#_1、创建文档" aria-hidden="true">#</a> 1、创建文档</h6><p>索引已经创建好了，接下来我们来创建文档，并添加数据。这里的文档可以类比为关系型数据库中的表数据，添加的数据格式为 JSON 格式</p>',7),gs={href:"http://127.0.0.1:9200/start/doc",target:"_blank",rel:"noopener noreferrer"},_s=e('<p>此处发送请求的方式必须为<strong>POST</strong> ，不能是 PUT ，否则会发生错误</p><p><img src="'+E+'" alt="image-20210623175109841" loading="lazy"></p><p><img src="'+x+`" alt="image-20210623175713112" loading="lazy"></p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token string">&quot;_index&quot;</span>【索引】<span class="token operator">:</span> <span class="token string">&quot;start&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;_type&quot;</span>【类型-文档】<span class="token operator">:</span> <span class="token string">&quot;doc&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;_id&quot;</span>【唯一标识】<span class="token operator">:</span> <span class="token string">&quot;iY9GOHoBucAyibLJ1Bbq&quot;</span><span class="token punctuation">,</span>#可以类比为 MySQL 中的主键，随机生成
    <span class="token string">&quot;_version&quot;</span>【版本号】<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token string">&quot;result&quot;</span>【结果】<span class="token operator">:</span> <span class="token string">&quot;created&quot;</span><span class="token punctuation">,</span> #这里的 create 表示创建成功
    <span class="token string">&quot;_shards&quot;</span>【分片】<span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token string">&quot;total&quot;</span>【分片-总数】<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
        <span class="token string">&quot;successful&quot;</span>【分片-成功】<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
        <span class="token string">&quot;failed&quot;</span>【分片-s】<span class="token operator">:</span> <span class="token number">0</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token property">&quot;_seq_no&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token property">&quot;_primary_term&quot;</span><span class="token operator">:</span> <span class="token number">1</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的数据创建后，由于没有指定数据唯一性标识（ID ），默认情况下 ES 服务器会随机生成一个 。</p>`,5),hs={href:"http://127.0.0.1:9200/start/doc/1",target:"_blank",rel:"noopener noreferrer"},vs={href:"http://127.0.0.1:9200/start/_doc/1",target:"_blank",rel:"noopener noreferrer"},bs=s("p",null,[s("img",{src:T,alt:"image-20210624092812116",loading:"lazy"})],-1),qs=s("p",null,[s("strong",null,"此处需要注意：如果增加数据时明确数据主键，那么请求方式也可以为PUT")],-1),ys=s("h6",{id:"_2、查看文档",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_2、查看文档","aria-hidden":"true"},"#"),n(" 2、查看文档")],-1),fs=s("p",null,"查看文档时，需要指明文档的唯一性标识，类似于MySQL 中数据的主键查询",-1),Es={href:"http://127.0.0.1:9200/start/_doc/1",target:"_blank",rel:"noopener noreferrer"},xs=e('<p><img src="'+w+'" alt="image-20210624093007479" loading="lazy"></p><p>查询成功后，服务器响应结果：</p><p><img src="'+P+`" alt="image-20210624093027530" loading="lazy"></p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token string">&quot;_index&quot;</span>【索引】<span class="token operator">:</span> <span class="token string">&quot;start&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;_type&quot;</span>【文档类型】<span class="token operator">:</span> <span class="token string">&quot;_doc&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;_id&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;_version&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token property">&quot;_seq_no&quot;</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
    <span class="token property">&quot;_primary_term&quot;</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
    <span class="token string">&quot;found&quot;</span>【查询结果】<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>## <span class="token boolean">true</span> 表示查找到， <span class="token boolean">false</span> 表示未查找到
    <span class="token string">&quot;_source&quot;</span>【文档源信息】<span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;title&quot;</span><span class="token operator">:</span> <span class="token string">&quot;小米手机&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;category&quot;</span><span class="token operator">:</span> <span class="token string">&quot;小米&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;images&quot;</span><span class="token operator">:</span> <span class="token string">&quot;www.xiaobear.cn&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;price&quot;</span><span class="token operator">:</span> <span class="token number">3999.00</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_3、修改文档" tabindex="-1"><a class="header-anchor" href="#_3、修改文档" aria-hidden="true">#</a> 3、修改文档</h6>`,5),Ts={href:"http://127.0.0.1:9200/start/_doc/1",target:"_blank",rel:"noopener noreferrer"},ws=e('<p><img src="'+S+`" alt="image-20210624093414565" loading="lazy"></p><p>请求体内容为:</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;title&quot;</span><span class="token operator">:</span><span class="token string">&quot;华为手机&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;category&quot;</span><span class="token operator">:</span><span class="token string">&quot;小米&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;images&quot;</span><span class="token operator">:</span><span class="token string">&quot;www.xiaobear.cn&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;price&quot;</span><span class="token operator">:</span><span class="token number">4999.00</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改成功后，服务器响应结果：</p><p><img src="`+z+`" alt="image-20210624093502267" loading="lazy"></p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;_index&quot;</span><span class="token operator">:</span> <span class="token string">&quot;start&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;_type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;_doc&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;_id&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;_version&quot;</span>【版本】<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
    <span class="token string">&quot;result&quot;</span>【结果】<span class="token operator">:</span> <span class="token string">&quot;updated&quot;</span><span class="token punctuation">,</span>## updated 表示数据被更新
    <span class="token property">&quot;_shards&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;total&quot;</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
        <span class="token property">&quot;successful&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
        <span class="token property">&quot;failed&quot;</span><span class="token operator">:</span> <span class="token number">0</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token property">&quot;_seq_no&quot;</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
    <span class="token property">&quot;_primary_term&quot;</span><span class="token operator">:</span> <span class="token number">2</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_4、修改字段" tabindex="-1"><a class="header-anchor" href="#_4、修改字段" aria-hidden="true">#</a> 4、修改字段</h6><blockquote><p>修改数据时，也可以只修改某一给条数据的局部信息</p></blockquote>`,8),Ps={href:"http://127.0.0.1:9200/start/_update/1",target:"_blank",rel:"noopener noreferrer"},Ss=e('<p><img src="'+j+`" alt="image-20210624093820945" loading="lazy"></p><p>请求体内容为：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
<span class="token property">&quot;doc&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;price&quot;</span><span class="token operator">:</span><span class="token number">5000.00</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改成功后，服务器响应结果：</p><p><img src="`+O+'" alt="image-20210624093910975" loading="lazy"></p><p>根据唯一性标识，查询文档数据，文档数据已经更新</p><p><img src="'+D+'" alt="image-20210624094030078" loading="lazy"></p><h6 id="_5、删除文档" tabindex="-1"><a class="header-anchor" href="#_5、删除文档" aria-hidden="true">#</a> 5、删除文档</h6><p>删除一个文档不会立即从磁盘上移除，它只是被标记成已删除（逻辑删除）。</p>',9),zs={href:"http://127.0.0.1:9200/start/_doc/1",target:"_blank",rel:"noopener noreferrer"},js=e('<p><img src="'+J+'" alt="image-20210624094211809" loading="lazy"></p><p>删除成功，服务器响应结果：</p><p><img src="'+L+'" alt="image-20210624094259953" loading="lazy"></p><p>version：<strong>对数据的操作，都会更新版本</strong></p><p>删除后再查询当前文档信息</p><p><img src="'+G+'" alt="image-20210624094427227" loading="lazy"></p><p>如果删除一个并不存在的文档</p><p><img src="'+U+`" alt="image-20210624094459012" loading="lazy"></p><h6 id="_6、条件删除文档" tabindex="-1"><a class="header-anchor" href="#_6、条件删除文档" aria-hidden="true">#</a> 6、条件删除文档</h6><blockquote><p>一般删除数据都是根据文档的唯一性标识进行删除，实际操作时，也可以根据条件对多条数据进行删除</p></blockquote><p>首先分别增加多条数据：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;title&quot;</span><span class="token operator">:</span><span class="token string">&quot;小米手机&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;category&quot;</span><span class="token operator">:</span><span class="token string">&quot;小米&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;images&quot;</span><span class="token operator">:</span><span class="token string">&quot;www.xiaobear.cn&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;price&quot;</span><span class="token operator">:</span><span class="token number">3999.00</span>
<span class="token punctuation">}</span>
<span class="token punctuation">{</span>
    <span class="token property">&quot;title&quot;</span><span class="token operator">:</span><span class="token string">&quot;华为手机&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;category&quot;</span><span class="token operator">:</span><span class="token string">&quot;华为&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;images&quot;</span><span class="token operator">:</span><span class="token string">&quot;www.xiaobear.cn&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;price&quot;</span><span class="token operator">:</span><span class="token number">3999.00</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12),Os={href:"http://127.0.0.1:9200/start/_delete_by_query",target:"_blank",rel:"noopener noreferrer"},Ds=e('<p><img src="'+H+`" alt="image-20210624101012667" loading="lazy"></p><p>请求体内容为：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;query&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token property">&quot;match&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>
            <span class="token property">&quot;price&quot;</span><span class="token operator">:</span> <span class="token number">3999.00</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>删除成功后，服务器响应结果：</p><p><img src="`+R+'" alt="image-20210624101141251" loading="lazy"></p><h5 id="_3、映射操作" tabindex="-1"><a class="header-anchor" href="#_3、映射操作" aria-hidden="true">#</a> 3、映射操作</h5><p>有了索引库，等于有了数据库中的database 。</p><blockquote><p>接下来就需要建索引库(index)中的映射了，类似于数据库 (database)中的表结构 (table)。创建数据库表需要设置字段名称，类型，长度，约束等；索引库也一样，需要知道这个类型下有哪些字段，每个字段有哪些约束信息，这就叫做映射 (mapping)。</p></blockquote><h6 id="_1、创建映射" tabindex="-1"><a class="header-anchor" href="#_1、创建映射" aria-hidden="true">#</a> 1、创建映射</h6>',9),Js={href:"http://127.0.0.1:9200/user/_mapping",target:"_blank",rel:"noopener noreferrer"},Ls=e(`<p>请求内容为：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;properties&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token property">&quot;name&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>
            <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;text&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;index&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token property">&quot;sex&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>
            <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;keyword&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;index&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token property">&quot;phone&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>
            <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;keyword&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;index&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+I+'" alt="image-20210902112314138" loading="lazy"></p><p>服务器的响应</p><p><img src="'+M+'" alt="image-20210902112349705" loading="lazy"></p><p><strong>映射数据说明</strong></p><blockquote><ul><li><p>字段名：任意填写，下面指定许多属性，例如： title 、 subtitle 、 images 、 price</p></li><li><p>type ：类型 Elasticsearch 中支持的数据类型非常丰富，说几个关键的：</p><ul><li>String 类型，又分两种： <ul><li>text：可分词</li><li>keyword：不可分词，数据会作为完整字段进行匹配</li></ul></li><li>Numerical ：数值类型，分两类 <ul><li>基本数据类型：long 、 integer 、 short 、 byte 、 double 、 float 、 half_float</li><li>浮点数的高精度类型：scaled_float</li></ul></li><li>Date ：日期类型</li><li>Array ：数组类型</li><li>Object ：对象</li></ul></li><li><p>index ：是否索引，默认为 true ，也就是说你不进行任何配置，所有字段都会被索引。</p><ul><li>true：字段会被索引，则可以用来进行搜索</li><li>false：字段不会被索引，不能用来搜索</li></ul></li><li><p>store ：是否将数据进行独立存储，默认为 false</p><p>原始的文本会存储在_source 里面，默认情况下其他提取出来的字段都不是独立存储的，是从 _source 里面提取出来的。当然你也可以独立的存储某个字段，只要设置&quot;store&quot;: true 即可，获取独立存储的字段要比从 _source 中解析快得多，但是也会占用更多的空间，所以要根据实际业务需求来设置。</p></li><li><p>analyzer ：分词器，这里的 ik_max_word 即使用 ik 分词器</p></li></ul></blockquote><h6 id="_2、查看映射" tabindex="-1"><a class="header-anchor" href="#_2、查看映射" aria-hidden="true">#</a> 2、查看映射</h6>',8),Gs={href:"http://127.0.0.1:9200/user/_mapping",target:"_blank",rel:"noopener noreferrer"},Us=s("p",null,[s("img",{src:V,alt:"image-20210902113234313",loading:"lazy"})],-1),Hs=s("h6",{id:"_3、索引映射关联",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_3、索引映射关联","aria-hidden":"true"},"#"),n(" 3、索引映射关联")],-1),Rs={href:"http://127.0.0.1:9200/user1",target:"_blank",rel:"noopener noreferrer"},Is=s("p",null,[s("img",{src:W,alt:"image-20210902113659632",loading:"lazy"})],-1);function Ms(Vs,Ws){const a=p("ExternalLinkIcon");return i(),r("div",null,[X,A,s("p",null,[n("Elasticsearch 的官方地址： "),s("a",K,[n("https://www.elastic.co/cn/"),t(a)])]),s("p",null,[n("下载地址："),s("a",Q,[n("https://www.elastic.co/cn/downloads/past-releases#elasticsearch"),t(a)])]),B,s("p",null,[n("打开浏览器（推荐使用谷歌浏览器），输入地址："),s("a",Y,[n("http://localhost:9200"),t(a)]),n(" ，测试结果")]),C,s("p",null,[n("Postman官网： "),s("a",Z,[n("https://www.getpostman.com"),t(a)]),n(" Postman下载 "),s("a",F,[n("https://www.getpostman.com/apps"),t(a)])]),$,s("p",null,[n("在Postman 中，向 ES 服务器发 "),ss,n(" 请求 "),s("a",ns,[n("http://127.0.0.1:9200/start"),t(a)])]),as,s("p",null,[n("在Postman 中，向 ES 服务器发 "),ts,n(" 请求 "),s("a",es,[n("http://127.0.0.1:9200/_cat/indices?v"),t(a)])]),os,ps,is,rs,s("p",null,[n("在Postman 中，向 ES 服务器发 "),ls,n(" 请求 "),s("a",cs,[n("http://127.0.0.1:9200/start"),t(a)])]),us,s("p",null,[n("在Postman 中，向 ES 服务器发 "),ds,n(" 请求 "),s("a",ms,[n("http://127.0.0.1:9200/start"),t(a)])]),ks,s("p",null,[n("在Postman 中，向 ES 服务器发 POST 请求 "),s("a",gs,[n("http://127.0.0.1:9200/start/doc"),t(a)])]),_s,s("p",null,[n("如果想要自定义唯一性标识，需要在创建时指定"),s("a",hs,[n("http://127.0.0.1:9200/start/doc/1"),t(a)]),n(" or "),s("a",vs,[n("http://127.0.0.1:9200/start/_doc/1"),t(a)])]),bs,qs,ys,fs,s("p",null,[n("在Postman 中，向 ES 服务器发 GET 请求 "),s("a",Es,[n("http://127.0.0.1:9200/start/_doc/1"),t(a)])]),xs,s("p",null,[n("和新增文档一样，输入相同的URL 地址请求，如果请求体变化，会将原有的数据内容覆盖 在Postman 中，向 ES 服 务器发 POST 请求 "),s("a",Ts,[n("http://127.0.0.1:9200/start/_doc/1"),t(a)])]),ws,s("p",null,[n("在Postman 中，向 ES 服务器发 POST 请求 "),s("a",Ps,[n("http://127.0.0.1:9200/start/_update/1"),t(a)])]),Ss,s("p",null,[n("在Postman 中，向 ES 服务器发 DELETE 请求 "),s("a",zs,[n("http://127.0.0.1:9200/start/_doc/1"),t(a)])]),js,s("p",null,[n("向ES 服务器发 POST 请求 "),s("a",Os,[n("http://127.0.0.1:9200/start/_delete_by_query"),t(a)])]),Ds,s("p",null,[n("在Postman 中，向 ES 服务器发 PUT 请求"),s("a",Js,[n("http://127.0.0.1:9200/user/_mapping"),t(a)])]),Ls,s("p",null,[n("在Postman 中，向 ES 服务器发 GET 请求"),s("a",Gs,[n("http://127.0.0.1:9200/user/_mapping"),t(a)])]),Us,Hs,s("p",null,[n("在Postman 中，向 ES 服务器发 PUT 请求 "),s("a",Rs,[n("http://127.0.0.1:9200/user1"),t(a)])]),Is])}const As=o(N,[["render",Ms],["__file","get_started.html.vue"]]);export{As as default};
