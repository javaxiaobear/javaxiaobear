import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e}from"./app-f55ccf80.js";const t={},p=e(`<h2 id="_1、引言" tabindex="-1"><a class="header-anchor" href="#_1、引言" aria-hidden="true">#</a> 1、引言</h2><p>阿里巴巴Java开发手册在第一章节，编程规约中OOP规约的第7条提到：</p><blockquote><p>**【强制】**所有整型包装类对象之间值的比较，全部使用equals方法比较。 说明：对于Integer var = ? 在<code>-128至127</code>之间的赋值，Integer对象是在 IntegerCache.cache产生，会复用已有对象，这个区间内的Integer值可以直接使用==进行判断，但是这个区间之外的所有数据，都会在堆上产生，并不会复用已有对象，这是一个大坑，推荐使用equals方法进行判断。</p></blockquote><p>这条建议非常值得大家关注， 而且该问题在 Java 面试中十分常见，看到这条建议，大家是否有以下疑问：</p><ol><li>如何知道对于Integer var = ? 会缓存<code>-128至127</code>之间的赋值？</li><li>为什么会缓存这个范围的值，而不是其他呢？</li></ol><h2 id="_2、分析" tabindex="-1"><a class="header-anchor" href="#_2、分析" aria-hidden="true">#</a> 2、分析</h2><p>我们先看下面测试代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IntegerTest</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Integer</span> a <span class="token operator">=</span> <span class="token number">99</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">99</span><span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token number">188</span><span class="token punctuation">,</span> d <span class="token operator">=</span> <span class="token number">188</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c <span class="token operator">==</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个结果应该一眼就可以看出来，分别是<code>true</code>、<code>false</code></p><p>为什么是这样的结果呢？</p><blockquote><p>相信很多人都知道，Integer的值范围为-128到127，超过就会创建一个新的Integer对象，其实这里的值范围在jdk源码中是指缓存的值范围</p></blockquote><p>那么为什么会缓存这一段区间的数值？缓存的区间可以修改吗？其它的包装类型有没有类似缓存？</p><h3 id="_1、源码分析" tabindex="-1"><a class="header-anchor" href="#_1、源码分析" aria-hidden="true">#</a> 1、源码分析</h3><p>我们知道， <code>Integer var = ? </code>形式声明变量，会通过 <code>java.lang.Integer#valueOf(int) </code>来构造 Integer 对象。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
      * 返回表示指定的 <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">Integer</span></span></span><span class="token punctuation">}</span> 实例
      * <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token keyword">int</span></span></span><span class="token punctuation">}</span> 值。 如果一个新的 <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">Integer</span></span></span><span class="token punctuation">}</span> 实例不是
      * 必需，通常应优先使用此方法
      * 构造函数<span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token punctuation">#</span><span class="token function">Integer</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>，因为这个方法很可能
      * 产生明显更好的空间和时间性能
      *缓存经常请求的值。
      *
      * 此方法将始终缓存 -128 到 127 范围内的值，
      * 包括在内，并且可能缓存此范围之外的其他值。
      *
      * <span class="token keyword">@param</span> <span class="token parameter">i</span> 一个 <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token keyword">int</span></span></span><span class="token punctuation">}</span> 值。
      * <span class="token keyword">@return</span> 一个代表 <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">i</span></span><span class="token punctuation">}</span> 的 <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">Integer</span></span></span><span class="token punctuation">}</span> 实例。
      * <span class="token keyword">@since</span> 1.5
      */</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Integer</span> <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;=</span> <span class="token class-name">IntegerCache</span><span class="token punctuation">.</span>low <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;=</span> <span class="token class-name">IntegerCache</span><span class="token punctuation">.</span>high<span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token class-name">IntegerCache</span><span class="token punctuation">.</span>cache<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token class-name">IntegerCache</span><span class="token punctuation">.</span>low<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过源码可以看出，如果用 Ineger.valueOf(int) 来创建整数对象，参数大于等于整数缓存的最小值（ IntegerCache.low ）并小于等于整数缓存的最大值（ IntegerCache.high）, 会直接从缓存数组 ( java.lang.Integer.IntegerCache#cache ) 中提取整数对象；否则会 new 一个整数对象。</p><h4 id="_1、为什么会缓存这一段区间的整数对象呢" tabindex="-1"><a class="header-anchor" href="#_1、为什么会缓存这一段区间的整数对象呢" aria-hidden="true">#</a> 1、为什么会缓存这一段区间的整数对象呢？</h4><blockquote><p>通过注释我们可以得知：如果不要求必须新建一个整型对象，缓存最常用的值（提前构造缓存范围内的整型对象），会更省空间，速度也更快。</p></blockquote><p>这给我们一个非常重要的启发：<code>如果想减少内存占用，提高程序运行的效率，可以将常用的对象提前缓存起来，需要时直接从缓存中提取</code>。</p><h4 id="_2、下一个问题-缓存的区间可以修改吗" tabindex="-1"><a class="header-anchor" href="#_2、下一个问题-缓存的区间可以修改吗" aria-hidden="true">#</a> 2、下一个问题：缓存的区间可以修改吗？</h4><p>上述的源码看不出来，接着划到IntegerCache静态类源码的部分</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
      *缓存以支持自动装箱的对象标识语义之间的值
      * JLS 要求的 -128 和 127（含）。
      *
      * 缓存在第一次使用时初始化。 缓存的大小
      * 可以由 <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token operator">-</span><span class="token constant">XX</span><span class="token operator">:</span><span class="token class-name">AutoBoxCacheMax</span><span class="token operator">=</span><span class="token generics"><span class="token punctuation">&lt;</span>size<span class="token punctuation">&gt;</span></span></span></span><span class="token punctuation">}</span> 选项控制。
      * VM初始化时，java.lang.Integer.IntegerCache.high属性
      * 可以设置并保存在私有系统属性中
      * sun.misc.VM 类。
      */</span>    
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">IntegerCache</span> <span class="token punctuation">{</span>
        <span class="token comment">//最小的值</span>
        <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> low <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">128</span><span class="token punctuation">;</span>
        <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> high<span class="token punctuation">;</span>
        <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Integer</span> cache<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

        <span class="token keyword">static</span> <span class="token punctuation">{</span>
            <span class="token comment">// high value may be configured by property</span>
            <span class="token keyword">int</span> h <span class="token operator">=</span> <span class="token number">127</span><span class="token punctuation">;</span>
            <span class="token comment">//缓存的最大值是可以通过虚拟机参数 -XX:AutoBoxCacheMax=&lt;size&gt;} 或 -Djava.lang.Integer.IntegerCache.high=&lt;value&gt; 来设置的</span>
            <span class="token class-name">String</span> integerCacheHighPropValue <span class="token operator">=</span>
                sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span><span class="token constant">VM</span><span class="token punctuation">.</span><span class="token function">getSavedProperty</span><span class="token punctuation">(</span><span class="token string">&quot;java.lang.Integer.IntegerCache.high&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>integerCacheHighPropValue <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>integerCacheHighPropValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    i <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment">// Maximum array size is Integer.MAX_VALUE  MAX_VALUE = 0x7fffffff;</span>
                    h <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token operator">-</span>low<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span> <span class="token class-name">NumberFormatException</span> nfe<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// If the property cannot be parsed into an int, ignore it.</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            high <span class="token operator">=</span> h<span class="token punctuation">;</span>

            cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">(</span>high <span class="token operator">-</span> low<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> j <span class="token operator">=</span> low<span class="token punctuation">;</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> cache<span class="token punctuation">.</span>length<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>
                cache<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// range [-128, 127] must be interned (JLS7 5.1.7)</span>
            <span class="token keyword">assert</span> <span class="token class-name">IntegerCache</span><span class="token punctuation">.</span>high <span class="token operator">&gt;=</span> <span class="token number">127</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">private</span> <span class="token class-name">IntegerCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从上述源码中可以得知：</p><ul><li>最小的值是确定的，为<code>low = -128</code></li><li>最大值并不是固定的 <ul><li>缓存的最大值是可以通过虚拟机参数 -XX:AutoBoxCacheMax=size} 或 -Djava.lang.Integer.IntegerCache.high=value来设置的</li><li>当<code>integerCacheHighPropValue</code>不为null时，首先会取一个中间值<code>i = Math.max(i, 127);</code>然后将中间值与Integer的最大值进行比较，取最小的那个赋值给最大值</li></ul></li><li>因此，可以通过虚拟机参数修改Integer的最大值，让缓存的最大值大于160，则最开始的测试代码全为<code>true</code></li></ul><p>现在回答我们的问题</p><blockquote><p>注释上也解释了，是为了自动装箱时可以复用这些对象 ，这也是 JLS2 的要求。我们可以参考 JLS 的 Boxing Conversion 部分的相关描述。 if the value p being boxed is an integer literal of type int between -128 and 127 inclusive (§3.10.1), or the boolean literal true or false (§3.10.3), or a character literal between &#39;\\u0000&#39; and &#39;\\u007f&#39; inclusive (§3.10.4), then let a and b be the results of any two boxing conversions of p . It is always the case that a == b .</p><p>在 -128 到 127 （含）之间的 int 类型的值，或者 boolean 类型的 true 或 false， 以及范围在’\\u0000’和’\\u007f’ （含）之间的 char 类型的数值 p， 自动包装成 a 和 b 两个对象时， 可以使用 a == b 判断 a 和 b 的值是否相等。</p></blockquote><h3 id="_2、反编译" tabindex="-1"><a class="header-anchor" href="#_2、反编译" aria-hidden="true">#</a> 2、反编译</h3><p>首先编译源代码： <code>javac IntegerTest.java</code></p><p>然后需要对代码进行反汇编，执行： javap -c IntegerTest</p><p>如果想了解 javap 的用法，直接输入 javap -help 查看用法提示（很多命令行工具都支持 -help 或 --help 给出用法提示）。</p><p><img src="https://javaxiaobear-1301481032.cos.ap-guangzhou.myqcloud.com/picture-bed/image-20230301101941243.png" alt="image-20230301101941243" loading="lazy"></p><p>反编译后，我们得到以下代码：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>Compiled from <span class="token string">&quot;IntegerTest.java&quot;</span>
public class com<span class="token punctuation">.</span>javaxiaobear<span class="token punctuation">.</span>oop<span class="token punctuation">.</span>IntegerTest <span class="token punctuation">{</span>
public com<span class="token punctuation">.</span>javaxiaobear<span class="token punctuation">.</span>oop<span class="token punctuation">.</span><span class="token function">IntegerTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Code<span class="token operator">:</span>
	<span class="token number">0</span><span class="token operator">:</span> aload_0
	<span class="token number">1</span><span class="token operator">:</span> invokespecial #<span class="token number">1</span> <span class="token comment">// Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span>
	<span class="token number">4</span><span class="token operator">:</span> <span class="token keyword">return</span>
public <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	Code<span class="token operator">:</span>
		<span class="token number">0</span><span class="token operator">:</span> bipush <span class="token number">99</span>
		<span class="token number">2</span><span class="token operator">:</span> invokestatic #<span class="token number">2</span> <span class="token comment">// Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;</span>
		<span class="token number">5</span><span class="token operator">:</span> astore_1
		<span class="token number">6</span><span class="token operator">:</span> bipush <span class="token number">99</span>
		<span class="token number">8</span><span class="token operator">:</span> invokestatic #<span class="token number">2</span> <span class="token comment">// Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;</span>
		<span class="token number">11</span><span class="token operator">:</span> astore_2
		<span class="token number">12</span><span class="token operator">:</span> sipush <span class="token number">188</span>
		<span class="token number">15</span><span class="token operator">:</span> invokestatic #<span class="token number">2</span> <span class="token comment">// Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;</span>
		<span class="token number">18</span><span class="token operator">:</span> astore_3
		<span class="token number">19</span><span class="token operator">:</span> sipush <span class="token number">188</span>
		<span class="token number">22</span><span class="token operator">:</span> invokestatic #<span class="token number">2</span> <span class="token comment">// Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;</span>
		<span class="token number">25</span><span class="token operator">:</span> astore <span class="token number">4</span>
		<span class="token number">27</span><span class="token operator">:</span> getstatic #<span class="token number">3</span> <span class="token comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span>
		<span class="token number">30</span><span class="token operator">:</span> aload_1
		<span class="token number">31</span><span class="token operator">:</span> aload_2
		<span class="token number">32</span><span class="token operator">:</span> if_acmpne <span class="token number">39</span>
		<span class="token number">35</span><span class="token operator">:</span> iconst_1
		<span class="token number">36</span><span class="token operator">:</span> <span class="token keyword">goto</span> <span class="token number">40</span>
		<span class="token number">39</span><span class="token operator">:</span> iconst_0
		<span class="token number">40</span><span class="token operator">:</span> invokevirtual #<span class="token number">4</span> <span class="token comment">// Method java/io/PrintStream.println:(Z)V</span>
		<span class="token number">43</span><span class="token operator">:</span> getstatic #<span class="token number">3</span> <span class="token comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span>
		<span class="token number">46</span><span class="token operator">:</span> aload_3
		<span class="token number">47</span><span class="token operator">:</span> aload <span class="token number">4</span>
		<span class="token number">49</span><span class="token operator">:</span> if_acmpne <span class="token number">56</span>
         <span class="token number">52</span><span class="token operator">:</span> iconst_1
         <span class="token number">53</span><span class="token operator">:</span> <span class="token keyword">goto</span> <span class="token number">57</span>
         <span class="token number">56</span><span class="token operator">:</span> iconst_0
		<span class="token number">57</span><span class="token operator">:</span> invokevirtual #<span class="token number">4</span> <span class="token comment">// Method java/io/PrintStream.println:(Z)V</span>
		<span class="token number">60</span><span class="token operator">:</span> <span class="token keyword">return</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以明确得 &quot;看到&quot; 这四个 \`\`Integer var = ? 形式声明的变量的确是通过 java.lang.Integer#valueOf(int) 来构造 Integer\` 对象的。</p><p>接下来对汇编后的代码进行详细分析，如果看不懂可略过：</p><p>根据《Java Virtual Machine Specification : Java SE 8 Edition》3，后缩写为 JVMS , 第 6 章 虚拟机指令集的相关 描述以及《深入理解 Java 虚拟机》4 414-149 页的 附录 B “虚拟机字节码指令表”。 我们对上述指令进行解读：</p><ol><li>偏移为 0 的指令为： bipush 99，其含义是将单字节整型常量 99推入操作数栈的栈顶；</li><li>偏移为 2 的指令为： invokestatic #2 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer; 表示调用一个 static 函 数，即 java.lang.Integer#valueOf(int) ；</li><li>偏移为 5 的指令为： astore_1 ，其含义是从操作数栈中弹出对象引用，然后将其存到第 1 个局部变量 Slot 中；</li><li>偏移 6 到 25 的指令和上面类似；</li><li>偏移为 30 的指令为 aload_1 ，其含义是从第 1 个局部变量 Slot 取出对象引用（即 a），并将其压入栈；</li><li>偏移为 31 的指令为 aload_2 ，其含义是从第 2 个局部变量 Slot 取出对象引用（即 b），并将其压入栈；</li><li>偏移为 32 的指令为 if_acmpn，该指令为条件跳转指令， if_ 后以 a 开头表示对象的引用比较。 由于该指令有以下特性： if_acmpeq 比较栈两个引用类型数值，相等则跳转 if_acmpne 比较栈两个引用类型数值，不相等则跳转</li><li>由于 Integer 的缓存问题，所以 a 和 b 引用指向同一个地址，因此此条件不成立（成立则跳转到偏移为 39 的指令 处），执行偏移为 35 的指令。</li><li>偏移为 35 的指令: iconst_1 ，其含义为将常量 1 压栈（ Java 虚拟机中 boolean 类型的运算类型为 int ，其中 true 用 1 表示，详见 2.11.1 数据类型和 Java 虚拟机。</li><li>然后执行偏移为 36 的 goto 指令，跳转到偏移为 40 的指令。</li><li>偏移为 40 的指令： invokevirtual #4 // Method java/io/PrintStream.println:(Z)V 。 可知参数描述符为 Z ，返回值描述符为 V 。</li><li>根据 4.3.2 字段描述符 ，可知 FieldType 的字符为 Z 表示 boolean 类型， 值为 true 或 false 。</li><li>根据 4.3.3 字段描述符 ，可知返回值为 void 。</li><li>因此可以知，最终调用了 java.io.PrintStream#println(boolean) 函数打印栈顶常量即 true 。</li><li>然后比较执行偏移 43 到 57 之间的指令，比较 c 和 d， 打印 false 。</li><li>执行偏移为 60 的指令，即 retrun ，程序结束。</li></ol><p>可能看这个有些生疏和抵触，一开始都是这样的，多编译几次看几次，就好了。我们重点不是是分析和研究问题，看懂核心逻辑即可，不要过分纠结于细节。</p><p>如果想深入学习 java 反汇编，强烈建议结合官方的 JVMS 或其中文版:《Java 虚拟机规范》这本书进行拓展学习。</p><p>如果大家不喜欢命令行的方式进行 Java 的反汇编，这里推荐一个简单易用的可视化工具：classpy ，大家可以自行了解学习。</p><h2 id="_3、long缓存问题" tabindex="-1"><a class="header-anchor" href="#_3、long缓存问题" aria-hidden="true">#</a> 3、Long缓存问题</h2><blockquote><p>前面我们分析了Integer缓存问题，举一反三，对Long也进行研究，看看二者有何不同</p></blockquote><h3 id="_1、源码分析-1" tabindex="-1"><a class="header-anchor" href="#_1、源码分析-1" aria-hidden="true">#</a> 1、源码分析</h3><p>类似的，我们接下来分析 java.lang.Long#valueOf(long) 的源码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
      * 返回代表指定的 <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">Long</span></span></span><span class="token punctuation">}</span> 实例
      * <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token keyword">long</span></span></span><span class="token punctuation">}</span> 值。
      * 如果不需要新的 <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">Long</span></span></span><span class="token punctuation">}</span> 实例，则此方法
      * 通常应该优先于构造函数使用
      * <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token punctuation">#</span><span class="token function">Long</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>，因为这种方法可能会产生
      * 通过缓存显着提高空间和时间性能
      * 经常要求的值。
      *
      * 请注意，与 <span class="token punctuation">{</span><span class="token keyword">@linkplain</span> <span class="token reference"><span class="token class-name">Integer</span><span class="token punctuation">#</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span></span>
      * <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">Integer</span></span></span><span class="token punctuation">}</span>类中对应的方法<span class="token punctuation">}</span>，这个方法
      * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span><span class="token punctuation">&gt;</span></span>不需要<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>em</span><span class="token punctuation">&gt;</span></span>在特定的缓存中缓存值
      * 范围。
      *
      * <span class="token keyword">@param</span> <span class="token parameter">l</span> 长值。
      * <span class="token keyword">@return</span> 代表 <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">l</span></span><span class="token punctuation">}</span> 的 <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">Long</span></span></span><span class="token punctuation">}</span> 实例。
      * <span class="token keyword">@since</span> 1.5
      */</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Long</span> <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">long</span> l<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> <span class="token keyword">int</span> offset <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">&gt;=</span> <span class="token operator">-</span><span class="token number">128</span> <span class="token operator">&amp;&amp;</span> l <span class="token operator">&lt;=</span> <span class="token number">127</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// will cache</span>
        <span class="token keyword">return</span> <span class="token class-name">LongCache</span><span class="token punctuation">.</span>cache<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>l <span class="token operator">+</span> offset<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Long</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从源码中可以看到，如果long类型的变量值在[-128,127]之间的话，会直接从缓存对象中提取</p><p>而且注释同样也提到了：缓存的目的是为了提高性能。</p><blockquote><p>Note that unlike the {@linkplain Integer#valueOf(int) corresponding method} in the {@code Integer} class, this method is not required to cache values within a particular range.</p><p>注意：和 Ineger.valueOf(int) 不同的是，此方法并没有被要求缓存特定范围的值。</p></blockquote><p>这也正是上面源码中缓存范围判断的注释为何用 // will cache 的原因（可以对比一下上面 Integer 的缓存的注释）。</p><p>因此我们可知，虽然此处采用了缓存，但应该不是 JLS 的要求。那么 Long 类型的缓存是如何构造的呢？</p><p>接着继续往下看，查看缓存数组的构造</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">LongCache</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">LongCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>

    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Long</span> cache<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Long</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">128</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">127</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">static</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cache<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
            cache<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Long</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，它是在静态代码块中填充缓存数组的</p><h3 id="_2、反编译-1" tabindex="-1"><a class="header-anchor" href="#_2、反编译-1" aria-hidden="true">#</a> 2、反编译</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>public class com<span class="token punctuation">.</span>javaxiaobear<span class="token punctuation">.</span>oop<span class="token punctuation">.</span>LongTest <span class="token punctuation">{</span>
  public com<span class="token punctuation">.</span>javaxiaobear<span class="token punctuation">.</span>oop<span class="token punctuation">.</span><span class="token function">LongTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Code<span class="token operator">:</span>
       <span class="token number">0</span><span class="token operator">:</span> aload_0
       <span class="token number">1</span><span class="token operator">:</span> invokespecial #<span class="token number">1</span>                  <span class="token comment">// Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span>
       <span class="token number">4</span><span class="token operator">:</span> <span class="token keyword">return</span>

  public <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Code<span class="token operator">:</span>
       <span class="token number">0</span><span class="token operator">:</span> ldc2_w        #<span class="token number">7</span>                  <span class="token comment">// long -128l</span>
       <span class="token number">3</span><span class="token operator">:</span> invokestatic  #<span class="token number">9</span>                  <span class="token comment">// Method java/lang/Long.valueOf:(J)Ljava/lang/Long;</span>
       <span class="token number">6</span><span class="token operator">:</span> astore_1
       <span class="token number">7</span><span class="token operator">:</span> ldc2_w        #<span class="token number">7</span>                  <span class="token comment">// long -128l</span>
      <span class="token number">10</span><span class="token operator">:</span> invokestatic  #<span class="token number">9</span>                  <span class="token comment">// Method java/lang/Long.valueOf:(J)Ljava/lang/Long;</span>
      <span class="token number">13</span><span class="token operator">:</span> astore_2
      <span class="token number">14</span><span class="token operator">:</span> ldc2_w        #<span class="token number">15</span>                 <span class="token comment">// long 1001l</span>
      <span class="token number">17</span><span class="token operator">:</span> invokestatic  #<span class="token number">9</span>                  <span class="token comment">// Method java/lang/Long.valueOf:(J)Ljava/lang/Long;</span>
      <span class="token number">20</span><span class="token operator">:</span> astore_3
      <span class="token number">21</span><span class="token operator">:</span> ldc2_w        #<span class="token number">15</span>                 <span class="token comment">// long 1001l</span>
      <span class="token number">24</span><span class="token operator">:</span> invokestatic  #<span class="token number">9</span>                  <span class="token comment">// Method java/lang/Long.valueOf:(J)Ljava/lang/Long;</span>
      <span class="token number">51</span><span class="token operator">:</span> if_acmpne     <span class="token number">58</span>
      <span class="token number">54</span><span class="token operator">:</span> iconst_1
      <span class="token number">55</span><span class="token operator">:</span> <span class="token keyword">goto</span>          <span class="token number">59</span>
      <span class="token number">58</span><span class="token operator">:</span> iconst_0
      <span class="token number">59</span><span class="token operator">:</span> invokevirtual #<span class="token number">23</span>                 <span class="token comment">// Method java/io/PrintStream.println:(Z)V</span>
      <span class="token number">62</span><span class="token operator">:</span> <span class="token keyword">return</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们从上述代码中发现 Long var = ? 的确是通过 java.lang.Long#valueOf(long) 来构造对象的。</p><h2 id="_4、其他基本类型的缓存" tabindex="-1"><a class="header-anchor" href="#_4、其他基本类型的缓存" aria-hidden="true">#</a> 4、其他基本类型的缓存</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//boolean原生类型自动装箱成Boolean</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Boolean</span> <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>b <span class="token operator">?</span> <span class="token constant">TRUE</span> <span class="token operator">:</span> <span class="token constant">FALSE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//byte原生类型自动装箱成Byte</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Byte</span> <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">byte</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> <span class="token keyword">int</span> offset <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token class-name">ByteCache</span><span class="token punctuation">.</span>cache<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>b <span class="token operator">+</span> offset<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//byte原生类型自动装箱成Byte</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Short</span> <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">short</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> <span class="token keyword">int</span> offset <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> sAsInt <span class="token operator">=</span> s<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>sAsInt <span class="token operator">&gt;=</span> <span class="token operator">-</span><span class="token number">128</span> <span class="token operator">&amp;&amp;</span> sAsInt <span class="token operator">&lt;=</span> <span class="token number">127</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// must cache</span>
        <span class="token keyword">return</span> <span class="token class-name">ShortCache</span><span class="token punctuation">.</span>cache<span class="token punctuation">[</span>sAsInt <span class="token operator">+</span> offset<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Short</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//char原生类型自动装箱成Character</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Character</span> <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">&lt;=</span> <span class="token number">127</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// must cache</span>
        <span class="token keyword">return</span> <span class="token class-name">CharacterCache</span><span class="token punctuation">.</span>cache<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>c<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Character</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//int原生类型自动装箱成Integer</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Integer</span> <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;=</span> <span class="token class-name">IntegerCache</span><span class="token punctuation">.</span>low <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;=</span> <span class="token class-name">IntegerCache</span><span class="token punctuation">.</span>high<span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token class-name">IntegerCache</span><span class="token punctuation">.</span>cache<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token class-name">IntegerCache</span><span class="token punctuation">.</span>low<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//int原生类型自动装箱成Long</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Long</span> <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">long</span> l<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> <span class="token keyword">int</span> offset <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">&gt;=</span> <span class="token operator">-</span><span class="token number">128</span> <span class="token operator">&amp;&amp;</span> l <span class="token operator">&lt;=</span> <span class="token number">127</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// will cache</span>
        <span class="token keyword">return</span> <span class="token class-name">LongCache</span><span class="token punctuation">.</span>cache<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>l <span class="token operator">+</span> offset<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Long</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//double原生类型自动装箱成Double</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Double</span> <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">double</span> d<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Double</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//float原生类型自动装箱成Float</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Float</span> <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">float</span> f<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Float</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从valueOf方法就可以看得出来，除了Boolean、Double和Float没有缓存以外，其余的包装类型都有缓存实现。各个包装类型对应的缓存值范围如下：</p><table><thead><tr><th><strong>基本类型</strong></th><th><strong>大小</strong></th><th><strong>包装类型</strong></th><th><strong>缓存范围</strong></th><th><strong>是否支持自定义缓存范围</strong></th></tr></thead><tbody><tr><td>boolean</td><td>6bit</td><td>Bloolean</td><td>/</td><td>/</td></tr><tr><td>char</td><td>8bit</td><td>Character</td><td>0~127</td><td>否</td></tr><tr><td>byte</td><td>8bit</td><td>Byte</td><td>-128~127</td><td>否</td></tr><tr><td>short</td><td>16bit</td><td>Short</td><td>-128~127</td><td>否</td></tr><tr><td>int</td><td>32bit</td><td>Integer</td><td>-128~127</td><td>支持，通过虚拟机参数设定</td></tr><tr><td>long</td><td>64bit</td><td>Long</td><td>-128~127</td><td>否</td></tr><tr><td>float</td><td>32bit</td><td>Float</td><td>/</td><td>/</td></tr><tr><td>double</td><td>64bit</td><td>Double</td><td>/</td><td>/</td></tr></tbody></table><h2 id="_5、总结" tabindex="-1"><a class="header-anchor" href="#_5、总结" aria-hidden="true">#</a> 5、总结</h2><blockquote><p>我们通过源码分析和反编译进行Integer和Long的缓存分析，其他基本类型的缓存分析结果也一并分析并展示了</p><p><strong>总的来说，缓存的目的：就是为了提高性能，复用这些对象</strong></p><p>这就跟我们项目中大部分用到缓存的目的是一样的</p></blockquote><h2 id="_6、参考资料" tabindex="-1"><a class="header-anchor" href="#_6、参考资料" aria-hidden="true">#</a> 6、参考资料</h2><ol><li>阿里巴巴与 Java 社区开发者.《 Java 开发手册 1.7.0》崇山版.</li><li>James Gosling, Bill Joy, Guy Steele, Gilad Bracha, Alex Buckley.《Java Language Specification: Java SE 8Edition》. 2015</li><li>周志明.《深入理解 Java 虚拟机》. 机械工业出版社. 2018</li></ol>`,64),o=[p];function c(l,i){return s(),a("div",null,o)}const k=n(t,[["render",c],["__file","integer-cache.html.vue"]]);export{k as default};
