const l=JSON.parse('{"key":"v-b14afef8","path":"/interview/javaHighLevel/multithreading.html","title":"Java多线程 45道面试题","lang":"zh-CN","frontmatter":{"title":"Java多线程 45道面试题","description":"1、进程与线程的区别？\\r 进程：是实现某个独立功能的程序，它是操作系统（如windows 系统）进行资源分配和调度的一个独立单位，也是可以独立运行的一段程序。\\r 线程：是操作系统能够进行运算调度的最小单位，它被包含在进程之中，是进程中的实际运作单位，可以使⽤用多线程对进⾏行行运算提速。⽐如，如果⼀个线程完成⼀个任务要100毫秒，那么⽤⼗个线程完成改任务...","head":[["meta",{"property":"og:url","content":"https://javaxiaobear.cn/interview/javaHighLevel/multithreading.html"}],["meta",{"property":"og:site_name","content":"小熊学Java 全能学习+面试指南"}],["meta",{"property":"og:title","content":"Java多线程 45道面试题"}],["meta",{"property":"og:description","content":"1、进程与线程的区别？\\r 进程：是实现某个独立功能的程序，它是操作系统（如windows 系统）进行资源分配和调度的一个独立单位，也是可以独立运行的一段程序。\\r 线程：是操作系统能够进行运算调度的最小单位，它被包含在进程之中，是进程中的实际运作单位，可以使⽤用多线程对进⾏行行运算提速。⽐如，如果⼀个线程完成⼀个任务要100毫秒，那么⽤⼗个线程完成改任务..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-09-21T11:19:08.000Z"}],["meta",{"property":"article:author","content":"小熊同学"}],["meta",{"property":"article:modified_time","content":"2023-09-21T11:19:08.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java多线程 45道面试题\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-09-21T11:19:08.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"小熊同学\\",\\"url\\":\\"https://javaxiaobear.cn\\"}]}"]]},"headers":[{"level":2,"title":"1、进程与线程的区别？","slug":"_1、进程与线程的区别","link":"#_1、进程与线程的区别","children":[]},{"level":2,"title":"2、什么是线程安全与线程不安全？","slug":"_2、什么是线程安全与线程不安全","link":"#_2、什么是线程安全与线程不安全","children":[]},{"level":2,"title":"3、什么是多线程？多线程的优点与缺点？","slug":"_3、什么是多线程-多线程的优点与缺点","link":"#_3、什么是多线程-多线程的优点与缺点","children":[]},{"level":2,"title":"4、什么是上下文切换？","slug":"_4、什么是上下文切换","link":"#_4、什么是上下文切换","children":[]},{"level":2,"title":"5、守护线程与用户线程有什么区别？","slug":"_5、守护线程与用户线程有什么区别","link":"#_5、守护线程与用户线程有什么区别","children":[]},{"level":2,"title":"6、什么是线程死锁？","slug":"_6、什么是线程死锁","link":"#_6、什么是线程死锁","children":[]},{"level":2,"title":"7、形成死锁的四个必要条件是什么？","slug":"_7、形成死锁的四个必要条件是什么","link":"#_7、形成死锁的四个必要条件是什么","children":[]},{"level":2,"title":"8、如何避免死锁？","slug":"_8、如何避免死锁","link":"#_8、如何避免死锁","children":[]},{"level":2,"title":"9、创建线程的四种方式？","slug":"_9、创建线程的四种方式","link":"#_9、创建线程的四种方式","children":[{"level":3,"title":"1、继承Thread类","slug":"_1、继承thread类","link":"#_1、继承thread类","children":[]},{"level":3,"title":"2、实现Runnable接口","slug":"_2、实现runnable接口","link":"#_2、实现runnable接口","children":[]},{"level":3,"title":"3、使用Callable和Future创建线程","slug":"_3、使用callable和future创建线程","link":"#_3、使用callable和future创建线程","children":[]},{"level":3,"title":"4、基于线程池创建线程","slug":"_4、基于线程池创建线程","link":"#_4、基于线程池创建线程","children":[]}]},{"level":2,"title":"10、实现Runnable接口与实现Callable接口有什么区别？","slug":"_10、实现runnable接口与实现callable接口有什么区别","link":"#_10、实现runnable接口与实现callable接口有什么区别","children":[]},{"level":2,"title":"11、线程的 run()和 start()有什么区别？","slug":"_11、线程的-run-和-start-有什么区别","link":"#_11、线程的-run-和-start-有什么区别","children":[]},{"level":2,"title":"12、为什么我们调用 start() 方法时会执行 run() 方法，为什么我们不能直接调用run() 方法？","slug":"_12、为什么我们调用-start-方法时会执行-run-方法-为什么我们不能直接调用run-方法","link":"#_12、为什么我们调用-start-方法时会执行-run-方法-为什么我们不能直接调用run-方法","children":[]},{"level":2,"title":"13、什么是 Callable 和 Future?","slug":"_13、什么是-callable-和-future","link":"#_13、什么是-callable-和-future","children":[]},{"level":2,"title":"14、什么是 FutureTask？","slug":"_14、什么是-futuretask","link":"#_14、什么是-futuretask","children":[]},{"level":2,"title":"15、线程有哪5个状态？","slug":"_15、线程有哪5个状态","link":"#_15、线程有哪5个状态","children":[]},{"level":2,"title":"16、Java 中用到的线程调度算法是什么？","slug":"_16、java-中用到的线程调度算法是什么","link":"#_16、java-中用到的线程调度算法是什么","children":[]},{"level":2,"title":"17、线程的调度策略？","slug":"_17、线程的调度策略","link":"#_17、线程的调度策略","children":[]},{"level":2,"title":"18、什么是线程调度器(Thread Scheduler)和时间分片(Time Slicing )？","slug":"_18、什么是线程调度器-thread-scheduler-和时间分片-time-slicing","link":"#_18、什么是线程调度器-thread-scheduler-和时间分片-time-slicing","children":[]},{"level":2,"title":"19、线程同步以及线程调度相关的方法有哪些？","slug":"_19、线程同步以及线程调度相关的方法有哪些","link":"#_19、线程同步以及线程调度相关的方法有哪些","children":[]},{"level":2,"title":"20、sleep() 和 wait() 有什么区别？","slug":"_20、sleep-和-wait-有什么区别","link":"#_20、sleep-和-wait-有什么区别","children":[]},{"level":2,"title":"21、你是如何调用 wait() 方法的？使用 if 块还是循环？为什么？","slug":"_21、你是如何调用-wait-方法的-使用-if-块还是循环-为什么","link":"#_21、你是如何调用-wait-方法的-使用-if-块还是循环-为什么","children":[]},{"level":2,"title":"22、为什么线程通信的方法 wait(), notify()和 notifyAll()被定义在 Object 类里？","slug":"_22、为什么线程通信的方法-wait-notify-和-notifyall-被定义在-object-类里","link":"#_22、为什么线程通信的方法-wait-notify-和-notifyall-被定义在-object-类里","children":[]},{"level":2,"title":"23、为什么 wait(), notify()和 notifyAll()必须在同步方法或者同步块中被调用？","slug":"_23、为什么-wait-notify-和-notifyall-必须在同步方法或者同步块中被调用","link":"#_23、为什么-wait-notify-和-notifyall-必须在同步方法或者同步块中被调用","children":[]},{"level":2,"title":"24、Thread 类中的 yield 方法有什么作用？","slug":"_24、thread-类中的-yield-方法有什么作用","link":"#_24、thread-类中的-yield-方法有什么作用","children":[]},{"level":2,"title":"25、线程的 sleep()方法和 yield()方法有什么区别？","slug":"_25、线程的-sleep-方法和-yield-方法有什么区别","link":"#_25、线程的-sleep-方法和-yield-方法有什么区别","children":[]},{"level":2,"title":"26、如何停止一个正在运行的线程？","slug":"_26、如何停止一个正在运行的线程","link":"#_26、如何停止一个正在运行的线程","children":[]},{"level":2,"title":"27、Java 中 interrupted 和 isInterrupted 方法的区别？","slug":"_27、java-中-interrupted-和-isinterrupted-方法的区别","link":"#_27、java-中-interrupted-和-isinterrupted-方法的区别","children":[]},{"level":2,"title":"28、什么是阻塞式方法？","slug":"_28、什么是阻塞式方法","link":"#_28、什么是阻塞式方法","children":[]},{"level":2,"title":"29、Java 中你怎样唤醒一个阻塞的线程？","slug":"_29、java-中你怎样唤醒一个阻塞的线程","link":"#_29、java-中你怎样唤醒一个阻塞的线程","children":[]},{"level":2,"title":"30、notify() 和 notifyAll() 有什么区别？","slug":"_30、notify-和-notifyall-有什么区别","link":"#_30、notify-和-notifyall-有什么区别","children":[]},{"level":2,"title":"31、如何在两个线程间共享数据？","slug":"_31、如何在两个线程间共享数据","link":"#_31、如何在两个线程间共享数据","children":[]},{"level":2,"title":"32、Java 如何实现多线程之间的通讯和协作？","slug":"_32、java-如何实现多线程之间的通讯和协作","link":"#_32、java-如何实现多线程之间的通讯和协作","children":[]},{"level":2,"title":"33、同步方法和同步块，哪个是更好的选择？","slug":"_33、同步方法和同步块-哪个是更好的选择","link":"#_33、同步方法和同步块-哪个是更好的选择","children":[]},{"level":2,"title":"34、什么是线程同步和线程互斥，有哪几种实现方式？","slug":"_34、什么是线程同步和线程互斥-有哪几种实现方式","link":"#_34、什么是线程同步和线程互斥-有哪几种实现方式","children":[]},{"level":2,"title":"35、在监视器(Monitor)内部，是如何做线程同步的？程序应该做哪种级别的同步？","slug":"_35、在监视器-monitor-内部-是如何做线程同步的-程序应该做哪种级别的同步","link":"#_35、在监视器-monitor-内部-是如何做线程同步的-程序应该做哪种级别的同步","children":[]},{"level":2,"title":"36、如果你提交任务时，线程池队列已满，这时会发生什么？","slug":"_36、如果你提交任务时-线程池队列已满-这时会发生什么","link":"#_36、如果你提交任务时-线程池队列已满-这时会发生什么","children":[]},{"level":2,"title":"37、什么叫线程安全？servlet 是线程安全吗?","slug":"_37、什么叫线程安全-servlet-是线程安全吗","link":"#_37、什么叫线程安全-servlet-是线程安全吗","children":[]},{"level":2,"title":"38、在 Java 程序中怎么保证多线程的运行安全？","slug":"_38、在-java-程序中怎么保证多线程的运行安全","link":"#_38、在-java-程序中怎么保证多线程的运行安全","children":[]},{"level":2,"title":"39、你对线程优先级的理解是什么？","slug":"_39、你对线程优先级的理解是什么","link":"#_39、你对线程优先级的理解是什么","children":[]},{"level":2,"title":"40、线程类的构造方法、静态块是被哪个线程调用的？","slug":"_40、线程类的构造方法、静态块是被哪个线程调用的","link":"#_40、线程类的构造方法、静态块是被哪个线程调用的","children":[]},{"level":2,"title":"41、Java 中怎么获取一份线程 dump 文件？你如何在 Java 中获取线程堆栈？","slug":"_41、java-中怎么获取一份线程-dump-文件-你如何在-java-中获取线程堆栈","link":"#_41、java-中怎么获取一份线程-dump-文件-你如何在-java-中获取线程堆栈","children":[]},{"level":2,"title":"42、一个线程运行时发生异常会怎样？","slug":"_42、一个线程运行时发生异常会怎样","link":"#_42、一个线程运行时发生异常会怎样","children":[]},{"level":2,"title":"43、Java 线程数过多会造成什么异常？","slug":"_43、java-线程数过多会造成什么异常","link":"#_43、java-线程数过多会造成什么异常","children":[]},{"level":2,"title":"44、多线程的常用方法？","slug":"_44、多线程的常用方法","link":"#_44、多线程的常用方法","children":[]},{"level":2,"title":"45、新建T1、T2、T3 三个线程，如何保证它们按顺序执行？","slug":"_45、新建t1、t2、t3-三个线程-如何保证它们按顺序执行","link":"#_45、新建t1、t2、t3-三个线程-如何保证它们按顺序执行","children":[]}],"git":{"createdTime":1695295148000,"updatedTime":1695295148000,"contributors":[{"name":"javaxiaobear","email":"2861184805@qq.com","commits":1}]},"readingTime":{"minutes":32.42,"words":9725},"filePathRelative":"interview/javaHighLevel/multithreading.md","localizedDate":"2023年9月21日","copyright":{"author":"小熊学Java"},"autoDesc":true,"excerpt":""}');export{l as data};
