import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as s,e}from"./app-aeb4ead9.js";const p={},t=e(`<h2 id="_1、概述" tabindex="-1"><a class="header-anchor" href="#_1、概述" aria-hidden="true">#</a> 1、概述</h2><h3 id="_1、什么是数据结构" tabindex="-1"><a class="header-anchor" href="#_1、什么是数据结构" aria-hidden="true">#</a> 1、什么是数据结构</h3><blockquote><p>数据结构是一门研究非数值计算的程序设计问题中的操作对象，以及他们之间的关系和操作等相关问题的学科。</p><p>简单的说：数据结构就是把数据元素按照一定的关系组织起来的集合，用来组织和存储数据</p></blockquote><h3 id="_2、数据结构分类" tabindex="-1"><a class="header-anchor" href="#_2、数据结构分类" aria-hidden="true">#</a> 2、数据结构分类</h3><blockquote><p>传统上，我们可以把数据结构分为逻辑结构和物理结构两大类。</p></blockquote><h4 id="_1、逻辑结构" tabindex="-1"><a class="header-anchor" href="#_1、逻辑结构" aria-hidden="true">#</a> 1、逻辑结构</h4><blockquote><p>逻辑结构是从具体问题中抽象出来的模型，是抽象意义上的结构，按照对象中数据元素之间的相互关系分类。</p></blockquote><ol><li><p>集合结构：集合结构中数据元素除了属于同一个集合外，他们之间没有任何其他的关系。</p></li><li><p>线性结构：线性结构中的数据元素之间存在一对一的关系</p></li><li><p>树形结构：树形结构中的数据元素之间存在一对多的层次关系</p></li><li><p>图形结构：图形结构的数据元素是多对多的关系</p></li></ol><h4 id="_2、物理结构" tabindex="-1"><a class="header-anchor" href="#_2、物理结构" aria-hidden="true">#</a> 2、物理结构</h4><p>逻辑结构在计算机中真正的表示方式（又称为映像）称为物理结构，也可以叫做存储结构。常见的物理结构有顺序存储结构、链式存储结构。</p><ol><li>顺序存储结构：把数据元素放到地址连续的存储单元里面，其数据间的逻辑关系和物理关系是一致的 ，比如我们常用的数组就是顺序存储结构。</li></ol><p>顺序存储结构存在一定的弊端，就像生活中排时也会有人插队也可能有人有特殊情况突然离开，这时候整个结构都处于变化中，此时就需要链式存储结构。</p><ol start="2"><li>链式存储结构：是把数据元素存放在任意的存储单元里面，这组存储单元可以是连续的也可以是不连续的。此时，数据元素之间并不能反映元素间的逻辑关系，因此在链式存储结构中引进了一个指针存放数据元素的地址，这样通过地址就可以找到相关联数据元素的位置</li></ol><h3 id="_3、什么是算法" tabindex="-1"><a class="header-anchor" href="#_3、什么是算法" aria-hidden="true">#</a> 3、什么是算法</h3><blockquote><p>算法是指解题方案的准确而完整的描述，是一系列解决问题的清晰指令，算法代表着用系统的方法解决问题的策略 机制。也就是说，能够对一定规范的输入，在有限时间内获得所要求的输出。</p><p>简单的说：根据一定的条件，对一些数据进行计算，得到需要的结果。</p></blockquote><h3 id="_4、算法初体验" tabindex="-1"><a class="header-anchor" href="#_4、算法初体验" aria-hidden="true">#</a> 4、算法初体验</h3><h4 id="_1、案例1" tabindex="-1"><a class="header-anchor" href="#_1、案例1" aria-hidden="true">#</a> 1、案例1</h4><blockquote><p>计算1到100的和</p></blockquote><p>解法1：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
     * 解法1：利用for循环相加
     * <span class="token keyword">@param</span> <span class="token parameter">n</span>
     * <span class="token keyword">@return</span>
     */</span>
<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getSum</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        sum <span class="token operator">+=</span> i<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> sum<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解法2：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
     * 利用高斯定理
     * <span class="token keyword">@param</span> <span class="token parameter">n</span>
     * <span class="token keyword">@return</span>
     */</span>
<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getSum2</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> sum<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>第一种解法要完成需求，要完成以下几个动作： 1.定义两个整型变量； 2.执行100次加法运算； 3.打印结果到控制台；</p></blockquote><blockquote><p>第二种解法要完成需求，要完成以下几个动作： 1.定义两个整型变量； 2.执行1次加法运算，1次乘法运算，一次除法运算，总共3次运算； 3.打印结果到控制台；</p></blockquote><p>很明显，第二种算法完成需求，花费的时间更少一些。</p><h4 id="_2、案例2" tabindex="-1"><a class="header-anchor" href="#_2、案例2" aria-hidden="true">#</a> 2、案例2</h4><blockquote><p>计算10的阶乘</p></blockquote><p>解法1：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
     * 利用递归计算
     * <span class="token keyword">@param</span> <span class="token parameter">n</span>
     * <span class="token keyword">@return</span>
     */</span>
<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getFactorial</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">==</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> n <span class="token operator">*</span> <span class="token function">getFactorial</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解法2：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getFactorial2</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            sum <span class="token operator">*=</span> i<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> sum<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>第一种解法，使用递归完成需求，fun1方法会执行10次，并且第一次执行未完毕，调用第二次执行，第二次执行未完毕，调用第三次执行...最终，最多的时候，需要在栈内存同时开辟10块内存分别执行10个fun1方法。</p></blockquote><blockquote><p>第二种解法，使用for循环完成需求，fun2方法只会执行一次，最终，只需要在栈内存开辟一块内存执行fun2方法 即可。</p></blockquote><p>很明显，第二种算法完成需求，占用的内存空间更小。</p>`,34),o=[t];function c(i,l){return a(),s("div",null,o)}const d=n(p,[["render",c],["__file","overview.html.vue"]]);export{d as default};
