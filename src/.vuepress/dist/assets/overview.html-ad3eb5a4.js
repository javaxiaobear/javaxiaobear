import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as l,c as e,e as c}from"./app-aeb4ead9.js";const s="/assets/image-20210623144515756-a26c007c.png",i={},r=c('<h3 id="_1、什么是elasticsearch" tabindex="-1"><a class="header-anchor" href="#_1、什么是elasticsearch" aria-hidden="true">#</a> 1、什么是Elasticsearch</h3><p>​ The Elastic Stack, 包括 Elasticsearch、Kibana、Beats 和 Logstash（也称为 ELK Stack）。能够安全可靠地获取任何来源、任何格式的数据，然后实时地对数据进行搜索、分析和可视化。Elaticsearch，简称为ES， ES是一个开源的高扩展的分布式全文搜索引擎，是整个Elastic Stack技术栈的核心。它可以近乎实时的存储、检索数据；本身扩展性很好，可以扩展到上百台服务器，处理PB级别的数据。</p><h3 id="_2、全文搜索引擎" tabindex="-1"><a class="header-anchor" href="#_2、全文搜索引擎" aria-hidden="true">#</a> 2、全文搜索引擎</h3><p>​ Google，百度类的网站搜索，它们都是根据网页中的关键字生成索引，我们在搜索的时候输入关键字，它们会将该关键字即索引匹配到的所有网页返回；还有常见的项目中应用日志的搜索等等。对于这些非结构化的数据文本，关系型数据库搜索不是能很好的支持。</p><p>​ 一般传统数据库，全文检索都实现的很鸡肋，因为一般也没人用数据库存文本字段。进行全文检索需要扫描整个表，如果数据量大的话即使对SQL的语法优化，也收效甚微。建立了索引，但是维护起来也很麻烦，对于 insert 和 update 操作都会重新构建索引。</p><p>​ 基于以上原因可以分析得出，在一些生产环境中，使用常规的搜索方式，性能是非常差的：</p><ul><li>搜索的数据对象是大量的非结构化的文本数据。</li><li>文件记录量达到数十万或数百万个甚至更多。</li><li>支持大量基于交互式文本的查询。</li><li>需求非常灵活的全文搜索查询。</li><li>对高度相关的搜索结果的有特殊需求，但是没有可用的关系数据库可以满足。</li><li>对不同记录类型、非文本数据操作或安全事务处理的需求相对较少的情况。</li></ul><p>为了解决结构化数据搜索和非结构化数据搜索性能问题，我们就需要专业，健壮，强大的全文搜索引擎，这里说到的全文搜索引擎指的是目前广泛应用的主流搜索引擎。它的工作原理是计算机索引程序通过扫描文章中的每一个词，对每一个词建立一个索引，指明该词在文章中出现的次数和位置，当用户查询时，检索程序就根据事先建立的索引进行查找，并将查找的结果反馈给用户的检索方式。这个过程类似于通过字典中的检索字表查字的过程。</p><h3 id="_3、elasticsearch-and-solr" tabindex="-1"><a class="header-anchor" href="#_3、elasticsearch-and-solr" aria-hidden="true">#</a> 3、Elasticsearch And Solr</h3><p>​ Lucene是Apache软件基金会Jakarta项目组的一个子项目，提供了一个简单却强大的应用程式接口，能够做全文索引和搜寻。在Java开发环境里Lucene是一个成熟的免费开源工具。就其本身而言，Lucene是当前以及最近几年最受欢迎的免费Java信息检索程序库。但Lucene只是一个提供全文搜索功能类库的核心工具包，而真正使用它还需要一个完善的服务框架搭建起来进行应用。</p><p>目前市面上流行的搜索引擎软件，主流的就两款：<strong>Elasticsearch</strong>和<strong>Solr</strong>,这两款都是基于Lucene搭建的，可以独立部署启动的搜索引擎服务软件。由于内核相同，所以两者除了服务器安装、部署、管理、集群以外，对于数据的操作 修改、添加、保存、查询等等都十分类似。</p><p><img src="'+s+'" alt="image-20210623144515756" loading="lazy"></p><h3 id="_4、elasticsearch-or-solr" tabindex="-1"><a class="header-anchor" href="#_4、elasticsearch-or-solr" aria-hidden="true">#</a> 4、Elasticsearch Or Solr</h3><p>Elasticsearch和Solr都是开源搜索引擎，那么我们在使用时该如何选择呢？</p><ul><li>Google 搜索趋势结果表明，与 Solr 相比， Elasticsearch 具有很大的吸引力，但这并不意味着 Apache Solr 已经死亡。虽然有些人可能不这么认为，但 Solr 仍然是最受欢迎的搜索引擎之一，拥有强大的社区和开源支持。</li><li>与 Solr 相比， Elasticsearch 易于安装且非常轻巧。此外，你可以在几分钟内安装并运行Elasticsearch 。但是，如果 Elasticsearch 管理不当，这种易于部署和使用可能会成为一个问题。基于 JSON 的配置很简单，但如果要为文件中的每个配置指定注释，那么它不适合您。总的来说，如果你的应用使用 的是 JSON ，那么 Elasticsearch 是一个更好的选择。否则，请使用 Solr ，因为它的 schema.xml 和 solrconfig.xml 都有很好的文档记录。</li><li>Solr 拥有更大，更成熟的用户，开发者和贡献者社区。 ES 虽拥有的规模较小但活跃的用户社区以及不断增长的贡献者社区。Solr贡献者和提交者来自许多不同的组织，而 Elasticsearch 提交者来自单个公司。</li><li>Solr 更成熟，但 ES 增长迅速，更稳定。</li><li>Solr 是一个非常有据可查的产品，具有清晰的示例和 API 用例场景。 Elasticsearch 的文档组织良好，但它缺乏好的示例和清晰的配置说明。</li></ul><p><strong>那么，到底是Solr 还是 Elasticsearch？</strong></p><blockquote><ul><li>由于易于使用， Elasticsearch 在新开发者中更受欢迎。一个下载和一个命令就可以启动一切。</li><li>如果除了搜索文本之外还需要它来处理分析查询， Elasticsearch 是更好的选择</li><li>如果需要分布式索引，则需要选择 Elasticsearch 。对于需要良好可伸缩性和 以及 性能分布式环境 Elasticsearch 是更好的选择。</li><li>Elasticsearch 在开源日志管理用例中占据主导地位，许多组织在 Elasticsearch 中索引它们的日志以使其可搜索。</li><li>如果你喜欢监控和指标，那么请使用Elasticsearch ，因为相对于Solr，Elasticsearch 暴露了更多的关键指标</li></ul></blockquote>',17),t=[r];function o(h,n){return l(),e("div",null,t)}const p=a(i,[["render",o],["__file","overview.html.vue"]]);export{p as default};
