import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e as t}from"./app-aeb4ead9.js";const e={},o=t(`<h2 id="_1、什么是java反射机制" tabindex="-1"><a class="header-anchor" href="#_1、什么是java反射机制" aria-hidden="true">#</a> 1、什么是Java反射机制？</h2><blockquote><p>Java的反射（reflection）机制是指在程序的运行状态中，可以构造任意一个类的对象，可以了解任意一个对象所属的类，可以了解任意一个类的成员变量和方法，可以调用任意一个对象的属性和方法。 这种动态获取程序信息以及动态调用对象的功能称为Java语言的反射机制。</p></blockquote><h2 id="_1、除了使用new创建对象之外-还可以用什么方法创建对象" tabindex="-1"><a class="header-anchor" href="#_1、除了使用new创建对象之外-还可以用什么方法创建对象" aria-hidden="true">#</a> 1、除了使用new创建对象之外，还可以用什么方法创建对象？</h2><blockquote><p>使用Java反射可以创建对象!</p></blockquote><h2 id="_2、java反射创建对象效率高还是通过new创建对象的效率高" tabindex="-1"><a class="header-anchor" href="#_2、java反射创建对象效率高还是通过new创建对象的效率高" aria-hidden="true">#</a> 2、Java反射创建对象效率高还是通过new创建对象的效率高？</h2><blockquote><p>通过<strong>new</strong>创建对象的效率比较<strong>高</strong>。通过反射时，先找查找类资源，使用类加载器创建，过程比较繁琐，所以效率较低</p></blockquote><h2 id="_3、java反射的作用" tabindex="-1"><a class="header-anchor" href="#_3、java反射的作用" aria-hidden="true">#</a> 3、java反射的作用？</h2><blockquote><p>反射机制是在运行时，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意个对象，都能够调用它的任意一个方法。在java中，只要给定类的名字，就可以通过反射机制来获得类的所有信息。</p><p><mark>这种动态获取的信息以及动态调用对象的方法的功能称为Java语言的反射机制</mark></p><ul><li>在运行时判定任意一个对象所属的类</li><li>在运行时构造任意一个类的对象</li><li>在运行时判定任意一个类所具有的成员变量和方法</li><li>在运行时调用任意一个对象的成员变量和 方法</li><li>在运行调用任意一个对象的方法</li><li>生成动态代码</li></ul></blockquote><h2 id="_4、哪些地方会用到反射" tabindex="-1"><a class="header-anchor" href="#_4、哪些地方会用到反射" aria-hidden="true">#</a> 4、哪些地方会用到反射？</h2><blockquote><ol><li>JDBC中，利用反射动态加载数据库驱动程序</li><li>Web服务器中利用反射调用Servlet的服务方法</li><li>框架用到反射机制，注入属性，调用方法，如Spring</li></ol></blockquote><h2 id="_5、反射的实现方法" tabindex="-1"><a class="header-anchor" href="#_5、反射的实现方法" aria-hidden="true">#</a> 5、反射的实现方法？</h2><blockquote><ol><li>Class.forName(“类的路径”)</li><li>类名.class</li><li>对象名.getClass()</li><li>基本类型的包装类，可以调用包装类的Type属性来获得该包装类的Class对象</li></ol></blockquote><h2 id="_6、实现java反射的类" tabindex="-1"><a class="header-anchor" href="#_6、实现java反射的类" aria-hidden="true">#</a> 6、实现Java反射的类</h2><blockquote><ul><li>Class：表示正在运行的Java应用程序中的类和接口 注意： 所有获取对象的信息都需要Class类来实现。</li><li>Field：提供有关类和接口的属性信息，以及对它的动态访问权限。</li><li>Constructor：提供关于类的单个构造方法的信息以及它的访问权限</li><li>Method：提供类或接口中某个方法的信息</li></ul></blockquote><h2 id="_7、反射机制有哪些优缺点" tabindex="-1"><a class="header-anchor" href="#_7、反射机制有哪些优缺点" aria-hidden="true">#</a> 7、反射机制有哪些优缺点？</h2><blockquote><p><strong>优点</strong>：</p><ul><li>能够运行时动态获取类的实例，提高灵活性；</li><li>与动态编译结合</li></ul><p><strong>缺点</strong>：</p><ul><li>使用反射性能较低，需要解析字节码，将内存中的对象进行解析。</li></ul><p>解决方案：</p><ol><li>通过setAccessible(true)关闭JDK的安全检查来提升反射速度；</li><li>多次创建一个类的实例时，有缓存会快很多</li><li>ReflflectASM工具类，通过字节码生成的方式加快反射速度</li><li>相对不安全，破坏了封装性（因为通过反射可以获得私有方法和属性）</li></ol></blockquote><h2 id="_8、java反射api" tabindex="-1"><a class="header-anchor" href="#_8、java反射api" aria-hidden="true">#</a> 8、Java反射API</h2><blockquote><p><strong>反射 API 用来生成 JVM 中的类、接口或则对象的信息</strong></p><ol><li>Class 类：反射的核心类，可以获取类的属性，方法等信息。</li><li>Field 类：Java.lang.reflec 包中的类，表示类的成员变量，可以用来获取和设置类之中的属性 值。</li><li>Method 类： Java.lang.reflec 包中的类，表示类的方法，它可以用来获取类中的方法信息或 者执行方法。</li><li>Constructor 类： Java.lang.reflec 包中的类，表示类的构造方法。</li></ol></blockquote><h2 id="_9、反射使用步骤-获取-class-对象、调用对象方法" tabindex="-1"><a class="header-anchor" href="#_9、反射使用步骤-获取-class-对象、调用对象方法" aria-hidden="true">#</a> 9、反射使用步骤（获取 Class 对象、调用对象方法）</h2><blockquote><ol><li>获取想要操作的类的 Class 对象，他是反射的核心，通过 Class 对象我们可以任意调用类的方法。</li><li>调用 Class 类中的方法，既就是反射的使用阶段。</li><li>使用反射 API 来操作这些信息。</li></ol></blockquote><h2 id="_10、获取-class-对象有几种方法" tabindex="-1"><a class="header-anchor" href="#_10、获取-class-对象有几种方法" aria-hidden="true">#</a> 10、获取 Class 对象有几种方法</h2><blockquote><ol><li><p>调用某个对象的 getClass()方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Person</span> p<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Class</span> clazz<span class="token operator">=</span>p<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>调用某个类的 class 属性来获取该类对应的 Class 对象</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Class</span> clazz<span class="token operator">=</span><span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><strong>使用 Class 类中的 forName()静态方法(最安全/性能最好)</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Class</span> clazz<span class="token operator">=</span><span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">&quot;类的全路径&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//最常用</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当我们获得了想要操作的类的 Class 对象后，可以通过 Class 类中的方法获取并查看该类中的方法和属性。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//获取 Person 类的 Class 对象</span>
<span class="token class-name">Class</span> clazz<span class="token operator">=</span><span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">&quot;reflection.Person&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//获取 Person 类的所有方法信息</span>
<span class="token class-name">Method</span><span class="token punctuation">[</span><span class="token punctuation">]</span> method<span class="token operator">=</span>clazz<span class="token punctuation">.</span><span class="token function">getDeclaredMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Method</span> m<span class="token operator">:</span>method<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//获取 Person 类的所有成员属性信息</span>
<span class="token class-name">Field</span><span class="token punctuation">[</span><span class="token punctuation">]</span> field<span class="token operator">=</span>clazz<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Field</span> f<span class="token operator">:</span>field<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//获取 Person 类的所有构造方法信息</span>
<span class="token class-name">Constructor</span><span class="token punctuation">[</span><span class="token punctuation">]</span> constructor<span class="token operator">=</span>clazz<span class="token punctuation">.</span><span class="token function">getDeclaredConstructors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Constructor</span> c<span class="token operator">:</span>constructor<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol></blockquote><h2 id="_11、利用反射动态创建对象实例" tabindex="-1"><a class="header-anchor" href="#_11、利用反射动态创建对象实例" aria-hidden="true">#</a> 11、利用反射动态创建对象实例</h2><blockquote><ol><li><p>Class 对象的 newInstance()</p><p>使用 Class 对象的 newInstance()方法来创建该 Class 对象对应类的实例，但是这种方法要求该 Class 对象对应的类有默认的空构造器。</p></li><li><p>调用 Constructor 对象的 newInstance()</p><p>先使用 Class 对象获取指定的 Constructor 对象，再调用 Constructor 对象的 newInstance()方法来创建 Class 对象对应类的实例,通过这种方法可以选定构造方法创建实例。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//获取 Person 类的 Class 对象</span>
<span class="token class-name">Class</span> clazz<span class="token operator">=</span><span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">&quot;reflection.Person&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//使用.newInstane 方法创建对象</span>
<span class="token class-name">Person</span> p<span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">)</span> clazz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//获取构造方法并创建对象</span>
<span class="token class-name">Constructor</span> c<span class="token operator">=</span>clazz<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//创建对象并设置属性13/04/2018</span>
<span class="token class-name">Person</span> p1<span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">)</span> c<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token string">&quot;李四&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;男&quot;</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol></blockquote>`,24),p=[o];function l(c,i){return s(),a("div",null,p)}const k=n(e,[["render",l],["__file","reflection.html.vue"]]);export{k as default};
