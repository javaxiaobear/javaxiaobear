import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e as t}from"./app-aeb4ead9.js";const e="/assets/image-20200628115132789-148867fb.png",o={},p=t(`<ul><li><code>@GetMapping</code> ==<code> @RequestMapping(method = RequestMethod.GET)</code></li><li><code>@PostMapping</code> == <code> @RequestMapping(method = RequestMethod.POST)</code></li><li><code>@PutMapping </code> == <code> @RequestMapping(method = RequestMethod.PUT)</code></li><li><code>@DeleteMapping </code> == <code> @RequestMapping(method = RequestMethod.DELETE)</code></li><li><code>@PatchMapping </code> == <code> @RequestMapping(method = RequestMethod.PATCH)</code></li></ul><blockquote><p>可以使用<code>@RequestMapping</code>批注将请求映射到控制器方法。它具有各种属性，可以通过URL，HTTP方法，请求参数，标头和媒体类型进行匹配。您可以在类级别使用它来表示共享的映射，也可以在方法级别使用它来缩小到特定的端点映射。</p><ul><li><p>SpringMVC 使用@RequestMapping 注解为控制器指定可以处理哪些 URL 请求</p></li><li><p>在控制器的类定义及方法定义处都可标注 @RequestMapping</p><ul><li>标记在类上：提供初步的请求映射信息。相对于 WEB 应用的根目录</li><li>标记在方法上：提供进一步的细分映射信息。相对于标记在类上的 URL。</li></ul></li><li><p>若类上未标注 @RequestMapping，则方法处标记的 URL 相对于 WEB 应用的根目录</p></li><li><p>作用：DispatcherServlet 截获请求后，就通过控制器上 @RequestMapping 提供的映射信息确定请求所对应的处理方法。</p></li></ul></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Controller</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ControllerTest3</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/test3&quot;</span><span class="token punctuation">)</span>
    <span class="token doc-comment comment">/**
     * 	映射请求的名称：用于客户端请求；类似Struts2 中action 映射配置的，action 名称
     * 	1 使用@RequestMapping 注解来映射请求的 URL
     * 	2 返回值会通过视图解析器解析为实际的物理视图,
     * 	对于 InternalResourceViewResolver 视图解析器,
     * 	会做如下的解析:
     * 	通过 prefix + returnVal + 后缀 这样的方式得到实际的物理视图, 然会做转发操作.
     * 	/WEB-INF/jsp/test.jsp
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;test&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1、映射请求参数、请求方法或请求头" tabindex="-1"><a class="header-anchor" href="#_1、映射请求参数、请求方法或请求头" aria-hidden="true">#</a> 1、映射请求参数、请求方法或请求头</h3><blockquote><ol><li><p>@RequestMapping 除了可以使用请求 URL 映射请求外，还可以使用请求方法、请求参数及请求头映射请求</p></li><li><p>@RequestMapping 的 value【重点】、method【重点】、params【了解】 及 heads 【了解】 分别表示请求 URL、请求方法、请求参数及请求头的映射条件，他们之间是与的关系，联合使用多个条件可让请求映射更加精确化。</p></li><li><p>params 和 headers 支持简单的表达式：</p></li></ol><ul><li><p>param1: 表示请求必须包含名为 param1 的请求参数</p></li><li><p>!param1: 表示请求不能包含名为 param1 的请求参数</p></li><li><p>param1 != value1: 表示请求包含名为 param1 的请求参数，但其值不能为 value1 {&quot;param1=value1&quot;, &quot;param2&quot;}: 请求必须包含名为 param1 和 param2 的两个请求参数，且 param1 参数的值必须为 value1</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Controller</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RequestController</span> <span class="token punctuation">{</span>

   <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;/t1&quot;</span><span class="token punctuation">,</span>method <span class="token operator">=</span> <span class="token class-name">RequestMethod</span><span class="token punctuation">.</span><span class="token constant">POST</span><span class="token punctuation">)</span>
   <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token class-name">Model</span> model<span class="token punctuation">)</span><span class="token punctuation">{</span>
       model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;msg&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;get请求方式成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token keyword">return</span> <span class="token string">&quot;test1&quot;</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>发生错误</p><p><img src="`+e+`" alt="image-20200628115132789" loading="lazy"></p></li></ul></li></ul></blockquote><h3 id="_2、url模式" tabindex="-1"><a class="header-anchor" href="#_2、url模式" aria-hidden="true">#</a> 2、URL模式</h3><table><thead><tr><th style="text-align:left;">模式</th><th style="text-align:left;">描述</th><th style="text-align:left;">例</th></tr></thead><tbody><tr><td style="text-align:left;"><code>?</code></td><td style="text-align:left;">匹配一个字符</td><td style="text-align:left;"><code>&quot;/pages/t?st.html&quot;</code>比赛<code>&quot;/pages/test.html&quot;</code> 和<code>&quot;/pages/t3st.html&quot;</code></td></tr><tr><td style="text-align:left;"><code>*</code></td><td style="text-align:left;">匹配路径段中的零个或多个字符</td><td style="text-align:left;"><code>&quot;/resources/*.png&quot;</code> 火柴 <code>&quot;/resources/file.png&quot;\`\`&quot;/projects/*/versions&quot;</code>匹配<code>&quot;/projects/spring/versions&quot;</code>但不匹配<code>&quot;/projects/spring/boot/versions&quot;</code></td></tr><tr><td style="text-align:left;"><code>**</code></td><td style="text-align:left;">匹配零个或多个路径段，直到路径结束</td><td style="text-align:left;"><code>&quot;/resources/**&quot;</code>比赛<code>&quot;/resources/file.png&quot;</code>和<code>&quot;/resources/images/file.png&quot;</code></td></tr><tr><td style="text-align:left;"><code>{name}</code></td><td style="text-align:left;">匹配路径段并将其捕获为名为“ name”的变量</td><td style="text-align:left;"><code>&quot;/projects/{project}/versions&quot;</code>比赛<code>&quot;/projects/spring/versions&quot;</code>和捕获<code>project=spring</code></td></tr><tr><td style="text-align:left;"><code>{name:[a-z]+}</code></td><td style="text-align:left;">将正则表达式匹配<code>&quot;[a-z]+&quot;</code>为名为“名称”的路径变量</td><td style="text-align:left;"><code>&quot;/projects/{project:[a-z]+}/versions&quot;</code>匹配<code>&quot;/projects/spring/versions&quot;</code>但不匹配<code>&quot;/projects/spring1/versions&quot;</code></td></tr></tbody></table><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token doc-comment comment">/**
     *@RequestMapping(&quot;/t2/ab??&quot;) 匹配http://localhost:8080/springmvc_04_controller_war_exploded/t2/abcd。。。
     */</span>
    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/t2/ab??&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testUrl</span><span class="token punctuation">(</span><span class="token class-name">Model</span> model<span class="token punctuation">)</span><span class="token punctuation">{</span>
        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;msg&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;请求成功！xiaobear&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">&quot;test1&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3、requestmapping-映射请求占位符pathvariable-注解" tabindex="-1"><a class="header-anchor" href="#_3、requestmapping-映射请求占位符pathvariable-注解" aria-hidden="true">#</a> 3、<code>RequestMapping</code> 映射请求占位符<code>PathVariable </code>注解</h3><h4 id="_1、-pathvariable" tabindex="-1"><a class="header-anchor" href="#_1、-pathvariable" aria-hidden="true">#</a> 1、<code>@PathVariable</code></h4><p>通过<code> @PathVariable</code> 可以将 URL 中占位符参数绑定到控制器处理方法的入参中</p><p>URL 中的 {xxx} 占位符可以通过<code>@PathVariable(&quot;xxx&quot;)</code>绑定到操作方法的入参中。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/t3/{a}/{b}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testPath</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token annotation punctuation">@PathVariable</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token class-name">Model</span> model<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">int</span> restPath <span class="token operator">=</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span>
        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;msg&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;结果为：&quot;</span><span class="token operator">+</span>restPath<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">&quot;test1&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13),l=[p];function i(c,u){return s(),a("div",null,l)}const k=n(o,[["render",i],["__file","requestMapping.html.vue"]]);export{k as default};
