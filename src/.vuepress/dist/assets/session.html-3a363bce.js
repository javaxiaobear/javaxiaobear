import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as i,c,a as n,b as s,d as e,e as t}from"./app-aeb4ead9.js";const l="/assets/image-154cbb16.png",r={},u=t(`<h2 id="_1、传统session" tabindex="-1"><a class="header-anchor" href="#_1、传统session" aria-hidden="true">#</a> 1、传统Session</h2><h3 id="_1、传统session的概述" tabindex="-1"><a class="header-anchor" href="#_1、传统session的概述" aria-hidden="true">#</a> 1、传统session的概述</h3><h4 id="_1、认证过程" tabindex="-1"><a class="header-anchor" href="#_1、认证过程" aria-hidden="true">#</a> 1、认证过程</h4><blockquote><p>1、用户向服务器发送用户名和密码。</p><p>2、服务器验证通过后，在当前对话（session）里面保存相关数据，比如用户角色、登录时间等等。</p><p>3、服务器向用户返回一个 session_id，写入用户的 Cookie。</p><p>4、用户随后的每一次请求，都会通过 Cookie，将 session_id 传回服务器。</p><p>5、服务器收到 session_id，找到前期保存的数据，由此得知用户的身份。</p></blockquote><img src="https://javaxiaobear-1301481032.cos.ap-guangzhou.myqcloud.com/picture-bed/image-20230626152851627.png" alt="image-20230626152851627" style="zoom:80%;"><h4 id="_2、存在的问题" tabindex="-1"><a class="header-anchor" href="#_2、存在的问题" aria-hidden="true">#</a> 2、存在的问题</h4><blockquote><p>扩展性不好，向上图中，存在两个服务器时，session不能共享</p></blockquote><h4 id="_3、解决方案" tabindex="-1"><a class="header-anchor" href="#_3、解决方案" aria-hidden="true">#</a> 3、解决方案</h4><h5 id="_1、session复制" tabindex="-1"><a class="header-anchor" href="#_1、session复制" aria-hidden="true">#</a> 1、session复制</h5><blockquote><p>将服务器1的session，复制到服务器2，同样将服务器2的session也复制到服务器1，这样两台服务器的session就一致了。像tomcat等web容器都支持session复制的功能，在<strong>同一个局域网内</strong>，一台服务器的<code>session</code>会广播给其他服务器。</p><p>缺点：同一个网段内服务器太多，每个服务器都会去复制session，会造成服务器内存浪费。</p></blockquote><h5 id="_2、session黏性" tabindex="-1"><a class="header-anchor" href="#_2、session黏性" aria-hidden="true">#</a> 2、session黏性</h5><h5 id="_3、redis解决分布式session" tabindex="-1"><a class="header-anchor" href="#_3、redis解决分布式session" aria-hidden="true">#</a> 3、Redis解决分布式session</h5><p>解决方案如下：<strong>统一将用户信息存入redis中，从redis中去获取登录的用户信息，这样就可解决分布式session了</strong></p><img src="https://javaxiaobear-1301481032.cos.ap-guangzhou.myqcloud.com/picture-bed/image-20230626155211581.png" alt="image-20230626155211581" style="zoom:50%;"><h3 id="_2、传统session实战" tabindex="-1"><a class="header-anchor" href="#_2、传统session实战" aria-hidden="true">#</a> 2、传统session实战</h3><h4 id="_1、session服务搭建" tabindex="-1"><a class="header-anchor" href="#_1、session服务搭建" aria-hidden="true">#</a> 1、session服务搭建</h4><p>新建一个SpringBoot项目，编写controller类，代码如下👇</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/user&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 登录接口
     * <span class="token keyword">@param</span> <span class="token parameter">userName</span>
     * <span class="token keyword">@param</span> <span class="token parameter">password</span>
     * <span class="token keyword">@param</span> <span class="token parameter">session</span>
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/login&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">String</span> userName<span class="token punctuation">,</span> <span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">String</span> password<span class="token punctuation">,</span> <span class="token class-name">HttpSession</span> session<span class="token punctuation">)</span><span class="token punctuation">{</span>
        session<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">,</span> userName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">&quot;登录成功&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 获取用户信息接口
     * <span class="token keyword">@param</span> <span class="token parameter">session</span>
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/info&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token class-name">HttpSession</span> session<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;登录用户为：&quot;</span> <span class="token operator">+</span>  session<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2、测试" tabindex="-1"><a class="header-anchor" href="#_2、测试" aria-hidden="true">#</a> 2、测试</h4><h5 id="_1、访问登录接口" tabindex="-1"><a class="header-anchor" href="#_1、访问登录接口" aria-hidden="true">#</a> 1、访问登录接口</h5>`,20),d={href:"http://localhost:8081/user/login?userName=javaxiaobear&password=123456",target:"_blank",rel:"noopener noreferrer"},k=n("p",null,[n("img",{src:"https://javaxiaobear-1301481032.cos.ap-guangzhou.myqcloud.com/picture-bed/image-20230627155331472.png",alt:"image-20230627155331472",loading:"lazy"})],-1),h=n("h5",{id:"_2、访问获取用户接口",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2、访问获取用户接口","aria-hidden":"true"},"#"),s(" 2、访问获取用户接口")],-1),m={href:"http://localhost:8081/user/info",target:"_blank",rel:"noopener noreferrer"},g=t('<p><img src="https://javaxiaobear-1301481032.cos.ap-guangzhou.myqcloud.com/picture-bed/image-20230627155416855.png" alt="image-20230627155416855" loading="lazy"></p><h5 id="_3、为什么第二次访问-就获取了到了用户信息呢" tabindex="-1"><a class="header-anchor" href="#_3、为什么第二次访问-就获取了到了用户信息呢" aria-hidden="true">#</a> 3、为什么第二次访问，就获取了到了用户信息呢？</h5><blockquote><p>第一次访问登录接口，后端代码中我们有设置session，设置后，前端浏览器获取到了，就会把session的值set-cookie中，当第二次请求info接口时，会携带cookie访问到后端，通过cookie查询session，然后返回给客户端</p></blockquote><p><img src="https://javaxiaobear-1301481032.cos.ap-guangzhou.myqcloud.com/picture-bed/image-20230627155820014.png" alt="image-20230627155820014" loading="lazy"></p><h3 id="_3、cookie的特性" tabindex="-1"><a class="header-anchor" href="#_3、cookie的特性" aria-hidden="true">#</a> 3、cookie的特性</h3><h4 id="_1、cookie不能跨域" tabindex="-1"><a class="header-anchor" href="#_1、cookie不能跨域" aria-hidden="true">#</a> 1、cookie不能跨域</h4>',6),v={href:"http://127.0.0.1:8081/user/info%EF%BC%8C%E5%89%8D%E6%8F%90%E6%98%AFlocalhost%E6%98%AF%E6%88%90%E5%8A%9F%E7%99%BB%E5%BD%95%E7%9A%84%E6%83%85%E5%86%B5%E4%B8%8B",target:"_blank",rel:"noopener noreferrer"},b=n("p",null,[n("img",{src:"https://javaxiaobear-1301481032.cos.ap-guangzhou.myqcloud.com/picture-bed/image-20230627161125175.png",alt:"image-20230627161125175",loading:"lazy"})],-1),_=n("p",null,"发现获取不到用户信息",-1),f=n("h4",{id:"_2、cookie存在tomcat中",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2、cookie存在tomcat中","aria-hidden":"true"},"#"),s(" 2、cookie存在tomcat中")],-1),y=n("p",null,[s("我们模拟两台Java服务器，具体操作如下：配置是"),n("code",null,"-Dserver.port=8082")],-1),x=n("p",null,[n("img",{src:"https://javaxiaobear-1301481032.cos.ap-guangzhou.myqcloud.com/picture-bed/image-20230627161558541.png",alt:"image-20230627161558541",loading:"lazy"})],-1),w={href:"http://localhost:8082/user/info%EF%BC%8C%E5%8F%91%E7%8E%B0%E8%8E%B7%E5%8F%96%E4%B8%8D%E5%88%B0%E7%99%BB%E5%BD%95%E7%94%A8%E6%88%B7%EF%BC%8C%E8%BF%99%E6%98%AF%E5%9B%A0%E4%B8%BAcookie%E6%98%AF%E5%AD%98%E5%9C%A8tomcat%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%AD%EF%BC%8C%E8%8E%B7%E5%8F%96%E4%B8%8D%E5%88%B0%EF%BC%81",target:"_blank",rel:"noopener noreferrer"},j=t(`<h2 id="_2、spring-session" tabindex="-1"><a class="header-anchor" href="#_2、spring-session" aria-hidden="true">#</a> 2、Spring-Session</h2><p>Spring-Session 提供了对Redis、MongoDB、MySQL 等常用存储的支持，Spring-Session 提供与 HttpSession 的透明整合，这意味着开发人员可以使用 Spring-Session 支持的实现方式，切换 HttpSession 至 Spring-Session</p><h3 id="_1、引入依赖" tabindex="-1"><a class="header-anchor" href="#_1、引入依赖" aria-hidden="true">#</a> 1、引入依赖</h3><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code> <span class="token comment">&lt;!--redis依赖配置--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.session<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-session-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2、配置" tabindex="-1"><a class="header-anchor" href="#_2、配置" aria-hidden="true">#</a> 2、配置</h3><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8081</span>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">data</span><span class="token punctuation">:</span>
    <span class="token key atrule">redis</span><span class="token punctuation">:</span>
      <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">6379</span>
      <span class="token key atrule">host</span><span class="token punctuation">:</span> 127.0.0.1
      <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span>
  <span class="token key atrule">session</span><span class="token punctuation">:</span>
    <span class="token key atrule">store-type</span><span class="token punctuation">:</span> redis
    <span class="token key atrule">timeout</span><span class="token punctuation">:</span> <span class="token number">3000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3、测试" tabindex="-1"><a class="header-anchor" href="#_3、测试" aria-hidden="true">#</a> 3、测试</h3><p>重新启动系统，依次访问：</p>`,8),q={href:"http://localhost:8081/user/login?userName=javaxiaobear&password=123456",target:"_blank",rel:"noopener noreferrer"},E={href:"http://localhost:8081/user/info",target:"_blank",rel:"noopener noreferrer"},S={href:"http://localhost:8082/user/info",target:"_blank",rel:"noopener noreferrer"},B=n("p",null,"发现访问8082服务器时，也访问成功",-1),A=n("h2",{id:"_3、jwt",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3、jwt","aria-hidden":"true"},"#"),s(" 3、JWT")],-1),J={href:"https://link.jianshu.com?t=https://tools.ietf.org/html/rfc7519",target:"_blank",rel:"noopener noreferrer"},C={href:"https://github.com/auth0/java-jwt",target:"_blank",rel:"noopener noreferrer"},I=t(`<h3 id="_1、实战" tabindex="-1"><a class="header-anchor" href="#_1、实战" aria-hidden="true">#</a> 1、实战</h3><h4 id="_1、引入依赖-1" tabindex="-1"><a class="header-anchor" href="#_1、引入依赖-1" aria-hidden="true">#</a> 1、引入依赖</h4><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.auth0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>java-jwt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.4.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2、编写controller类" tabindex="-1"><a class="header-anchor" href="#_2、编写controller类" aria-hidden="true">#</a> 2、编写controller类</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">JWT_KEY</span> <span class="token operator">=</span> <span class="token string">&quot;javaxiaobear&quot;</span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/loginWithJwt&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">loginWithJwt</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">String</span> userName<span class="token punctuation">,</span> <span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">String</span> password<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">Algorithm</span> algorithm <span class="token operator">=</span> <span class="token class-name">Algorithm</span><span class="token punctuation">.</span><span class="token function">HMAC256</span><span class="token punctuation">(</span><span class="token constant">JWT_KEY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> token <span class="token operator">=</span> <span class="token constant">JWT</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">withClaim</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">,</span> userName<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span>algorithm<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> token<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/infoWithJwt&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">infoWithJwt</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestHeader</span> <span class="token class-name">String</span> token<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">Algorithm</span> algorithm <span class="token operator">=</span> <span class="token class-name">Algorithm</span><span class="token punctuation">.</span><span class="token function">HMAC256</span><span class="token punctuation">(</span><span class="token constant">JWT_KEY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">JWTVerifier</span> verifier <span class="token operator">=</span> <span class="token constant">JWT</span><span class="token punctuation">.</span><span class="token function">require</span><span class="token punctuation">(</span>algorithm<span class="token punctuation">)</span>
            <span class="token comment">// reusable verifier instance</span>
            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">DecodedJWT</span> verify <span class="token operator">=</span> verifier<span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> verify<span class="token punctuation">.</span><span class="token function">getClaim</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">asString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3、测试-1" tabindex="-1"><a class="header-anchor" href="#_3、测试-1" aria-hidden="true">#</a> 3、测试</h4>`,6),z={href:"http://localhost:8081/user/loginWithJwt?userName=javaxiaobear&password=123456",target:"_blank",rel:"noopener noreferrer"},W=n("p",null,[n("img",{src:"https://javaxiaobear-1301481032.cos.ap-guangzhou.myqcloud.com/picture-bed/image-20230628110821735.png",alt:"image-20230628110821735",loading:"lazy"})],-1),F=n("p",null,"获取登录用户信息：localhost:8081/user/infoWithJwt",-1),N=n("p",null,[n("img",{src:"https://javaxiaobear-1301481032.cos.ap-guangzhou.myqcloud.com/picture-bed/image-20230628111802378.png",alt:"image-20230628111802378",loading:"lazy"})],-1),D=n("p",null,"响应：javaxiaobear",-1),H={href:"https://jwt.io/%E4%B8%93%E9%97%A8%E8%A7%A3%E7%A0%81%E7%9A%84%E7%BD%91%E7%AB%99",target:"_blank",rel:"noopener noreferrer"},T=t(`<p><img src="https://javaxiaobear-1301481032.cos.ap-guangzhou.myqcloud.com/picture-bed/image-20230628111933567.png" alt="image-20230628111933567" loading="lazy"></p><h3 id="_2、分析" tabindex="-1"><a class="header-anchor" href="#_2、分析" aria-hidden="true">#</a> 2、分析</h3><h4 id="_1、jwt的构成" tabindex="-1"><a class="header-anchor" href="#_1、jwt的构成" aria-hidden="true">#</a> 1、JWT的构成</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjoiamF2YXhpYW9iZWFyIn0.TOlrBtRrnJl_FfJ8YUnWLLHOIV6HKYzD1d0MBRlu9nU
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>token存在两个点，也就是分成了三段，第一部分我们称它为头部（header),第二部分我们称其为载荷（payload, 类似于飞机上承载的物品)，第三部分是签证（signature).</p><h5 id="header" tabindex="-1"><a class="header-anchor" href="#header" aria-hidden="true">#</a> header</h5><p>jwt的头部承载两部分信息：</p><ul><li>声明类型，这里是jwt</li><li>声明加密的算法 通常直接使用 HMAC SHA256</li></ul><p>完整的头部就像下面这样的JSON：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  &#39;typ&#39;<span class="token operator">:</span> &#39;JWT&#39;<span class="token punctuation">,</span>
  &#39;alg&#39;<span class="token operator">:</span> &#39;HS256&#39;
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后将头部进行base64加密（该加密是可以对称解密的),构成了第一部分.</p><h5 id="payload" tabindex="-1"><a class="header-anchor" href="#payload" aria-hidden="true">#</a> payload</h5><blockquote><p>载荷就是存放有效信息的地方。这个名字像是特指飞机上承载的货品，这些有效信息包含三个部分</p><ul><li>标准中注册的声明</li><li>公共的声明</li><li>私有的声明</li></ul></blockquote><p>标准中注册的声明 (建议但不强制使用) ：</p><ul><li>iss: jwt签发者</li><li>sub: jwt所面向的用户</li><li>aud: 接收jwt的一方</li><li>exp: jwt的过期时间，这个过期时间必须要大于签发时间</li><li>nbf: 定义在什么时间之前，该jwt都是不可用的.</li><li>iat: jwt的签发时间</li><li>jti: jwt的唯一身份标识，主要用来作为一次性token,从而回避重放攻击。</li></ul><p>公共的声明 ：公共的声明可以添加任何的信息，一般添加用户的相关信息或其他业务需要的必要信息.但不建议添加敏感信息，因为该部分在客户端可解密.</p><p>私有的声明 ：私有声明是提供者和消费者所共同定义的声明，一般不建议存放敏感信息，因为base64是对称解密的，意味着该部分信息可以归类为明文信息。</p><p>定义一个payload:</p><p>{ &quot;sub&quot;: &quot;1234567890&quot;, &quot;name&quot;: &quot;John Doe&quot;, &quot;admin&quot;: true }</p><p>然后将其进行base64加密，得到Jwt的第二部分。</p><h5 id="signature" tabindex="-1"><a class="header-anchor" href="#signature" aria-hidden="true">#</a> signature</h5><p>jwt的第三部分是一个签证信息，这个签证信息由三部分组成：</p><ul><li>header (base64后的)</li><li>payload (base64后的)</li><li>secret 这个部分需要base64加密后的header和base64加密后的payload使用.连接组成的字符串，然后通过header中声明的加密方式进行加盐secret组合加密，然后就构成了jwt的第三部分。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// javascript</span>
<span class="token keyword">var</span> encodedString <span class="token operator">=</span> <span class="token function">base64UrlEncode</span><span class="token punctuation">(</span>header<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&#39;.&#39;</span> <span class="token operator">+</span> <span class="token function">base64UrlEncode</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> signature <span class="token operator">=</span> <span class="token constant">HMACSHA256</span><span class="token punctuation">(</span>encodedString<span class="token punctuation">,</span> <span class="token string">&#39;secret&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将这三部分用.连接成一个完整的字符串,构成了最终的jwt 注意：secret是保存在服务器端的，jwt的签发生成也是在服务器端的，secret就是用来进行jwt的签发和jwt的验证，所以，它就是你服务端的私钥，在任何场景都不应该流露出去。一旦客户端得知这个secret, 那就意味着客户端是可以自我签发jwt了。</p><p>好了，本文就到这里了！如果觉得内容不错的话，希望大家可以帮忙点赞转发一波，这是对我最大的鼓励，感谢🙏🏻</p><p>资料获取👇 最后面就是领取暗号，公众号回复即可！</p><p><img src="`+l+'" alt="Alt text" loading="lazy"></p>',28);function R(M,V){const a=p("ExternalLinkIcon");return i(),c("div",null,[u,n("p",null,[s("接口路径："),n("a",d,[s("http://localhost:8081/user/login?userName=javaxiaobear&password=123456"),e(a)])]),k,h,n("p",null,[s("接口路径："),n("a",m,[s("http://localhost:8081/user/info"),e(a)])]),g,n("p",null,[s("作为开发人员，我们都知道，localhost和127.0.0.1其实没啥区别，接下来我们访问下："),n("a",v,[s("http://127.0.0.1:8081/user/info，前提是localhost是成功登录的情况下"),e(a)])]),b,_,f,y,x,n("p",null,[s("在8081服务器登录的情况下，访问："),n("a",w,[s("http://localhost:8082/user/info，发现获取不到登录用户，这是因为cookie是存在tomcat服务器中，获取不到！"),e(a)])]),j,n("ul",null,[n("li",null,[n("a",q,[s("http://localhost:8081/user/login?userName=javaxiaobear&password=123456"),e(a)])]),n("li",null,[n("a",E,[s("http://localhost:8081/user/info"),e(a)])]),n("li",null,[n("a",S,[s("http://localhost:8082/user/info"),e(a)])])]),B,A,n("blockquote",null,[n("p",null,[s("Json web token (JWT), 是为了在网络应用环境间传递声明而执行的一种基于JSON的开放标准（"),n("a",J,[s("(RFC 7519"),e(a)]),s(").该token被设计为紧凑且安全的，特别适用于分布式站点的单点登录（SSO）场景。JWT的声明一般被用来在身份提供者和服务提供者间传递被认证的用户身份信息，以便于从资源服务器获取资源，也可以增加一些额外的其它业务逻辑所必须的声明信息，该token也可直接被用于认证，也可被加密。")]),n("p",null,[s("官网："),n("a",C,[s("https://github.com/auth0/java-jwt"),e(a)])])]),I,n("p",null,[s("登录接口："),n("a",z,[s("http://localhost:8081/user/loginWithJwt?userName=javaxiaobear&password=123456"),e(a)])]),W,F,N,D,n("p",null,[s("还有一种方法把获取到的token解析出来，"),n("a",H,[s("https://jwt.io/专门解码的网站"),e(a)])]),T])}const U=o(r,[["render",R],["__file","session.html.vue"]]);export{U as default};
