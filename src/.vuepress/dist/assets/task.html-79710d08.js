import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as i,c,a as n,b as a,d as t,e}from"./app-aeb4ead9.js";const l={},u=e(`<h2 id="_1、概述" tabindex="-1"><a class="header-anchor" href="#_1、概述" aria-hidden="true">#</a> 1、概述</h2><h3 id="_1、任务调度场景" tabindex="-1"><a class="header-anchor" href="#_1、任务调度场景" aria-hidden="true">#</a> 1、任务调度场景</h3><ul><li>报表</li><li>爬虫</li><li>日/月结单</li><li>数据归档</li></ul><h3 id="_2、调度框架" tabindex="-1"><a class="header-anchor" href="#_2、调度框架" aria-hidden="true">#</a> 2、调度框架</h3><ul><li>非分布式：Spring Boot自带的@Scheduled</li><li>分布式：<code>QuartZ</code>、<code>Elasticjob</code>、<code>XXL-JOB</code>、<code>阿里云的SchedulerX</code>、<code>PowerJob</code></li></ul><h3 id="_3、对比" tabindex="-1"><a class="header-anchor" href="#_3、对比" aria-hidden="true">#</a> 3、对比</h3><table><thead><tr><th>QuartZ</th><th>xxl-job</th><th>SchedulerX 2.0</th><th>PowerJob</th></tr></thead><tbody><tr><td>CRON</td><td>CRON</td><td>CRON、固定频率、固定延迟、OpenAPI</td><td>CRON、固定频率、固定延迟、OpenAPI</td></tr><tr><td>内置Java</td><td>内置Java、GLUE Java、Shell、Python等脚本</td><td>内置Java、外置Java（FatJar）、Shell、Python等脚本</td><td>内置Java、外置Java（容器）、Shell、Python等脚本</td></tr><tr><td>无</td><td>静态分片</td><td>MapReduce 动态分片</td><td>MapReduce 动态分片</td></tr><tr><td>不支持</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>不支持</td><td>支持</td><td>不支持</td><td>支持</td></tr><tr><td>基于数据库锁，有性能瓶颈</td><td>基于数据库锁，有性能瓶颈</td><td>不详</td><td>无锁化设计，性能强劲无上限</td></tr><tr><td>无</td><td>邮件</td><td>短信</td><td>邮件，提供接口允许开发者扩展</td></tr><tr><td>关系型数据库（MySQL、Oracle...）</td><td>MySQL</td><td>人民币</td><td>任意 Spring Data Jpa支持的关系型数据库（MySQL、Oracle...）</td></tr><tr><td>不支持</td><td>不支持</td><td>支持</td><td>支持</td></tr></tbody></table><h3 id="_4、如何选择" tabindex="-1"><a class="header-anchor" href="#_4、如何选择" aria-hidden="true">#</a> 4、如何选择</h3><p>如何选择哪一个分布式任务调度平台</p><ul><li>XXL-Job和Elastic-Job都具有广泛的用户基础和完善的技术文档，都可以满足定时任务的基本功能需求</li><li>xxl-job侧重在业务实现简单和管理方便，容易学习，失败与路由策略丰富, 推荐使用在用户基数相对较少，服务器的数量在一定的范围内的场景下使用</li><li>elastic-job关注的点在数据，添加了弹性扩容和数据分片的思路，更方便利用分布式服务器的资源, 但是学习难度较大，推荐在数据量庞大，服务器数量多的时候使用</li></ul><h2 id="_2、非分布式任务调度-scheduled" tabindex="-1"><a class="header-anchor" href="#_2、非分布式任务调度-scheduled" aria-hidden="true">#</a> 2、非分布式任务调度@Scheduled</h2><blockquote><p><code>@Scheduled</code>注解是Spring Boot提供的用于定时任务控制的注解，主要用于控制任务在某个指定时间执行，或者每隔一段时间执行，默认是在单线程中执行的</p></blockquote><h3 id="_1、注解源码" tabindex="-1"><a class="header-anchor" href="#_1、注解源码" aria-hidden="true">#</a> 1、注解源码</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">METHOD</span><span class="token punctuation">,</span> <span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">ANNOTATION_TYPE</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Documented</span>
<span class="token annotation punctuation">@Repeatable</span><span class="token punctuation">(</span><span class="token class-name">Schedules</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Reflective</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Scheduled</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> <span class="token constant">CRON_DISABLED</span> <span class="token operator">=</span> <span class="token string">&quot;-&quot;</span><span class="token punctuation">;</span>

    <span class="token class-name">String</span> <span class="token function">cron</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>

    <span class="token class-name">String</span> <span class="token function">zone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">long</span> <span class="token function">fixedDelay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token operator">-</span><span class="token number">1L</span><span class="token punctuation">;</span>

    <span class="token class-name">String</span> <span class="token function">fixedDelayString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">long</span> <span class="token function">fixedRate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token operator">-</span><span class="token number">1L</span><span class="token punctuation">;</span>

    <span class="token class-name">String</span> <span class="token function">fixedRateString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">long</span> <span class="token function">initialDelay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token operator">-</span><span class="token number">1L</span><span class="token punctuation">;</span>

    <span class="token class-name">String</span> <span class="token function">initialDelayString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>

    <span class="token class-name">TimeUnit</span> <span class="token function">timeUnit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2、参数说明" tabindex="-1"><a class="header-anchor" href="#_2、参数说明" aria-hidden="true">#</a> 2、参数说明</h3><table><thead><tr><th style="text-align:center;">参数</th><th style="text-align:center;">说明</th><th>示例</th></tr></thead><tbody><tr><td style="text-align:center;">cron</td><td style="text-align:center;">任务执行的cron表达式</td><td>0/1 * * * * ?</td></tr><tr><td style="text-align:center;">zone</td><td style="text-align:center;">cron表达时解析使用的时区,默认为服务器的本地时区,使用java.util.TimeZone#getTimeZone(String)方法解析</td><td>GMT-8:00</td></tr><tr><td style="text-align:center;">fixedDelay</td><td style="text-align:center;">上一次任务执行结束到下一次执行开始的间隔时间,单位为ms</td><td>2000</td></tr><tr><td style="text-align:center;">fixedDelayString</td><td style="text-align:center;">上一次任务执行结束到下一次执行开始的间隔时间,使用java.time.Duration#parse解析</td><td>PT15M</td></tr><tr><td style="text-align:center;">fixedRate</td><td style="text-align:center;">以固定间隔执行任务，即上一次任务执行开始到下一次执行开始的间隔时间,单位为ms,若在调度任务执行时,上一次任务还未执行完毕,会加入worker队列,等待上一次执行完成后立即执行下一次任务</td><td>2000</td></tr><tr><td style="text-align:center;">fixedRateString</td><td style="text-align:center;">与fixedRate逻辑一致,只是使用java.time.Duration#parse解析</td><td>PT15M</td></tr><tr><td style="text-align:center;">initialDelay</td><td style="text-align:center;">首次任务执行的延迟时间</td><td>2000</td></tr><tr><td style="text-align:center;">initialDelayString</td><td style="text-align:center;">首次任务执行的延迟时间,使用java.time.Duration#parse解析</td><td>PT15M</td></tr><tr><td style="text-align:center;">timeUnit</td><td style="text-align:center;"></td><td></td></tr></tbody></table><h3 id="_3、详解说明" tabindex="-1"><a class="header-anchor" href="#_3、详解说明" aria-hidden="true">#</a> 3、详解说明</h3><h4 id="_1、cron-参数" tabindex="-1"><a class="header-anchor" href="#_1、cron-参数" aria-hidden="true">#</a> 1、cron 参数</h4><blockquote><p>表达式格式：<code>@Scheduled(cron = &quot;{秒数} {分钟} {小时} {日期} {月份} {星期}&quot;)</code></p></blockquote><p>注意： <strong>cron表达式可分为6或7个占位符，但在spring自带的定时任务中，cron只支持6个参数</strong>，若使用7个参数就会报错</p><div class="language-log line-numbers-mode" data-ext="log"><pre class="language-log"><code><span class="token property">Caused by:</span> <span class="token property">java.lang.IllegalStateException:</span> Encountered invalid <span class="token operator">@</span>Scheduled method <span class="token string">&#39;test&#39;</span><span class="token operator">:</span> Cron expression must consist of <span class="token number">6</span> fields <span class="token operator">(</span>found <span class="token number">7</span> in <span class="token string">&quot;*/5 * * * * * *&quot;</span><span class="token operator">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>代码示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * cron 表达式 每隔5秒执行一次
 */</span>
<span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>cron <span class="token operator">=</span> <span class="token string">&quot;*/5 * * * * *&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;小熊学Java是最全Java学习网站！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>2023-06-28T15:20:40.009+08:00  INFO 10904 --- [   scheduling-1] com.javaxiaobear.job.MyScheduledJob      : 小熊学Java是最全Java学习网站！
2023-06-28T15:20:45.014+08:00  INFO 10904 --- [   scheduling-1] com.javaxiaobear.job.MyScheduledJob      : 小熊学Java是最全Java学习网站！
2023-06-28T15:20:50.004+08:00  INFO 10904 --- [   scheduling-1] com.javaxiaobear.job.MyScheduledJob      : 小熊学Java是最全Java学习网站！
2023-06-28T15:20:55.010+08:00  INFO 10904 --- [   scheduling-1] com.javaxiaobear.job.MyScheduledJob      : 小熊学Java是最全Java学习网站！
2023-06-28T15:21:00.002+08:00  INFO 10904 --- [   scheduling-1] com.javaxiaobear.job.MyScheduledJob      : 小熊学Java是最全Java学习网站！
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>更多的cron表达式，自行测试哈，这里不做过多演示</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>“30 * * * * ?” 每半分钟触发任务 
 
“30 10 * * * ?” 每小时的10分30秒触发任务 
 
“30 10 1 * * ?” 每天1点10分30秒触发任务 
 
“30 10 1 20 * ?” 每月20号1点10分30秒触发任务 
 
“30 10 1 20 10 ? *” 每年10月20号1点10分30秒触发任务 
 
“30 10 1 20 10 ? 2011” 2011年10月20号1点10分30秒触发任务 
 
“30 10 1 ? 10 * 2011” 2011年10月每天1点10分30秒触发任务 
 
“30 10 1 ? 10 SUN 2011” 2011年10月每周日1点10分30秒触发任务 
 
“15,30,45 * * * * ?” 每15秒，30秒，45秒时触发任务 
 
“15-45 * * * * ?” 15到45秒内，每秒都触发任务 
 
“15/5 * * * * ?” 每分钟的每15秒开始触发，每隔5秒触发一次 
 
“15-30/5 * * * * ?” 每分钟的15秒到30秒之间开始触发，每隔5秒触发一次 
 
“0 0/3 * * * ?” 每小时的第0分0秒开始，每三分钟触发一次 
 
“0 15 10 ? * MON-FRI” 星期一到星期五的10点15分0秒触发任务 
 
“0 15 10 L * ?” 每个月最后一天的10点15分0秒触发任务 
 
“0 15 10 LW * ?” 每个月最后一个工作日的10点15分0秒触发任务 
 
“0 15 10 ? * 5L” 每个月最后一个星期四的10点15分0秒触发任务 
 
“0 15 10 ? * 5#3” 每个月第三周的星期四的10点15分0秒触发任务
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2、fixeddelay-参数" tabindex="-1"><a class="header-anchor" href="#_2、fixeddelay-参数" aria-hidden="true">#</a> 2、fixedDelay 参数</h4><blockquote><p>fixedDelay 上一次任务执行结束到下一次执行开始的间隔时间,单位为ms</p></blockquote><p>代码示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * fixedDelay 上一次任务执行结束到下一次执行开始的间隔时间,单位为ms
 * 每隔2秒执行一次
 */</span>
<span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>fixedDelay <span class="token operator">=</span> <span class="token number">2000</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> testFixedDelay <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;小熊学Java是最全Java学习网站！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果展示：</p><p><img src="https://javaxiaobear-1301481032.cos.ap-guangzhou.myqcloud.com/picture-bed/image-20230628153022010.png" alt="image-20230628153022010" loading="lazy"></p><h4 id="_3、fixedrate参数" tabindex="-1"><a class="header-anchor" href="#_3、fixedrate参数" aria-hidden="true">#</a> 3、fixedRate参数</h4><blockquote><p>以固定间隔执行任务，即上一次任务执行开始到下一次执行开始的间隔时间,单位为ms,若在调度任务执行时,上一次任务还未执行完毕,会加入worker队列,等待上一次执行完成后立即执行下一次任务</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
     * 以固定间隔执行任务，即上一次任务执行开始到下一次执行开始的间隔时间,单位为ms,若
     * 在调度任务执行时,上一次任务还未执行完毕,会加入worker队列,等待上一次执行完成后立即执行下一次任务
     * 每隔2秒执行一次
     */</span>
    <span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>fixedRate <span class="token operator">=</span> <span class="token number">2000</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> testFixedRate <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;小熊学Java是最全Java学习网站！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>日志每3秒执行一次，这也是因为@Scheduled是在单线程中执行的</p><p><img src="https://javaxiaobear-1301481032.cos.ap-guangzhou.myqcloud.com/picture-bed/image-20230629161133953.png" alt="image-20230629161133953" loading="lazy"></p><h4 id="_4、initialdelay参数" tabindex="-1"><a class="header-anchor" href="#_4、initialdelay参数" aria-hidden="true">#</a> 4、initialDelay参数</h4><blockquote><p>首次任务执行的延迟时间</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
     * initialDelay  首次任务执行的延迟时间
     * 每隔2秒执行一次
     */</span>
    <span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>fixedRate <span class="token operator">=</span> <span class="token number">2000</span><span class="token punctuation">,</span> initialDelay <span class="token operator">=</span> <span class="token number">3000</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> testInitialDelay <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;小熊学Java是最全Java学习网站！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首次延迟的时间是3秒，之后每2秒执行一次</p><p><img src="https://javaxiaobear-1301481032.cos.ap-guangzhou.myqcloud.com/picture-bed/image-20230629161513224.png" alt="image-20230629161513224" loading="lazy"></p><h3 id="_4、-scheduled多线程" tabindex="-1"><a class="header-anchor" href="#_4、-scheduled多线程" aria-hidden="true">#</a> 4、@Scheduled多线程</h3><h4 id="_1、场景演示" tabindex="-1"><a class="header-anchor" href="#_1、场景演示" aria-hidden="true">#</a> 1、场景演示</h4><p>执行以下两个方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>fixedRate <span class="token operator">=</span> <span class="token number">2000</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> test1 <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>

    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;小熊学Java 是最全Java学习网站！---test1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>fixedRate <span class="token operator">=</span> <span class="token number">2000</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> test2 <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;小熊学Java是最全Java学习网站！---test2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://javaxiaobear-1301481032.cos.ap-guangzhou.myqcloud.com/picture-bed/image-20230629162300742.png" alt="image-20230629162300742" loading="lazy"></p><p>从执行结果中可以看出，test1方法和test2方法交替输出日志，并没有同时执行</p><p><code>org.springframework.scheduling.config.ScheduledTaskRegistrar</code>源码发现</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">scheduleTasks</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//如果为空，则以单线程执行</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>taskScheduler <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>localExecutor <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newSingleThreadScheduledExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>taskScheduler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentTaskScheduler</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>localExecutor<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token class-name">Iterator</span> var1<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>triggerTasks <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        var1 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>triggerTasks<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">while</span><span class="token punctuation">(</span>var1<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">TriggerTask</span> task <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">TriggerTask</span><span class="token punctuation">)</span>var1<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addScheduledTask</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">scheduleTriggerTask</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>cronTasks <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        var1 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>cronTasks<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">while</span><span class="token punctuation">(</span>var1<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">CronTask</span> task <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">CronTask</span><span class="token punctuation">)</span>var1<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addScheduledTask</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">scheduleCronTask</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token class-name">IntervalTask</span> task<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>fixedRateTasks <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        var1 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>fixedRateTasks<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">while</span><span class="token punctuation">(</span>var1<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            task <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">IntervalTask</span><span class="token punctuation">)</span>var1<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>task <span class="token keyword">instanceof</span> <span class="token class-name">FixedRateTask</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">FixedRateTask</span> fixedRateTask <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">FixedRateTask</span><span class="token punctuation">)</span>task<span class="token punctuation">;</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addScheduledTask</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">scheduleFixedRateTask</span><span class="token punctuation">(</span>fixedRateTask<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addScheduledTask</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">scheduleFixedRateTask</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FixedRateTask</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>fixedDelayTasks <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        var1 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>fixedDelayTasks<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">while</span><span class="token punctuation">(</span>var1<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            task <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">IntervalTask</span><span class="token punctuation">)</span>var1<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>task <span class="token keyword">instanceof</span> <span class="token class-name">FixedDelayTask</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">FixedDelayTask</span> fixedDelayTask <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">FixedDelayTask</span><span class="token punctuation">)</span>task<span class="token punctuation">;</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addScheduledTask</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">scheduleFixedDelayTask</span><span class="token punctuation">(</span>fixedDelayTask<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addScheduledTask</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">scheduleFixedDelayTask</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FixedDelayTask</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当未手动指定<code>taskScheduler</code>时，会通过<code>Executors.newSingleThreadScheduledExecutor()</code>创建默认的单线程线程池，且该线程池的拒绝策略为<code>AbortPolicy</code>，这种策略在线程池无可用线程时丢弃任务，并抛出异常<code>RejectedExecutionException</code>。</p><h4 id="_2、多线程配置" tabindex="-1"><a class="header-anchor" href="#_2、多线程配置" aria-hidden="true">#</a> 2、多线程配置</h4><h5 id="_1、配置bean" tabindex="-1"><a class="header-anchor" href="#_1、配置bean" aria-hidden="true">#</a> 1、配置bean</h5><p>在启动类中，配置bean，代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 配置线程池
 * <span class="token keyword">@return</span>
 */</span>
<span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">TaskScheduler</span> <span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">ThreadPoolTaskScheduler</span> taskScheduler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolTaskScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//线程池大小为10</span>
    taskScheduler<span class="token punctuation">.</span><span class="token function">setPoolSize</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> taskScheduler<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://javaxiaobear-1301481032.cos.ap-guangzhou.myqcloud.com/picture-bed/image-20230629162818136.png" alt="image-20230629162818136" loading="lazy"></p><h5 id="_2、配置类" tabindex="-1"><a class="header-anchor" href="#_2、配置类" aria-hidden="true">#</a> 2、配置类</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SchedulerConfig</span> <span class="token keyword">implements</span> <span class="token class-name">SchedulingConfigurer</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configureTasks</span><span class="token punctuation">(</span><span class="token class-name">ScheduledTaskRegistrar</span> taskRegistrar<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//Scheduler指定线程池</span>
        taskRegistrar<span class="token punctuation">.</span><span class="token function">setScheduler</span><span class="token punctuation">(</span><span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newScheduledThreadPool</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果跟上面一样，每3秒同时执行</p><h3 id="_5、async异步执行" tabindex="-1"><a class="header-anchor" href="#_5、async异步执行" aria-hidden="true">#</a> 5、Async异步执行</h3><blockquote><p>异步调用指程序在顺序执行时，不等待异步调用的语句返回结果就执行后面的程序。</p></blockquote><h4 id="_1、简单使用" tabindex="-1"><a class="header-anchor" href="#_1、简单使用" aria-hidden="true">#</a> 1、简单使用</h4><blockquote><p>Spring Boot的异步任务，只需在方法上添加异步注解，同时开启异步任务</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AsyncTask</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Async</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;小熊学Java 是最棒的！！！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>方法调用</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Resource</span>
    <span class="token keyword">private</span> <span class="token class-name">AsyncTask</span> asyncTask<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>fixedRate <span class="token operator">=</span> <span class="token number">2000</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> test1 <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        asyncTask<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;小熊学Java 是最全Java学习网站！---test1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果输出</p><p><img src="https://javaxiaobear-1301481032.cos.ap-guangzhou.myqcloud.com/picture-bed/image-20230629170457246.png" alt="image-20230629170457246" loading="lazy"></p><h4 id="_2、异步失效" tabindex="-1"><a class="header-anchor" href="#_2、异步失效" aria-hidden="true">#</a> 2、异步失效</h4><h5 id="_1、异步方法和调用异步方法在同一个类中" tabindex="-1"><a class="header-anchor" href="#_1、异步方法和调用异步方法在同一个类中" aria-hidden="true">#</a> 1、异步方法和调用异步方法在同一个类中</h5><p>有时候，经常看到编写异步任务，都是这样写的</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>fixedRate <span class="token operator">=</span> <span class="token number">2000</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> test1 <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
    asyncTask<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;小熊学Java 是最全Java学习网站！---test1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Async</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;小熊学Java 是最棒的！！！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,73),d={href:"https://juejin.cn/post/6976893903223914527#heading-5",target:"_blank",rel:"noopener noreferrer"},r=e(`<h2 id="_3、分布式任务调度quartz" tabindex="-1"><a class="header-anchor" href="#_3、分布式任务调度quartz" aria-hidden="true">#</a> 3、分布式任务调度QuartZ</h2><h3 id="_1、quartz是什么" tabindex="-1"><a class="header-anchor" href="#_1、quartz是什么" aria-hidden="true">#</a> 1、QuartZ是什么</h3><blockquote></blockquote><h3 id="_2、quartz入门" tabindex="-1"><a class="header-anchor" href="#_2、quartz入门" aria-hidden="true">#</a> 2、Quartz入门</h3><h4 id="_1、引入依赖" tabindex="-1"><a class="header-anchor" href="#_1、引入依赖" aria-hidden="true">#</a> 1、引入依赖</h4><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-quartz<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2、编写任务" tabindex="-1"><a class="header-anchor" href="#_2、编写任务" aria-hidden="true">#</a> 2、编写任务</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyQuartzJob</span> <span class="token keyword">extends</span> <span class="token class-name">QuartzJobBean</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">executeInternal</span><span class="token punctuation">(</span><span class="token class-name">JobExecutionContext</span> context<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">JobExecutionException</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;quartz 初体验！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3、quartz配置" tabindex="-1"><a class="header-anchor" href="#_3、quartz配置" aria-hidden="true">#</a> 3、quartz配置</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QuartzConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">JobDetail</span> <span class="token function">jobDetail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">JobBuilder</span><span class="token punctuation">.</span><span class="token function">newJob</span><span class="token punctuation">(</span><span class="token class-name">MyQuartzJob</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span><span class="token string">&quot;job1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;group1&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">storeDurably</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Trigger</span> <span class="token function">trigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">TriggerBuilder</span><span class="token punctuation">.</span><span class="token function">newTrigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">forJob</span><span class="token punctuation">(</span><span class="token function">jobDetail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span><span class="token string">&quot;trigger1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;group1&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">startNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4、运行" tabindex="-1"><a class="header-anchor" href="#_4、运行" aria-hidden="true">#</a> 4、运行</h4><p>启动Spring Boot程序</p><p><img src="https://javaxiaobear-1301481032.cos.ap-guangzhou.myqcloud.com/picture-bed/image-20230630134312241.png" alt="image-20230630134312241" loading="lazy"></p><p>但是发现任务只运行了一次，如果想跟之前一样运行,则需要修改配置</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">Trigger</span> <span class="token function">trigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">TriggerBuilder</span><span class="token punctuation">.</span><span class="token function">newTrigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">forJob</span><span class="token punctuation">(</span><span class="token function">jobDetail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span><span class="token string">&quot;trigger1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;group1&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">startNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token comment">//配置cron表达式</span>
            <span class="token punctuation">.</span><span class="token function">withSchedule</span><span class="token punctuation">(</span><span class="token class-name">CronScheduleBuilder</span><span class="token punctuation">.</span><span class="token function">cronSchedule</span><span class="token punctuation">(</span><span class="token string">&quot;*/5 * * ? * * *&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，编写cron表达式的时候，天（月的多少号）和天（周几）不能同时都为*，当有一个为<code>*</code>时，另一个要是<code>？</code>，不然就会报以下错误</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Support for specifying both a day-of-week AND a day-of-month parameter is not implemented
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_4、分布式任务调度xxl-job" tabindex="-1"><a class="header-anchor" href="#_4、分布式任务调度xxl-job" aria-hidden="true">#</a> 4、分布式任务调度XXL-JOB</h2><h3 id="_1、概述-1" tabindex="-1"><a class="header-anchor" href="#_1、概述-1" aria-hidden="true">#</a> 1、概述</h3>`,19),k=n("p",null,"XXL-JOB是一个分布式任务调度平台，其核心设计目标是开发迅速、学习简单、轻量级、易扩展。现已开放源代码并接入多家公司线上产品线，开箱即用。",-1),v={href:"https://www.xuxueli.com/xxl-job/#%E4%BA%8C%E3%80%81%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8",target:"_blank",rel:"noopener noreferrer"},m={href:"https://www.xuxueli.com/xxl-job/",target:"_blank",rel:"noopener noreferrer"},b={href:"https://github.com/xuxueli/xxl-job/",target:"_blank",rel:"noopener noreferrer"},h=e('<ul><li><p>xxl-job的设计思想</p><ul><li>将调度行为抽象形成“调度中心”公共平台，而平台自身并不承担业务逻辑，“调度中心”负责发起调度请求。</li><li>将任务抽象成分散的JobHandler，交由“执行器”统一管理</li><li>“执行器”负责接收调度请求并执行对应的JobHandler中业务逻辑。</li><li>因此，“调度”和“任务”两部分可以相互解耦，提高系统整体稳定性和扩展性</li></ul><p><img src="https://www.xuxueli.com/doc/static/xxl-job/images/img_Qohm.png" alt="img" loading="lazy"></p></li><li><p>架构图(图片来源是xxl-job官网)</p><ul><li>调度中心 <ul><li>负责管理调度的信息，按照调度的配置来发出调度请求</li><li>支持可视化、简单的动态管理调度信息，包括新建、删除、更新等，这些操作都会实时生效，同时也支持监控调度结果以及执行日志。</li></ul></li><li>执行器 <ul><li>负责接收请求并且执行任务的逻辑。任务模块专注于任务的执行操作等等，使得开发和维护更加的简单与高效</li></ul></li></ul></li></ul><ul><li>XXL-Job具有哪些特性 <ul><li>调度中心HA（中心式）：调度采用了中心式进行设计，“调度中心”支持集群部署，可保证调度中心HA</li><li>执行器HA（分布式）：任务分布式的执行，任务执行器支持集群部署，可保证任务执行HA</li><li>触发策略：有Cron触发、固定间隔触发、固定延时触发、API事件触发、人工触发、父子任务触发</li><li>路由策略：执行器在集群部署的时候提供了丰富的路由策略，如：第一个、最后一个、轮询、随机、一致性HASH、最不经常使用LFU、最久未使用LRU、故障转移等等</li><li>故障转移：如果执行器集群的一台机器发生故障，会自动切换到一台正常的执行器发送任务调度</li><li>Rolling实时日志的监控：支持rolling方式查看输入的完整执行日志</li><li>脚本任务：支持GLUE模式开发和运行脚本任务，包括Shell、python、node.js、php等等类型脚本</li></ul></li></ul><h3 id="_2、搭建调度中心" tabindex="-1"><a class="header-anchor" href="#_2、搭建调度中心" aria-hidden="true">#</a> 2、搭建调度中心</h3><h4 id="_1、下载源码" tabindex="-1"><a class="header-anchor" href="#_1、下载源码" aria-hidden="true">#</a> 1、下载源码</h4>',4),g={href:"https://gitee.com/xuxueli0323/xxl-job.git",target:"_blank",rel:"noopener noreferrer"},x=e(`<ul><li>doc：xxl-job的文档资料，包括了数据库的脚本（后面要用到）</li><li>xxl-job-core：公共jar包依赖</li><li>xxl-job-admin：调度中心，项目源码，是Springboot项目，可以直接启动</li><li>xxl-job-executor-samples：执行器，是Sample实例项目，里面的Springboot工程可以直接启动，也可以在该项目的基础上进行开发，也可以将现有的项目改造成为执行器项目</li></ul><h4 id="_2、数据库" tabindex="-1"><a class="header-anchor" href="#_2、数据库" aria-hidden="true">#</a> 2、数据库</h4><p>数据库文件在源码doc/db目录下</p><ul><li>xxl_job的数据库里有如下几个表 <ul><li>xxl_job_group：执行器信息表，用于维护任务执行器的信息</li><li>xxl_job_info：调度扩展信息表，主要是用于保存xxl-job的调度任务的扩展信息，比如说像任务分组、任务名、机器的地址等等</li><li>xxl_job_lock：任务调度锁表</li><li>xxl_job_log：日志表，主要是用在保存xxl-job任务调度历史信息，像调度结果、执行结果、调度入参等等</li><li>xxl_job_log_report：日志报表，会存储xxl-job任务调度的日志报表，会在调度中心里的报表功能里使用到</li><li>xxl_job_logglue：任务的GLUE日志，用于保存GLUE日志的更新历史变化，支持GLUE版本的回溯功能</li><li>xxl_job_registry：执行器的注册表，用在维护在线的执行器与调度中心的地址信息</li><li>xxl_job_user：系统的用户表</li></ul></li></ul><h4 id="_3、调度中心配置" tabindex="-1"><a class="header-anchor" href="#_3、调度中心配置" aria-hidden="true">#</a> 3、调度中心配置：</h4><p>调度中心配置文件地址：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>/xxl-job/xxl-job-admin/src/main/resources/application.properties
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>配置数据库连接</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>### xxl-job, datasource
spring.datasource.url=jdbc:mysql://127.0.0.1:3306/xxl_job?useUnicode=true&amp;characterEncoding=UTF-8&amp;autoReconnect=true&amp;serverTimezone=Asia/Shanghai
spring.datasource.username=root
spring.datasource.password=xdclass.net
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>配置 xxl.job.accessToken（后续要配置客户端接入配置token）</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>xxl.job.accessToken=javaxiaobear.cn
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_4、启动项目" tabindex="-1"><a class="header-anchor" href="#_4、启动项目" aria-hidden="true">#</a> 4、启动项目</h4>`,12),y={href:"http://localhost:8080/xxl-job-admin",target:"_blank",rel:"noopener noreferrer"},f=e(`<p>默认登录账号 “admin/123456”, 登录后运行界面如下图所示。</p><p><img src="https://javaxiaobear-1301481032.cos.ap-guangzhou.myqcloud.com/picture-bed/image-20230630144053744.png" alt="image-20230630144053744" loading="lazy"></p><h4 id="_5、ui界面介绍" tabindex="-1"><a class="header-anchor" href="#_5、ui界面介绍" aria-hidden="true">#</a> 5、UI界面介绍</h4><h5 id="_1、运行报表-以图形化来展示了整体的任务执行情况" tabindex="-1"><a class="header-anchor" href="#_1、运行报表-以图形化来展示了整体的任务执行情况" aria-hidden="true">#</a> 1、运行报表：以图形化来展示了整体的任务执行情况</h5><ul><li>任务数量：能够看到调度中心运行的任务数量</li><li>调度次数：调度中心所触发的调度次数</li><li>执行器数量：在整个调度中心中，在线的执行器数量有多少</li></ul><h5 id="_2、任务管理-配置执行任务" tabindex="-1"><a class="header-anchor" href="#_2、任务管理-配置执行任务" aria-hidden="true">#</a> 2、任务管理（配置执行任务）</h5><p><img src="https://javaxiaobear-1301481032.cos.ap-guangzhou.myqcloud.com/picture-bed/image-20230630144304198.png" alt="image-20230630144304198" loading="lazy"></p><ul><li>示例执行器：所用到的执行器</li><li>任务描述：概述该任务是做什么的</li><li>路由策略： <ul><li>第一个：选择第一个机器</li><li>最后一个：选择最后一个机器</li><li>轮询：依次选择执行</li><li>随机：随机选择在线的机器</li><li>一致性HASH：每个任务按照Hash算法固定选择某一台机器，并且所有的任务均匀散列在不同的机器上</li><li>最不经常使用：使用频率最低的机器优先被使用</li><li>最近最久未使用：最久未使用的机器优先被选举</li><li>故障转移：按照顺序依次进行心跳检测，第一个心跳检测成功的机器选定为目标的执行器并且会发起任务调度</li><li>忙碌转移：按照顺序来依次进行空闲检测，第一个空闲检测成功的机器会被选定为目标群机器，并且会发起任务调度</li><li>分片广播：广播触发对于集群中的所有机器执行任务，同时会系统会自动传递分片的参数</li></ul></li><li>Cron：执行规则</li><li>调度过期策略：调度中心错过调度时间的补偿处理策略，包括：忽略、立即补偿触发一次等</li><li>JobHandler：定义执行器的名字</li><li>阻塞处理策略： <ul><li>单机串行：新的调度任务在进入到执行器之后，该调度任务进入FIFO队列，并以串行的方式去进行</li><li>丢弃后续调度：新的调度任务在进入到执行器之后，如果存在相同的且正在运行的调度任务，本次的调度任务请求就会被丢弃掉，并且标记为失败</li><li>覆盖之前的调度：新的调度任务在进入到执行器之后，如果存在相同的且正在运行的调度任务，就会终止掉当前正在运行的调度任务，并且清空队列，运行新的调度任务。</li></ul></li><li>子任务ID：输入子任务的任务id，可填写多个</li><li>任务超时时间：添加任务超时的时候，单位s，设置时间大于0的时候就会生效</li><li>失败重试次数：设置失败重试的次数，设置时间大于0的时候就会生效</li><li>负责人：填写该任务调度的负责人</li><li>报警邮件：出现报警，则发送邮件</li></ul><h5 id="_3、调度日志" tabindex="-1"><a class="header-anchor" href="#_3、调度日志" aria-hidden="true">#</a> 3、调度日志</h5><ul><li>这里是查看调度的日志，根据日志来查看任务具体的执行情况是怎样的</li></ul><h5 id="_4、执行器管理" tabindex="-1"><a class="header-anchor" href="#_4、执行器管理" aria-hidden="true">#</a> 4、执行器管理</h5><ul><li>这里是配置执行器，等待执行器启动的时候都会被调度中心监听加入到地址列表</li></ul><h5 id="_5、用户管理" tabindex="-1"><a class="header-anchor" href="#_5、用户管理" aria-hidden="true">#</a> 5、用户管理</h5><ul><li>可以对用户的一些操作</li></ul><h3 id="_3、整合xxl-job" tabindex="-1"><a class="header-anchor" href="#_3、整合xxl-job" aria-hidden="true">#</a> 3、整合xxl_job</h3><h4 id="_1、项目搭建" tabindex="-1"><a class="header-anchor" href="#_1、项目搭建" aria-hidden="true">#</a> 1、项目搭建</h4><h5 id="_1、引入xxl-job依赖" tabindex="-1"><a class="header-anchor" href="#_1、引入xxl-job依赖" aria-hidden="true">#</a> 1、引入xxl_job依赖</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>repo1<span class="token punctuation">.</span>maven<span class="token punctuation">.</span>org<span class="token operator">/</span>maven2<span class="token operator">/</span>com<span class="token operator">/</span>xuxueli<span class="token operator">/</span>xxl<span class="token operator">-</span>job<span class="token operator">-</span>core<span class="token operator">/</span> <span class="token operator">--</span><span class="token operator">&gt;</span>
<span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span>
    <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>com<span class="token punctuation">.</span>xuxueli<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>
    <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>xxl<span class="token operator">-</span>job<span class="token operator">-</span>core<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span>
    <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">&gt;</span></span><span class="token number">2.3</span><span class="token number">.1</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2、配置yaml" tabindex="-1"><a class="header-anchor" href="#_2、配置yaml" aria-hidden="true">#</a> 2、配置yaml</h5><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">xxl</span><span class="token punctuation">:</span>
  <span class="token key atrule">job</span><span class="token punctuation">:</span>
    <span class="token key atrule">admin</span><span class="token punctuation">:</span>
      <span class="token key atrule">addresses</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//127.0.0.1<span class="token punctuation">:</span>8080/xxl<span class="token punctuation">-</span>job<span class="token punctuation">-</span>admin
      <span class="token comment"># 执行器的名字</span>
    <span class="token key atrule">executor</span><span class="token punctuation">:</span>
      <span class="token key atrule">appname</span><span class="token punctuation">:</span> javaxiaobear<span class="token punctuation">-</span>xxl<span class="token punctuation">-</span>job<span class="token punctuation">-</span>test
    <span class="token key atrule">accessToken</span><span class="token punctuation">:</span> default_token
<span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8081</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3、编写配置类" tabindex="-1"><a class="header-anchor" href="#_3、编写配置类" aria-hidden="true">#</a> 3、编写配置类</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XxlJobConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${xxl.job.admin.addresses}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> adminAddresses<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${xxl.job.executor.appname}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> appName<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${xxl.job.accessToken}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> accessToken<span class="token punctuation">;</span>


    <span class="token comment">//旧版的有bug</span>
    <span class="token comment">//@Bean(initMethod = &quot;start&quot;, destroyMethod = &quot;destroy&quot;)</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">XxlJobSpringExecutor</span> <span class="token function">xxlJobExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; xxl-job config init.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">XxlJobSpringExecutor</span> xxlJobSpringExecutor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XxlJobSpringExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        xxlJobSpringExecutor<span class="token punctuation">.</span><span class="token function">setAdminAddresses</span><span class="token punctuation">(</span>adminAddresses<span class="token punctuation">)</span><span class="token punctuation">;</span>
        xxlJobSpringExecutor<span class="token punctuation">.</span><span class="token function">setAppname</span><span class="token punctuation">(</span>appName<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//        xxlJobSpringExecutor.setIp(ip);</span>
<span class="token comment">//        xxlJobSpringExecutor.setPort(port);</span>
        xxlJobSpringExecutor<span class="token punctuation">.</span><span class="token function">setAccessToken</span><span class="token punctuation">(</span>accessToken<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//        xxlJobSpringExecutor.setLogPath(logPath);</span>
<span class="token comment">//        xxlJobSpringExecutor.setLogRetentionDays(logRetentionDays);</span>

        <span class="token keyword">return</span> xxlJobSpringExecutor<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2、第一个xxl-job分布式调度任务" tabindex="-1"><a class="header-anchor" href="#_2、第一个xxl-job分布式调度任务" aria-hidden="true">#</a> 2、第一个XXL-Job分布式调度任务</h4><h5 id="_1、界面新增一个任务" tabindex="-1"><a class="header-anchor" href="#_1、界面新增一个任务" aria-hidden="true">#</a> 1、界面新增一个任务</h5><p><img src="https://javaxiaobear-1301481032.cos.ap-guangzhou.myqcloud.com/picture-bed/image-20230630152704891.png" alt="image-20230630152704891" loading="lazy"></p><h5 id="_2、新增一个执行器" tabindex="-1"><a class="header-anchor" href="#_2、新增一个执行器" aria-hidden="true">#</a> 2、新增一个执行器</h5><p>这里是因为在配置文件里面用的是自定义的执行器，所以我们需要新增，当然，你可以用默认的执行器</p><img src="https://javaxiaobear-1301481032.cos.ap-guangzhou.myqcloud.com/picture-bed/image-20230630154909704.png" alt="image-20230630154909704" style="zoom:67%;"><h5 id="_3、代码配置handler" tabindex="-1"><a class="header-anchor" href="#_3、代码配置handler" aria-hidden="true">#</a> 3、代码配置handler</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyXxlJobHandler</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@XxlJob</span><span class="token punctuation">(</span><span class="token string">&quot;myXxlJobHandler&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">ReturnT</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">String</span> param<span class="token punctuation">)</span><span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;小熊学Java 任务方法触发成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">ReturnT</span><span class="token punctuation">.</span><span class="token constant">SUCCESS</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_4、重新启动项目" tabindex="-1"><a class="header-anchor" href="#_4、重新启动项目" aria-hidden="true">#</a> 4、重新启动项目</h5><p><img src="https://javaxiaobear-1301481032.cos.ap-guangzhou.myqcloud.com/picture-bed/image-20230630155107647.png" alt="image-20230630155107647" loading="lazy"></p><p><img src="https://javaxiaobear-1301481032.cos.ap-guangzhou.myqcloud.com/picture-bed/image-20230630155113771.png" alt="image-20230630155113771" loading="lazy"></p><h3 id="_4、路由策略" tabindex="-1"><a class="header-anchor" href="#_4、路由策略" aria-hidden="true">#</a> 4、路由策略</h3><ul><li>第一个：选择第一个机器</li><li>最后一个：选择最后一个机器</li><li>轮询：依次选择执行，流量均摊（推荐）</li><li>随机：随机选择在线的机器</li><li>一致性HASH：每个任务按照Hash算法固定选择某一台机器，并且所有的任务均匀散列在不同的机器上</li><li>最不经常使用：使用频率最低的机器优先被使用</li><li>最近最久未使用：最久未使用的机器优先被选举</li><li>故障转移：按照顺序依次进行心跳检测，第一个心跳检测成功的机器选定为目标的执行器并且会发起任务调度</li><li>忙碌转移：按照顺序来依次进行空闲检测，第一个空闲检测成功的机器会被选定为目标群机器，并且会发起任务调度</li><li>分片广播：广播触发对于集群中的所有机器执行任务，同时会系统会自动传递分片的参数</li></ul><h3 id="_5、分片广播" tabindex="-1"><a class="header-anchor" href="#_5、分片广播" aria-hidden="true">#</a> 5、分片广播</h3><h4 id="_1、场景" tabindex="-1"><a class="header-anchor" href="#_1、场景" aria-hidden="true">#</a> 1、场景</h4><blockquote><p>需求</p><ul><li>有一个任务需要处理100W条数据，每条数据的业务逻辑处理要0.1s</li><li>对于普通任务来说，只有一个线程来处理 可能需要10万秒才能处理完，业务则严重受影响</li><li>案例：双十一大促，给1000万用户发营销短信</li></ul></blockquote><p>什么是分片任务</p><ul><li>执行器集群部署，如果任务的路由策略选择【分片广播】，一次任务调度将会【广播触发】对应集群中所有执行器执行一次任务，同时系统自动传递分片参数，执行器可根据分片参数开发分片任务</li><li>需要处理的海量数据，以执行器为划分，每个执行器分配一定的任务数，并行执行</li><li>XXL-Job支持动态扩容执行器集群，从而动态增加分片数量，到达更快处理任务</li><li>分片的值是调度中心分配的</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>// 当前分片数，从0开始，即执行器的序号
int shardIndex = XxlJobHelper.getShardIndex();
//总分片数，执行器集群总机器数量
int shardTotal = XxlJobHelper.getShardTotal();
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://javaxiaobear-1301481032.cos.ap-guangzhou.myqcloud.com/picture-bed/image-20230703140222054.png" alt="image-20230703140222054" loading="lazy"></p><p>解决思路</p><blockquote><ol><li>分片广播</li><li>也可以启动多个job，使用同个jobHandler,通过命令行参数控制</li></ol></blockquote><ul><li><p>如果将100W数据均匀分给集群里的10台机器同时处理，</p></li><li><p>每台机器耗时，1万秒即可，耗时会大大缩短，也能充分利用集群资源</p></li><li><p>在xxl-job里，可以配置执行器集群有10个机器，那么分片总数是10，分片序号0~9 分别对应那10台机器。</p></li><li><p>分片方式</p><ul><li>id % 分片总数 余数是0 的，在第1个执行器上执行</li><li>id % 分片总数 余数是1 的，在第2个执行器上执行</li><li>id % 分片总数 余数是2 的，在第3个执行器上执行</li><li>...</li><li>id % 分片总数 余数是9 的，在第10个执行器上执行</li></ul></li></ul><h4 id="_2、代码编写" tabindex="-1"><a class="header-anchor" href="#_2、代码编写" aria-hidden="true">#</a> 2、代码编写</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
     * 100个用户，分片处理
     */</span>
    <span class="token annotation punctuation">@XxlJob</span><span class="token punctuation">(</span><span class="token string">&quot;myShardingJobHandler&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shardingJobHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">// 当前分片数，从0开始，即执行器的序号</span>
        <span class="token keyword">int</span> shardIndex <span class="token operator">=</span> <span class="token class-name">XxlJobHelper</span><span class="token punctuation">.</span><span class="token function">getShardIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//总分片数，执行器集群总机器数量</span>
        <span class="token keyword">int</span> shardTotal <span class="token operator">=</span> <span class="token class-name">XxlJobHelper</span><span class="token punctuation">.</span><span class="token function">getShardTotal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">XxlJobHelper</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;分片参数：当前分片序号 = {}, 总分片数 = {}&quot;</span><span class="token punctuation">,</span> shardIndex<span class="token punctuation">,</span> shardTotal<span class="token punctuation">)</span><span class="token punctuation">;</span>


        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> allUserIds <span class="token operator">=</span> <span class="token function">getAllUserIds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        allUserIds<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>obj <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">%</span> shardTotal <span class="token operator">==</span> shardIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;第 {} 片, 命中分片开始处理用户id={}&quot;</span><span class="token punctuation">,</span>shardIndex<span class="token punctuation">,</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token function">getAllUserIds</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> ids <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            ids<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> ids<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3、测试" tabindex="-1"><a class="header-anchor" href="#_3、测试" aria-hidden="true">#</a> 3、测试</h4><ol><li>新建一个分片任务</li></ol><img src="https://javaxiaobear-1301481032.cos.ap-guangzhou.myqcloud.com/picture-bed/image-20230703141009035.png" alt="image-20230703141009035" style="zoom:50%;"><ol start="2"><li><p>新建一个服务器实例，直接copy一份</p><p><img src="https://javaxiaobear-1301481032.cos.ap-guangzhou.myqcloud.com/picture-bed/image-20230703141109854.png" alt="image-20230703141109854" loading="lazy"></p></li><li><p>启动系统，点击运行一次</p><p><img src="https://javaxiaobear-1301481032.cos.ap-guangzhou.myqcloud.com/picture-bed/image-20230703141221278.png" alt="image-20230703141221278" loading="lazy"></p></li></ol><h3 id="_6、阻塞策略" tabindex="-1"><a class="header-anchor" href="#_6、阻塞策略" aria-hidden="true">#</a> 6、阻塞策略</h3><blockquote><ul><li>单机串行：新的调度任务在进入到执行器之后，该调度任务进入FIFO队列，并以串行的方式去进行</li><li>丢弃后续调度：新的调度任务在进入到执行器之后，如果存在相同的且正在运行的调度任务，本次的调度任务请求就会被丢弃掉，并且标记为失败</li><li>覆盖之前的调度：新的调度任务在进入到执行器之后，如果存在相同的且正在运行的调度任务，就会终止掉当前正在运行的调度任务，并且清空队列，运行新的调度任务。</li></ul></blockquote>`,53);function w(_,j){const s=o("ExternalLinkIcon");return i(),c("div",null,[u,n("p",null,[a("这样写是不会生效的，由于@Async的AdviceMode默认为PROXY，所以当调用方和被调用方是在同一个类中，无法产生切面，@Async没有被Spring容器管理，可以查看源码，具体详情可参考这篇："),n("a",d,[a("https://juejin.cn/post/6976893903223914527#heading-5"),t(s)])]),r,n("blockquote",null,[k,n("p",null,[a("官方文档："),n("a",v,[a("https://www.xuxueli.com/xxl-job/#二、快速入门"),t(s)])])]),n("ul",null,[n("li",null,[a("官网地址："),n("a",m,[a("https://www.xuxueli.com/xxl-job/"),t(s)])]),n("li",null,[a("GitHub地址："),n("a",b,[a("https://github.com/xuxueli/xxl-job/"),t(s)])])]),h,n("p",null,[a("下载源码导入idea，源码地址："),n("a",g,[a("https://gitee.com/xuxueli0323/xxl-job.git"),t(s)])]),x,n("p",null,[a("调度中心访问地址："),n("a",y,[a("http://localhost:8080/xxl-job-admin"),t(s)]),a(" (该地址执行器将会使用到，作为回调地址)")]),f])}const T=p(l,[["render",w],["__file","task.html.vue"]]);export{T as default};
