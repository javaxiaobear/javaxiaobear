import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{r,o as d,c as t,a as e,b as l,d as o,e as n}from"./app-aeb4ead9.js";const s="/assets/2021110810071449-eae32f8e.png",c="/assets/f03334f4bf1c4e0a8ead64261e16b0a6tplv-k3u1fbpfcp-zoom-in-crop-mark4536000-9da2c135.png",p={},u=n(`<h3 id="_61、什么是数据库事务-事务的特性是什么" tabindex="-1"><a class="header-anchor" href="#_61、什么是数据库事务-事务的特性是什么" aria-hidden="true">#</a> 61、什么是数据库事务？事务的特性是什么？</h3><blockquote><p><strong>事务</strong>：</p><ul><li><p>是数据库操作的最小工作单元，是作为单个逻辑工作单元执行的一系列操作；</p></li><li><p>这些操作作为一个整体一起向系统提交，要么都执行、要么都不执行；</p></li><li><p>事务是一组不可再分割的操作集合（工作逻辑单元）</p></li></ul></blockquote><p>事务都有 <strong>ACID</strong> 特性</p><h3 id="_62、什么是acid" tabindex="-1"><a class="header-anchor" href="#_62、什么是acid" aria-hidden="true">#</a> 62、什么是ACID？</h3><p><strong>1 、原子性</strong> atomicity</p><p>过程的保证</p><p><strong>只做一个步骤</strong>：给钱 ——&gt; 去买 ——&gt; 交回来</p><p>事务是数据库的逻辑工作单位，事务中包含的各操作<strong>要么都做，要么都不做</strong></p><p><strong>2 、一致性</strong> consistency</p><p>结果的保证</p><p><strong>保证要吃完</strong> 刚张嘴挂了，失去一致性</p><p>事 务执行的结果必须是使数据库从一个一致性状态变到另一个一致性状态。因此当数据库只包含成功事务提交的结果时，就说数据库处于一致性状态。如果数据库系统 运行中发生故障，有些事务尚未完成就被迫中断，这些未完成事务对数据库所做的修改有一部分已写入物理数据库，这时数据库就处于一种不正确的状态，或者说是 不一致的状态。</p><p><strong>3 、隔离性</strong> isolation</p><p>并发事务互相干扰</p><p><strong>不被干扰</strong> 刚张嘴别人塞了东西</p><p>一个事务的执行不能其它事务干扰。即一个事务内部的操作及使用的数据对其它并发事务是隔离的，并发执行的各个事务之间不能互相干扰。</p><p><strong>4 、持续性</strong> <strong>永久性</strong> durability</p><p><strong>保存</strong> 吃到肚子里</p><p>也称永久性，指一个事务一旦提交，它对数据库中的数据的改变就应该是永久性的。接下来的其它操作或故障不应该对其执行结果有任何影响。</p><h3 id="_63、并发事务会有哪些问题" tabindex="-1"><a class="header-anchor" href="#_63、并发事务会有哪些问题" aria-hidden="true">#</a> 63、并发事务会有哪些问题？</h3><blockquote><p>多个事务并发执行一定会产生相互争夺资源的问题</p></blockquote><h3 id="_64、什么是脏读" tabindex="-1"><a class="header-anchor" href="#_64、什么是脏读" aria-hidden="true">#</a> 64、什么是脏读</h3><blockquote><p><strong>脏读（Dirty read）</strong></p><p>是一个事务在处理过程中读取了另外一个事务未提交的数据</p><p>当一个事务正在访问数据并且对其进行了修改，但是还没提交事务，这时另外一个事务也访问了这个数据，然后使用了这个数据，因为这个数据的修改还没提交到数据库，所以另外一个事务读取的数据就是“<strong>脏数据</strong>”，这种行为就是“<strong>脏读</strong>”，依据“<strong>脏数据</strong>”所做的操作可能是会出现问题的。</p></blockquote><h3 id="_65、丢失修改" tabindex="-1"><a class="header-anchor" href="#_65、丢失修改" aria-hidden="true">#</a> 65、丢失修改</h3><blockquote><p><strong>修改丢失（Lost of modify）</strong>：*是指一个事务读取一个数据时，另外一个数据也访问了该数据，那么在第一个事务修改了这个数据之后，第二个事务也修改了这个数据。这样第一个事务内的修改结果就被丢失，这种情况就被称为**修改丢失</p></blockquote><h3 id="_66、不可重复读" tabindex="-1"><a class="header-anchor" href="#_66、不可重复读" aria-hidden="true">#</a> 66、不可重复读</h3><blockquote><p><strong>不可重复读（Unrepeatableread）</strong>：<strong>指在一个事务内多</strong>次读取同一数据**，在这个事务还没结束时，另外一个事务也访问了这个数据并<strong>对这个数据进行了修改</strong>，那么就可能造成第一个事务两次读取的数据不一致，这种情况就被称为**不可重复读。</p></blockquote><h3 id="_67、幻读" tabindex="-1"><a class="header-anchor" href="#_67、幻读" aria-hidden="true">#</a> 67、幻读</h3><blockquote><p><strong>幻读（Phantom read）</strong></p><p>是指同一个事务内多次查询返回的结果集总数不一样（比如增加了或者减少了行记录）。</p><p>幻读与不可重复读类似，幻读是指一个事务<strong>读取了几行数据</strong>，这个事务还没结束，接着另外一个事务<strong>插入了一些数据</strong>，在随后的查询中，第一个事务读取到的数据就会<strong>比原本读取到的多</strong>，就好像发生了幻觉一样，所以称为*<em>幻读</em>*。</p></blockquote><h3 id="_68、不可重复读和幻读有什么区别" tabindex="-1"><a class="header-anchor" href="#_68、不可重复读和幻读有什么区别" aria-hidden="true">#</a> 68、不可重复读和幻读有什么区别？</h3><blockquote><p>不可重复读 针对的是一份数据的修改</p><p>幻读 针对的是行数修改</p></blockquote><h3 id="_69、mysql是如何避免事务并发问题的" tabindex="-1"><a class="header-anchor" href="#_69、mysql是如何避免事务并发问题的" aria-hidden="true">#</a> 69、MySQL是如何避免事务并发问题的？</h3><blockquote><p>避免事务并发问题是需要付出性能代价的，此时和分布式系统设计一样（CAP定理及base理论），为了保证一致性就一定会牺牲性能，要做取舍</p><p>在MySQL内部通过加锁的方式实现好了解决方案可供选择，就是配置事务隔离级别</p></blockquote><h3 id="_70、什么是事务隔离级别" tabindex="-1"><a class="header-anchor" href="#_70、什么是事务隔离级别" aria-hidden="true">#</a> 70、什么是事务隔离级别？</h3><div class="language-pgsql line-numbers-mode" data-ext="pgsql"><pre class="language-pgsql"><code>事务隔离级别                    脏读     不可重复读(被修改)    幻读（删减）
读未提交（read-uncommitted）    是        是                    是
不可重复读（read-committed）    否        是                    是
可重复读（repeatable-read）     否        否                    是
串行化（serializable）          否        否                    否
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_71、默认的级别是什么" tabindex="-1"><a class="header-anchor" href="#_71、默认的级别是什么" aria-hidden="true">#</a> 71、默认的级别是什么？</h3><p><code>MySQL InnoDB</code>存储引擎默认的事务隔离级别是<strong>可重复读（REPEATABLE-READ）</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>MySQL 5.7 SELECT @@tx_isolation;
MySQL 8.0 SELECT @@transaction_isolation;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_72、如何选择事务隔离级别" tabindex="-1"><a class="header-anchor" href="#_72、如何选择事务隔离级别" aria-hidden="true">#</a> 72、如何选择事务隔离级别？</h3><blockquote><p>隔离级别越低，事务请求的锁越少相应性能也就越高，如没有特殊要求或有错误发生，使用默认的隔离级别即可，如果系统中有高频读写并且对一致性要求高那么就需要比较高的事务隔离级别甚至串行化。</p></blockquote><h3 id="_73、靠缓存可以提升高事务隔离级别的性能吗" tabindex="-1"><a class="header-anchor" href="#_73、靠缓存可以提升高事务隔离级别的性能吗" aria-hidden="true">#</a> 73、靠缓存可以提升高事务隔离级别的性能吗？</h3><blockquote><p>提升事务级别的目的本质是提供更高的数据一致性，如果前置有缓存，那么缓存只能提供高效读并不能保证数据及时一致性，相反的我们还需要对缓存管理有额外的开销。</p></blockquote><h3 id="_74、mysql事务隔离是如何实现的" tabindex="-1"><a class="header-anchor" href="#_74、mysql事务隔离是如何实现的" aria-hidden="true">#</a> 74、MySQL事务隔离是如何实现的？</h3><blockquote><p>隔离的实现主要是读写锁和MVCC</p></blockquote><h3 id="_75、什么是一致性非锁定读和锁定读" tabindex="-1"><a class="header-anchor" href="#_75、什么是一致性非锁定读和锁定读" aria-hidden="true">#</a> 75、什么是一致性非锁定读和锁定读？</h3><p><strong>锁定读</strong></p><p>使用到了读写锁</p><p>读写锁是最简单直接的的事务隔离实现方式</p><ul><li>每次读操作需要获取一个共享(读)锁，每次写操作需要获取一个写锁。</li><li>共享锁之间不会产生互斥，共享锁和写锁之间、以及写锁与写锁之间会产生互斥。</li><li>当产生锁竞争时，需要等待其中一个操作释放锁后，另一个操作才能获取到锁。</li></ul><p>锁机制，解决的就是<strong>多个事务同时更新数据</strong>，此时必须要有一个加锁的机制</p><ul><li>行锁（记录锁）：解决的就是<strong>多个事务同时更新一行数据</strong></li><li>间隙锁：解决的就是<strong>多个事务同时更新多行数据</strong></li></ul><p>下列操作属于锁定读</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>select ... lock in share mode
select ... for update
insert、update、delete
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>非锁定读</strong></p><p>v10 -&gt; age=18</p><p>v11 -&gt;age=19</p><p>v12 -&gt;age=15</p><p>使用mvcc 多版本控制实现</p><h3 id="_76、说一下mvcc内部细节" tabindex="-1"><a class="header-anchor" href="#_76、说一下mvcc内部细节" aria-hidden="true">#</a> 76、说一下MVCC内部细节</h3>`,59),h={href:"https://dev.MySQL.com/doc/refman/5.7/en/innodb-multi-versioning.html",target:"_blank",rel:"noopener noreferrer"},g=e("p",null,[l("Multi-Version Concurrency Control 多版本并发控制，"),e("em",null,"MVCC"),l(" 是一种并发控制的方法，一般在数据库管理系统中，实现对数据库的并发访问")],-1),b=e("p",null,"InnoDB是一个多版本的存储引擎。它保存有关已更改行的旧版本的信息，以支持并发和回滚等事务特性。这些信息存储在一个称为回滚段的数据结构中的系统表空间或undo表空间中。参见第14.6.3.4节“撤消表空间”。InnoDB使用回滚段中的信息来执行事务回滚所需的撤消操作。它还使用这些信息构建行的早期版本，以实现一致的读取",-1),_=e("p",null,"MVCC 的实现依赖于：隐藏字段、Read View、undo log",-1),m=n('<p><strong>隐藏字段</strong></p><ul><li>A 6-byte <code>DB_TRX_ID</code> 用来标识最近一次对本行记录做修改 (insert 、update) 的事务的标识符 ，即最后一次修改本行记录的事务 id。 如果是 delete 操作， 在 InnoDB 存储引擎内部也属于一次 update 操作，即更新行中的一个特殊位 ，将行标识为己删除，并非真正删除。</li><li>A 7-byte <code>DB_ROLL_PTR</code> 回滚指针，指向该行的 undo log 。如果该行未被更新，则为空.</li><li>A 6-byte <code>DB_ROW_ID</code> 如果没有设置主键且该表没有唯一非空索引时，<code>InnoDB</code> 会使用该 id 来生成聚簇索引.</li></ul><p><strong>Read View</strong></p><p>不同的事务隔离级别中，当有事物在执行过程中修改了数据（更新版本号），在并发事务时需要判断一下版本链中的哪个版本是当前事务可见的。为此InnoDB有了ReadView的概念，使用ReadView来记录和隔离不同事务并发时此记录的哪些版本是对当前访问事物可见的。</p><p><strong>undo log</strong></p><p>除了用来回滚数据，还可以读取可见版本的数据。以此实现非锁定读</p><h3 id="_77、mysql事务一致性-原子性是如何实现的" tabindex="-1"><a class="header-anchor" href="#_77、mysql事务一致性-原子性是如何实现的" aria-hidden="true">#</a> 77、MySQL事务一致性，原子性是如何实现的？</h3><blockquote><p>首先是通过锁和mvcc实现了执行过程中的一致性和原子性</p><p>其次是在灾备方面通过Redo log实现，Redo log会把事务在执行过程中对数据库所做的所有修改都记录下来，在之后系统崩溃重启后可以把事务所做的任何修改都恢复出来。</p></blockquote><h3 id="_78、mysql事务的持久性是如何实现的" tabindex="-1"><a class="header-anchor" href="#_78、mysql事务的持久性是如何实现的" aria-hidden="true">#</a> 78、MySQL事务的持久性是如何实现的？</h3><blockquote><p>使用Redo log保证了事务的持久性。当事务提交时，必须先将事务的所有日志写入日志文件进行持久化，就是我们常说的WAL(write ahead log)机制，如果出现断电重启便可以从redolog中恢复，如果redolog写入失败那么也就意味着修改失败整个事务也就直接回滚了。</p></blockquote><h3 id="_79、表级锁和行级锁有什么区别" tabindex="-1"><a class="header-anchor" href="#_79、表级锁和行级锁有什么区别" aria-hidden="true">#</a> 79、表级锁和行级锁有什么区别？</h3><blockquote><p><strong>表级锁</strong>：串行化（serializable）时，整表加锁，事务访问表数据时需要申请锁，虽然可分为读锁和写锁，但毕竟是锁住整张表，会导致并发能力下降，一般是做ddl处理时使用</p><p><strong>行级锁</strong>：除了串行化（serializable）时 InnoDB使用的都是行级锁，只锁一行数据，其他行数据不影响，并发能力强。</p></blockquote><h3 id="_80、什么是行级锁-mysql如何完成的" tabindex="-1"><a class="header-anchor" href="#_80、什么是行级锁-mysql如何完成的" aria-hidden="true">#</a> 80、什么是行级锁？MySQL如何完成的？</h3><blockquote><p>行级锁实现比较复杂不是单纯锁住一行数据，是由mvcc完成的。</p></blockquote><h3 id="_81、什么是共享锁-读锁" tabindex="-1"><a class="header-anchor" href="#_81、什么是共享锁-读锁" aria-hidden="true">#</a> 81、什么是共享锁（读锁）？</h3><blockquote><p>共享锁或S锁，其它事务可以继续加共享锁，但不能加排它锁</p></blockquote><h3 id="_82、什么是排它锁-写锁-独占锁" tabindex="-1"><a class="header-anchor" href="#_82、什么是排它锁-写锁-独占锁" aria-hidden="true">#</a> 82、什么是排它锁（写锁/独占锁）？</h3><blockquote><p>排它锁或X锁，在进行写操作之前要申请并获得，其它事务不能再获得任何锁。</p></blockquote><h3 id="_83、什么是意向锁" tabindex="-1"><a class="header-anchor" href="#_83、什么是意向锁" aria-hidden="true">#</a> 83、什么是意向锁？</h3><blockquote><p>它分为意向共享锁（IS）和意向排他锁（IX）</p><p>一个事务对一张表的某行添加共享锁前，必须获得对该表一个IS锁或者优先级更高的锁。 一个事务对一张表的某行添加排他锁之前，它必须对该表获取一个IX锁。</p><p>意向锁属于表锁，它不与innodb中的行锁冲突，任意两个意向锁之间也不会产生冲突，但是会与表锁（S锁和X锁）产生冲突</p></blockquote><h3 id="_84、innodb支持哪几种锁" tabindex="-1"><a class="header-anchor" href="#_84、innodb支持哪几种锁" aria-hidden="true">#</a> 84、InnoDB支持哪几种锁？</h3><blockquote><p>表锁，行锁，间隙锁，Next-Key锁等</p><p>在Serializable中读加共享锁，写加排他锁，读写互斥</p><p>两段锁协议，将事务分成两个阶段，加锁阶段和解锁阶段（所以叫两段锁）</p></blockquote><h3 id="_85、当前读和快照读分别是什么" tabindex="-1"><a class="header-anchor" href="#_85、当前读和快照读分别是什么" aria-hidden="true">#</a> 85、当前读和快照读分别是什么？</h3><blockquote><p>当前读 ：在锁定读（使用锁隔离事物）的时候读到的是最新版本的数据</p><p>快照读：可重复读（repeatable-read）下 mvcc生效读取的是数据的快照，并不是最新版本的数据（未提交事物的数据）</p></blockquote><h3 id="_086-什么是xa协议" tabindex="-1"><a class="header-anchor" href="#_086-什么是xa协议" aria-hidden="true">#</a> 086 什么是XA协议？</h3>',25),v={href:"https://dev.MySQL.com/doc/refman/8.0/en/xa.html",target:"_blank",rel:"noopener noreferrer"},f=n('<p><img src="'+s+`" alt="在这里插入图片描述" loading="lazy"></p><ul><li><p>AP（Application Program）：应用程序，定义事务边界（定义事务开始和结束）并访问事务边界内的资源。</p></li><li><p>RM（Resource Manger）资源管理器: 管理共享资源并提供外部访问接口。供外部程序来访问数据库等共享资源。此外，RM还具有事务的回滚能力。</p></li><li><p>TM（Transaction Manager）事务管理器：TM是分布式事务的协调者，TM与每个RM进行通信，负责管理全局事务，分配事务唯一标识，监控事务的执行进度，并负责事务的提交、回滚、失败恢复等。</p></li><li><p>应用程序AP向事务管理器TM发起事务请求</p></li><li><p>TM调用xa_open()建立同资源管理器的会话</p></li><li><p>TM调用xa_start()标记一个事务分支的开头</p></li><li><p>AP访问资源管理器RM并定义操作，比如插入记录操作</p></li><li><p>TM调用xa_end()标记事务分支的结束</p></li><li><p>TM调用xa_prepare()通知RM做好事务分支的提交准备工作。其实就是二阶段提交的提交请求阶段。</p></li><li><p>TM调用xa_commit()通知RM提交事务分支，也就是二阶段提交的提交执行阶段。</p></li><li><p>TM调用xa_close管理与RM的会话。</p><ul><li>这些接口一定要按顺序执行，比如xa_start接口一定要在xa_end之前。此外，这里千万要注意的是事务管理器只是标记事务分支并不执行事务，事务操作最终是由应用程序通知资源管理器完成的。另外，我们来总结下XA的接口</li></ul></li><li><p>xa_start:负责开启或者恢复一个事务分支，并且管理XID到调用线程</p></li><li><p>xa_end:负责取消当前线程与事务分支的关系</p></li><li><p>xa_prepare:负责询问RM 是否准备好了提交事务分支 xa_commit:通知RM提交事务分支</p></li><li><p>xa_rollback:通知RM回滚事务分支</p></li></ul><h3 id="_87、什么是mysql-xa事务" tabindex="-1"><a class="header-anchor" href="#_87、什么是mysql-xa事务" aria-hidden="true">#</a> 87、什么是MySQL xa事务？</h3><p>MySQL的xa事务分为两部分：</p><ol><li>InnoDB内部本地普通事务操作协调数据写入与log写入两阶段提交</li><li>外部分布式事务</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>5.7 SHOW VARIABLES LIKE &#39;%innodb_support_xa%&#39;;
8.0 默认开启无法关闭
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>XA 事务语法示例如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>XA START &#39;自定义事务id&#39;;

SQL语句...

XA END &#39;自定义事务id&#39;;
XA PREPARE &#39;自定义事务id&#39;;
XA COMMIT\\ROLLBACK &#39;自定义事务id&#39;;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>XA PREPARE 执行成功后，事务信息将被持久化。即使会话终止甚至应用服务宕机，只要我们将【自定义事务id】记录下来，后续仍然可以使用它对事务进行 rollback 或者 commit。</p><h3 id="_88、xa事务与普通事务区别是什么" tabindex="-1"><a class="header-anchor" href="#_88、xa事务与普通事务区别是什么" aria-hidden="true">#</a> 88、XA事务与普通事务区别是什么？</h3><blockquote><p>xa事务可以跨库或跨服务器，属于分布式事务，同时xa事务还支撑了InnoDB内部日志两阶段记录</p><p>普通事务只能在单库中执行</p></blockquote><h3 id="_89、什么是2pc-3pc" tabindex="-1"><a class="header-anchor" href="#_89、什么是2pc-3pc" aria-hidden="true">#</a> 89、什么是2pc 3pc？</h3><p>两阶段提交协议与3阶段提交协议，额外增加了参与的角色保证分布式事务完成更完善</p><h3 id="_90、是否使用过select-for-update-会产生哪些操作" tabindex="-1"><a class="header-anchor" href="#_90、是否使用过select-for-update-会产生哪些操作" aria-hidden="true">#</a> 90、是否使用过select for update？会产生哪些操作？</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>查询库存 = 100  0 扣减库存  = -1 99
记录日志 = log
提交  commit
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>select本身是一个查询语句，查询语句是不会产生冲突的一种行为，一般情况下是没有锁的，用select for update 会让select语句产生一个排它锁(X), 这个锁和update的效果一样，会使两个事务无法同时更新一条记录。</p>`,16),x={href:"https://dev.MySQL.com/doc/refman/8.0/en/innodb-locks-set.html",target:"_blank",rel:"noopener noreferrer"},q={href:"https://dev.MySQL.com/doc/refman/8.0/en/select.html",target:"_blank",rel:"noopener noreferrer"},y=n(`<ul><li><p>for update仅适用于InnoDB，且必须在事务块(BEGIN/COMMIT)中才能生效。</p></li><li><p>在进行事务操作时，通过“for update”语句，MySQL会对查询结果集中每行数据都添加排他锁，其他线程对该记录的更新与删除操作都会阻塞。排他锁包含行锁、表锁。</p></li><li><p><strong>InnoDB默认是行级别的锁，在筛选条件中当有明确指定主键或唯一索引列的时候，是行级锁。否则是表级别。</strong></p></li></ul><p>示例</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>SELECT … FOR UPDATE [OF column_list][WAIT n|NOWAIT][SKIP LOCKED];
select * from t for update 会等待行锁释放之后，返回查询结果。
select * from t for update nowait 不等待行锁释放，提示锁冲突，不返回结果
select * from t for update wait 5 等待5秒，若行锁仍未释放，则提示锁冲突，不返回结果
select * from t for update skip locked 查询返回查询结果，但忽略有行锁的记录
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_091说一下mysql死锁的原因和处理方法" tabindex="-1"><a class="header-anchor" href="#_091说一下mysql死锁的原因和处理方法" aria-hidden="true">#</a> 091说一下MySQL死锁的原因和处理方法</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>事务 a

表 t  id=100 更新  加行锁
表 t  id=200 更新  已加锁


事务 b

表 t  id=200 更新 加行锁
表 t  id=100 更新 已加锁
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>死锁与锁等待是两个概念 <ul><li>如未开启事务，多个客户端执行的insert操作</li></ul></li><li>当多个事务同时持有和请求同一资源上的锁而产生循环依赖的时候就产生了死锁。</li></ul><p>排查：</p><ul><li>正在运行的任务 <ul><li>show full processlist; 找到卡主的进程</li></ul></li><li>解开死锁 <ul><li>UNLOCK TABLES ；</li></ul></li><li>查看当前运行的事务 <ul><li>SELECT * FROM information_schema.INNODB_TRX;</li></ul></li><li>当前出现的锁 <ul><li>SELECT * FROM information_schema.INNODB_LOCKS;</li></ul></li><li>观察错误日志</li><li>查看InnoDB锁状态 <ul><li><code>show status like &quot;innodb_row_lock%&quot;;</code></li></ul></li></ul><p>lnnodb_row_lock_current_waits:当前正在等待锁定的数量; lnnodb_row_lock_time :从系统启动到现在锁定的总时间长度，单位ms; Innodb_row_lock_time_avg :每次等待所花平均时间; Innodb_row_lock_time_max:从系统启动到现在等待最长的一次所花的时间; lnnodb_row_lock_waits :从系统启动到现在总共等待的次数。</p><ul><li>kill id 杀死进程</li></ul><p>解决：</p><ul><li><p>死锁无法避免，上线前要进行严格的压力测试</p></li><li><p>快速失败</p><ul><li>innodb_lock_wait_timeout 行锁超时时间</li></ul></li><li><p>拆分sql，严禁大事务</p></li><li><p>充分利用索引，优化索引，尽量把有风险的事务sql使用上覆盖索，优化where条件前缀匹配，提升查询速度，引减少表锁</p></li><li><p>无法避免时：</p><ul><li>操作多张表时，尽量以相同的顺序来访问避免形成等待环路</li><li>单张表时先排序再操作</li><li>使用排它锁 比如 for update</li></ul></li></ul><h3 id="_092-mysql会产生几种日志" tabindex="-1"><a class="header-anchor" href="#_092-mysql会产生几种日志" aria-hidden="true">#</a> 092 MySQL会产生几种日志？</h3><blockquote><ul><li><strong>错误日志（error log）</strong></li></ul><p>error log主要记录MySQL在启动、关闭或者运行过程中的错误信息，在MySQL的配置文件my.cnf中，可以通过log-error=/var/log/MySQLd.log 执行MySQL错误日志的位置。</p><ul><li><strong>慢查询日志（slow query log）</strong></li></ul><p>0.1秒</p><p>Ø MySQL的慢查询日志是MySQL提供的一种日志记录，它用来记录在MySQL中响应时间超过阀值的语句，具体指运行时间超过long_query_time值的SQL，则会被记录到慢查询日志中。</p><p>Ø long_query_time的默认值为10，意思是运行10秒以上的语句。</p><p>Ø 由他来查看哪些SQL超出了我们的最大忍耐时间值，比如一条sql执行超过5秒钟，我们就算慢SQL，希望能收集超过5秒的sql，结合之前explain进行全面分析。</p><p>Ø 默认情况下，MySQL数据库没有开启慢查询日志，需要我们手动来设置这个参数。</p><p>Ø 当然，如果不是调优需要的话，一般不建议启动该参数，因为开启慢查询日志会或多或少带来一定的性能影响。慢查询<strong>日志支持将日志记录写入文件</strong>。</p><p>在生产环境中，如果要手工分析日志，查找、分析SQL，显然是个体力活，MySQL提供了日志分析工具MySQLdumpslow。</p><ul><li><strong>一般查询日志（general log）</strong></li></ul><p>general log 记录了客户端连接信息以及执行的SQL语句信息，通过MySQL的命令</p><ul><li><p><strong>重写日志（redo log）</strong></p></li><li><p><strong>回滚日志（undo log）</strong></p></li><li><p><strong>二进制日志（bin log）</strong>****</p></li></ul></blockquote><h3 id="_93、bin-log作用是什么" tabindex="-1"><a class="header-anchor" href="#_93、bin-log作用是什么" aria-hidden="true">#</a> 93、bin log作用是什么？</h3><blockquote><p>MySQL的bin log日志是用来记录MySQL中增删改时的记录日志。</p><p>当你的一条sql操作对数据库中的内容进行了更新，就会增加一条bin log日志。查询操作不会记录到bin log中。</p><p>bin log最大的用处就是进行<strong>主从复制，以及数据库的恢复。</strong></p></blockquote><h3 id="_94、redo-log作用是什么" tabindex="-1"><a class="header-anchor" href="#_94、redo-log作用是什么" aria-hidden="true">#</a> 94、redo log作用是什么？</h3><blockquote><p>redo log是一种基于磁盘的数据结构，用来在MySQL宕机情况下将不完整的事务执行数据纠正，redo日志记录事务执行后的状态。</p><p>当事务开始后，redo log就开始产生，并且随着事务的执行不断写入redo log file中。redo log file中记录了xxx页做了xx修改的信息，我们都知道数据库的更新操作会在内存中先执行，最后刷入磁盘。</p><p>redo log就是为了恢复更新了内存但是由于宕机等原因没有刷入磁盘中的那部分数据。</p></blockquote><h3 id="_95、undo-log作用是什么" tabindex="-1"><a class="header-anchor" href="#_95、undo-log作用是什么" aria-hidden="true">#</a> 95、undo log作用是什么？</h3><blockquote><p>undo log主要用来回滚到某一个版本，是一种逻辑日志。</p><p>undo log记录的是修改之前的数据，比如：当delete一条记录时，undolog中会记录一条对应的insert记录，从而保证能恢复到数据修改之前。在执行事务回滚的时候，就可以通过undo log中的记录内容并以此进行回滚。</p><p>undo log还可以提供多版本并发控制下的读取（MVCC）。</p></blockquote><h3 id="_96、mysql日志是否实时写入磁盘" tabindex="-1"><a class="header-anchor" href="#_96、mysql日志是否实时写入磁盘" aria-hidden="true">#</a> 96、MySQL日志是否实时写入磁盘？</h3><blockquote><p>每个日志都不一样，这个得分情况考虑</p></blockquote><h3 id="_97、bin-log刷盘机制是如何实现的" tabindex="-1"><a class="header-anchor" href="#_97、bin-log刷盘机制是如何实现的" aria-hidden="true">#</a> 97、bin log刷盘机制是如何实现的？</h3><blockquote><p><code>sync_binlog</code>参数控制着事务提交时binlog写入磁盘的策略</p><p>binlog 写入策略：</p><p><strong>1、sync_binlog=0</strong> 的时候，表示每次提交事务binlog不会马上写入到磁盘，而是先写到page cache,相对于磁盘写入来说写page cache要快得多,不过在MySQL 崩溃的时候会有丢失日志的风险。</p><p><strong>2、sync_binlog=1</strong> 的时候，表示每次提交事务都会执行 fsync 写入到磁盘 ；</p><p><strong>3、sync_binlog的值大于1</strong> 的时候，表示每次提交事务都 先写到page cach，只有等到积累了N个事务之后才fsync 写入到磁盘，同样在此设置下MySQL 崩溃的时候会有丢失N个事务日志的风险。</p><p>很显然三种模式下，sync_binlog=1 是强一致的选择，选择0或者N的情况下在极端情况下就会有丢失日志的风险，具体选择什么模式还是得看系统对于一致性的要求。</p></blockquote><h3 id="_98、redo-log刷盘机制是如何实现的" tabindex="-1"><a class="header-anchor" href="#_98、redo-log刷盘机制是如何实现的" aria-hidden="true">#</a> 98、redo log刷盘机制是如何实现的？</h3><blockquote><p>事务执行过程中，InnoDB会先把redo log日志写到InnoDB的log buffer内存中。MySQL支持用户自定义在commit（这里的commit指的是sql中的commit，在具体的两阶段提交中对应的prepare阶段）时<code>将log buffer中的日志刷log file中的策略</code>，通过<code>innodb_flush_log_at_trx_commit</code>参数设置</p><ul><li><p><code>设置为0</code>：仅将日志写入log file buffer中。该模式下，在事务提交的时候，不会主动触发写入磁盘的操作，仅依靠InnoDB 的后台线程每秒执行一次刷盘操作，即<code>每秒一次write cache和flush disk</code>。</p></li><li><p><code>设置为1</code>：每次事务commit时MySQL都会把log buffer的数据立即写入log file的os cache中，并且立即flush刷到磁盘中去。即<code>每次commit都write cache和flush disk，这是默认设置</code>。</p></li><li><p><code>设置为2</code>：每次事务commit时MySQL都会把log buffer的数据写入log file的os cache 缓存，但是flush刷到磁盘的操作并不会同时进行，仅依靠InnoDB 的后台线程每秒执行一次真正的刷盘操作。即<code>每次commit都write cache，每秒一次flush disk</code>。</p></li></ul></blockquote><h3 id="_99、undo-log刷盘机制是如何实现的" tabindex="-1"><a class="header-anchor" href="#_99、undo-log刷盘机制是如何实现的" aria-hidden="true">#</a> 99、undo log刷盘机制是如何实现的？</h3><blockquote><p>undo log 是一种用于撤销回退的日志。在事务没提交之前，MySQL 会先记录更新前的数据到 undo log 日志文件里面，当事务回滚时，可以利用 undo log 来进行回滚。</p><p>条记录的每一次更新操作产生的 undo log 格式都有一个 roll_pointer 指针和一个 trx_id 事务id：</p><ul><li>通过 trx_id 可以知道该记录是被哪个事务修改的；</li><li>通过 roll_pointer 指针可以将这些 undo log 串成一个链表，这个链表就被称为版本链；</li></ul><p>版本链如下图：</p><p><img src="`+c+'" alt="版本链" loading="lazy"></p><p>undo log 两大作用：</p><ul><li><strong>实现事务回滚，保障事务的原子性</strong>。事务处理过程中，如果出现了错误或者用户执 行了 ROLLBACK 语句，MySQL 可以利用 undo log 中的历史数据将数据恢复到事务开始之前的状态。</li><li><strong>实现 MVCC（多版本并发控制）关键因素之一</strong>。MVCC 是通过 ReadView + undo log 实现的。undo log 为每条记录保存多份历史数据，MySQL 在执行快照读（普通 select 语句）的时候，会根据事务的 Read View 里的信息，顺着 undo log 的版本链找到满足其可见性的记录。</li></ul></blockquote><p>时机顺序：</p><ul><li><p>1 开启事务</p></li><li><p>2 查询数据库中需要更新的字段，加载到内存中 形成数据<strong>脏页</strong></p></li><li><p>3 记录undo log到内存缓冲区（用于回滚和mvcc）并关联redo log -&gt; 可刷盘</p></li><li><p>4 记录 redo log到内存缓冲区 （用于失败重放）准备提交事务 -&gt; 可刷盘</p></li><li><p>5 修改内存中的脏页数据</p></li><li><p>6 提交事务触发redolog刷盘</p></li><li><p>7 undo log 和脏页 刷盘</p></li><li><p>8 事务成功</p></li></ul><h3 id="_100-mysql的binlog有有几种录入格式-分别有什么区别" tabindex="-1"><a class="header-anchor" href="#_100-mysql的binlog有有几种录入格式-分别有什么区别" aria-hidden="true">#</a> 100 MySQL的binlog有有几种录入格式？分别有什么区别？</h3><blockquote><p>logbin格式：</p><ul><li>binlog_format=STATEMENT（默认）：数据操作的时间，同步时不一致 每一条会修改数据的sql语句会记录到binlog中。优点是并不需要记录每一 条sql语句和每一行的 数据变化，减少了binlog日志量，节约IO，提高性能。缺点是在某些情况下会导致 master-slave 中的数据不一致( 如sleep()函数， last_insert_id()，以及user-defined functions(udf)等会 出 现 问题)</li><li>binlog_format=ROW：批量数据操作时，效率低 不记录每条sql语句的上下文信息，仅需记录哪条数据被修改了，修改成什么样 了。而且不会出 现某些特定情况下的存储过程、或function、或trigger的调用和触发无法被正确复制的 问题。缺 点是会产生大量的日志，尤其是alter table的时候会让日志暴涨。</li><li>binlog_format=MIXED：是以上两种level的混合使用，有函数用ROW，没函数用STATEMENT，但是无法识别系统变量</li></ul></blockquote><h3 id="_101-mysql集群同步时为什么使用binlog-优缺点是什么" tabindex="-1"><a class="header-anchor" href="#_101-mysql集群同步时为什么使用binlog-优缺点是什么" aria-hidden="true">#</a> 101 MySQL集群同步时为什么使用binlog？优缺点是什么？</h3><blockquote><ul><li>binlog是MySQL提供的日志，所有存储引擎都可用。</li><li>支持增量同步</li><li>binlog还可以供其他中间件读取，比如同步到hdfs中</li><li>如果复制表数据： <ul><li>不支持某个阶段回放</li><li>直接复制数据过程中一旦中断复制（比如断网），很难确定复制的offset</li></ul></li></ul></blockquote>',34);function k(M,L){const i=r("ExternalLinkIcon");return d(),t("div",null,[u,e("blockquote",null,[e("p",null,[e("a",h,[l("https://dev.MySQL.com/doc/refman/5.7/en/innodb-multi-versioning.html"),o(i)])]),g,b,_]),m,e("p",null,[e("a",v,[l("https://dev.MySQL.com/doc/refman/8.0/en/xa.html"),o(i)])]),f,e("p",null,[e("a",x,[l("https://dev.MySQL.com/doc/refman/8.0/en/innodb-locks-set.html"),o(i)])]),e("p",null,[e("a",q,[l("https://dev.MySQL.com/doc/refman/8.0/en/select.html"),o(i)])]),y])}const I=a(p,[["render",k],["__file","transaction.html.vue"]]);export{I as default};
