import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as l,o as r,c as i,a as n,b as s,d as t,e}from"./app-aeb4ead9.js";const p="/assets/image-20210712152020611-3d692261.png",c="/assets/image-20210712152043638-f07d346c.png",u={},d=e('<h2 id="_1、java-的基本数据类型都有哪些各占几个字节" tabindex="-1"><a class="header-anchor" href="#_1、java-的基本数据类型都有哪些各占几个字节" aria-hidden="true">#</a> 1、Java 的基本数据类型都有哪些各占几个字节？</h2><p><img src="'+p+'" alt="image-20210712152020611" loading="lazy"></p><p><img src="'+c+`" alt="image-20210712152043638" loading="lazy"></p><h2 id="_2、string-是最基本的数据类型吗" tabindex="-1"><a class="header-anchor" href="#_2、string-是最基本的数据类型吗" aria-hidden="true">#</a> 2、String 是最基本的数据类型吗？</h2><blockquote><p>不是，String是引用类型，底层是用char数组实现的。</p><p>Java 中的基本数据类型只有8 个：<code>byte</code>、<code>short</code>、<code>int</code>、<code>long</code>、<code>float</code>、<code>double</code>、<code>char</code>、<code>boolean</code>；除了基本类型（primitive type），剩下的都是引用类型（referencetype）， Java 5 以后引入的枚举类型也算是一种比较特殊的引用类型。</p></blockquote><h2 id="_3、运行short-s1-1-s1-s1-1-会出现什么结果-运行short-s1-1-s1-1-又会出现什么结果" tabindex="-1"><a class="header-anchor" href="#_3、运行short-s1-1-s1-s1-1-会出现什么结果-运行short-s1-1-s1-1-又会出现什么结果" aria-hidden="true">#</a> 3、运行short s1 = 1， s1 = s1 + 1 ；会出现什么结果？运行short s1 = 1; s1 += 1 ；又会出现什么结果？</h2><blockquote><ul><li>运行第一个会报错，因为1是<code>int</code>类型，而s是<code>short</code>类型，通过+运算后s1自动转换成<code>int</code>型。错误提示：Error:(21, 17) java: 不兼容的类型: 从<code>int</code>转换到<code>short</code>可能会有损失</li><li>运行第二个是正确的，s1=2，+1是<code>int</code>类型的操作，s1自动转换<code>int</code>类型</li></ul></blockquote><h2 id="_4、int-和integer-有什么区别" tabindex="-1"><a class="header-anchor" href="#_4、int-和integer-有什么区别" aria-hidden="true">#</a> 4、int 和Integer 有什么区别？</h2><blockquote><p>Java 是一个近乎纯洁的面向对象编程语言，但是为了编程的方便还是引入了基本数据类型，但是为了能够将这些基本数据类型当成对象操作，Java 为每一个基本数据类型都引入了对应的包装类型（wrapper class），int 的包装类就是Integer，从Java 5 开始引入了自动装箱/拆箱机制，使得二者可以相互转换。</p><ul><li>原始类型: boolean， char， byte， short， int， long， float，double</li><li>包装类型：Boolean，Character，Byte，Short，Integer，Long，Float，Double</li></ul></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AutomaticUnboxing</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Integer</span> a1 <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">,</span>a2 <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">,</span>z3 <span class="token operator">=</span> <span class="token number">139</span><span class="token punctuation">,</span> z4 <span class="token operator">=</span><span class="token number">139</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a1 <span class="token operator">==</span> a2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>z3 <span class="token operator">==</span> z4<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>如果整型字面量的值在-128 到127 之间，那么不会new 新的Integer对象，而是直接引用常量池中的Integer 对象</strong></p><h2 id="_5、float-f-3-4-是否正确" tabindex="-1"><a class="header-anchor" href="#_5、float-f-3-4-是否正确" aria-hidden="true">#</a> 5、float f=3.4;是否正确？</h2><blockquote><p>不正确。3.4是双精度。将双精度型（double） 赋值给浮点型（float）属于下转型（ down-casting，也称为窄化）会造成精度损失，因此需要强制类型转换<code>float f =(float)3.4</code>; 或者写成<code>float f =3.4F</code>;。</p></blockquote><h2 id="_6、用最高效率的方法算出2-乘以8-等于多少。" tabindex="-1"><a class="header-anchor" href="#_6、用最高效率的方法算出2-乘以8-等于多少。" aria-hidden="true">#</a> 6、用最高效率的方法算出2 乘以8 等于多少。</h2><blockquote><p>移位运算符：<code>int i = 2 &lt;&lt; 3</code>;</p></blockquote><h2 id="_7、string-类常用方法" tabindex="-1"><a class="header-anchor" href="#_7、string-类常用方法" aria-hidden="true">#</a> 7、String 类常用方法</h2>`,16),k=n("thead",null,[n("tr",null,[n("th",null,"方法"),n("th",{style:{"text-align":"left"}},"描述")])],-1),h={href:"https://www.runoob.com/java/java-string-length.html",target:"_blank",rel:"noopener noreferrer"},g=n("td",{style:{"text-align":"left"}},"返回此字符串的长度",-1),b={href:"https://www.runoob.com/java/java-string-indexof.html",target:"_blank",rel:"noopener noreferrer"},m=n("td",{style:{"text-align":"left"}},"返回指定字符在此字符串中第一次出现处的索引",-1),v={href:"https://www.runoob.com/java/java-string-indexof.html",target:"_blank",rel:"noopener noreferrer"},f=n("td",{style:{"text-align":"left"}},"返回在此字符串中第一次出现指定字符处的索引，从指定的索引开始搜索",-1),_={href:"https://www.runoob.com/java/java-string-lastindexof.html",target:"_blank",rel:"noopener noreferrer"},w=n("td",{style:{"text-align":"left"}},"返回指定字符在此字符串中最后一次出现处的索引",-1),y={href:"https://www.runoob.com/java/java-string-concat.html",target:"_blank",rel:"noopener noreferrer"},S=n("td",{style:{"text-align":"left"}},"将指定字符串连接到此字符串的结尾。",-1),x={href:"https://www.runoob.com/java/java-string-endswith.html",target:"_blank",rel:"noopener noreferrer"},j=n("td",{style:{"text-align":"left"}},"测试此字符串是否以指定的后缀结束。",-1),q={href:"https://www.runoob.com/java/java-string-replace.html",target:"_blank",rel:"noopener noreferrer"},B=n("td",{style:{"text-align":"left"}},"返回一个新的字符串，它是通过用 newChar 替换此字符串中出现的所有 oldChar 得到的。",-1),J={href:"https://www.runoob.com/java/java-string-split.html",target:"_blank",rel:"noopener noreferrer"},z=n("td",{style:{"text-align":"left"}},"根据给定正则表达式的匹配拆分此字符串。",-1),I={href:"https://www.runoob.com/java/java-string-substring.html",target:"_blank",rel:"noopener noreferrer"},C=n("td",{style:{"text-align":"left"}},"返回一个新的字符串，它是此字符串的一个子字符串",-1),O={href:"https://www.runoob.com/java/java-string-trim.html",target:"_blank",rel:"noopener noreferrer"},A=n("td",{style:{"text-align":"left"}},"返回字符串的副本，忽略前导空白和尾部空白",-1),N={href:"https://www.runoob.com/java/java-string-equals.html",target:"_blank",rel:"noopener noreferrer"},E=n("td",{style:{"text-align":"left"}},"将此字符串与指定的对象比较。",-1),M=e(`<h2 id="_8、string-、-stringbuffer-、-stringbuilder-的区别" tabindex="-1"><a class="header-anchor" href="#_8、string-、-stringbuffer-、-stringbuilder-的区别" aria-hidden="true">#</a> 8、String 、 StringBuffer 、 StringBuilder 的区别？</h2><blockquote><p><strong>1、可变与不可变</strong></p><p>String：字符串常量，在修改时不改变自身；若修改，等于生成新的字符串对象</p><p>StringBuffer：在修改时会改变对象自身，每次操作都是对 StringBuffer 对象本身进行修改，不是生成新的对象；使用场景：对字符串经常改变情况下，主要方法： append insert （）等。</p><p><strong>2、线程是否安全</strong></p><p>String：对象定义后不可变，线程安全。</p><p>StringBuffer：是线程安全的（对调用方法加入同步锁），执行效率较慢，适用于多线程下操作字符串缓冲区大量数据。</p><p>StringBuilder ：是线程不安全的，适用于单线程下操作字符串缓冲区大量数据。</p><p><strong>3、共同点</strong></p><p>StringBuilder 与 StringBuffer 有公共父类 AbstractStringBuilder(抽象类)。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">StringBuilder</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractStringBuilder</span> <span class="token keyword">implements</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>Serializable</span><span class="token punctuation">,</span> <span class="token class-name">CharSequence</span>

<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">StringBuffer</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractStringBuilder</span> <span class="token keyword">implements</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>Serializable</span><span class="token punctuation">,</span> <span class="token class-name">CharSequence</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>StringBuilder、StringBuffer 的方法都会调用 AbstractStringBuilder 中的公共方法，如 super.append(...)。只是 StringBuffer 会在方法上加 <strong>synchronized</strong> 关键字，进行同步。最后，如果程序不是多线程的，那么使用StringBuilder 效率高于StringBuffer。</p></blockquote><p><strong>对于三者使用的总结</strong></p><ul><li><p>如果要操作少量的数据用 = String</p></li><li><p>单线程操作字符串缓冲区下操作大量数据 = StringBuilder</p></li><li><p>多线程操作字符串缓冲区下操作大量数据 = StringBuffffer</p></li></ul><h2 id="_9、-while-和do-while-有什么区别" tabindex="-1"><a class="header-anchor" href="#_9、-while-和do-while-有什么区别" aria-hidden="true">#</a> 9、 while 和do while 有什么区别？</h2><blockquote><p>while是先判断再执行；do...while是先执行再判断，同等条件下，后者多执行了一次。</p></blockquote><h2 id="_10、switch-语句能否作用在byte-、long-、string-上" tabindex="-1"><a class="header-anchor" href="#_10、switch-语句能否作用在byte-、long-、string-上" aria-hidden="true">#</a> 10、switch 语句能否作用在byte 、long 、String 上？</h2><blockquote><ul><li>可以用在<code>byte、int、short、char</code>以及它们的封装类上</li><li>不能用在其他基本类型上<code>long、double、float、boolean</code>以及封装类</li><li>jdk1.7及以上，可以用以字符串</li><li>可以用于枚举类型</li></ul></blockquote><h2 id="_11、string-s-new-string-xyz-创建了几个string-对象-二者之间再什么区别。" tabindex="-1"><a class="header-anchor" href="#_11、string-s-new-string-xyz-创建了几个string-对象-二者之间再什么区别。" aria-hidden="true">#</a> 11、<code>String s ＝new String(&quot;xyz&quot;)；</code>，创建了几个String 对象？二者之间再什么区别。</h2><blockquote><p>创建了2个对象，一个是内存中的“xyz”，还有一个是s，指向xyz</p></blockquote><h2 id="_12、自动装箱与拆箱" tabindex="-1"><a class="header-anchor" href="#_12、自动装箱与拆箱" aria-hidden="true">#</a> 12、自动装箱与拆箱</h2><blockquote><p>自动装箱：将基本类型用他们的引用类型包装起来</p><p>自动拆箱：将包装类型转换为基本类型</p></blockquote><h2 id="_13、math-round-11-5-等于多少-math-round-11-5-等于多少" tabindex="-1"><a class="header-anchor" href="#_13、math-round-11-5-等于多少-math-round-11-5-等于多少" aria-hidden="true">#</a> 13、Math.round(11.5) 等于多少？Math.round(-11.5)等于多少？</h2><blockquote><p>Math.round(11.5)的返回值是 12，Math.round(-11.5)的返回值是-11。<strong>四舍五入的原理是在参数上加 0.5 然后进行下取整</strong>。</p></blockquote><h2 id="_14、下面代码运行结果是多少" tabindex="-1"><a class="header-anchor" href="#_14、下面代码运行结果是多少" aria-hidden="true">#</a> 14、下面代码运行结果是多少？</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    count <span class="token operator">=</span> count<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>解析</strong>：++是先赋值，再自增，所以count永远是0</p><h2 id="_15、java中基本类型是如何转换的" tabindex="-1"><a class="header-anchor" href="#_15、java中基本类型是如何转换的" aria-hidden="true">#</a> 15、Java中基本类型是如何转换的？</h2><blockquote><p>基本类型等级从低到高：</p><ul><li>byte、short、int、long、float、double</li><li>char、int、long、float、double</li></ul><p>自动转换：运算过程中，低级可以自动向高级进行转换</p><p>强制转换：高级需要强制转换成低级，可能会丢失精度</p><p><strong>规则</strong>：</p><ul><li>= 右边先自动转换成表达式中最高级的数据类型，再进行运算。整型经过运算会自动转化最低 int 级别，如两个 char 类型的相加，得到的是一个 int 类型的数值。</li><li>= 左边数据类型级别 大于 右边数据类型级别，右边会自动升级</li><li>= 左边数据类型级别 小于 右边数据类型级别，需要强制转换右边数据类型</li><li>char 与 short，char 与 byte 之间需要强转，因为 char 是无符号类型</li></ul></blockquote><h2 id="_16、string-intern-你了解吗" tabindex="-1"><a class="header-anchor" href="#_16、string-intern-你了解吗" aria-hidden="true">#</a> 16、String. intern() 你了解吗？</h2><blockquote><p>String.intern()是一个Native(本地)方法，它的作用是如果<strong>字符串常量池已经包含一个等于此String对象的字符串，则返回字符串常量池中这个字符串的引用</strong>, <strong>否则将当前String对象的引用地址（堆中）添加到字符串常量池中并返回</strong>。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringInternTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      	<span class="token comment">// 基本数据类型之间的 ==  是比较值，引用数据类型 == 比较的是地址值</span>
      	<span class="token comment">// 1：在Java Heap中创建对象 2：在字符串常量池中添加 小熊学Java</span>
        <span class="token class-name">String</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;小熊学Java&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      	<span class="token comment">// 调用 intern 方法，因上一步中已经将 小熊学Java 存入常量池中，这里直接返回常量池 小熊学Java 的引用地址</span>
        <span class="token class-name">String</span> b <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      	<span class="token comment">// a 的地址在Java Heap中 ， b的地址在 常量池中 ，所以结果是flase</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
      	<span class="token comment">// 因为常量池中已经包含小熊学Java，所以直接返回</span>
        <span class="token class-name">String</span> c <span class="token operator">=</span> <span class="token string">&quot;小熊学Java&quot;</span><span class="token punctuation">;</span>
        <span class="token comment">// b c 的地址一致，所以是true</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b <span class="token operator">==</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">//结果</span>
<span class="token boolean">false</span>
<span class="token boolean">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote>`,21);function V(D,L){const a=l("ExternalLinkIcon");return r(),i("div",null,[d,n("table",null,[k,n("tbody",null,[n("tr",null,[n("td",null,[n("a",h,[s(" int length()"),t(a)])]),g]),n("tr",null,[n("td",null,[n("a",b,[s("int indexOf(int ch)"),t(a)])]),m]),n("tr",null,[n("td",null,[n("a",v,[s(" int indexOf(int ch, int fromIndex)"),t(a)])]),f]),n("tr",null,[n("td",null,[n("a",_,[s(" int lastIndexOf(int ch)"),t(a)])]),w]),n("tr",null,[n("td",null,[n("a",y,[s(" String concat(String str)"),t(a)])]),S]),n("tr",null,[n("td",null,[n("a",x,[s(" boolean endsWith(String suffix)"),t(a)])]),j]),n("tr",null,[n("td",null,[n("a",q,[s(" String replace(char oldChar, char newChar)"),t(a)])]),B]),n("tr",null,[n("td",null,[n("a",J,[s("String[] split(String regex)"),t(a)])]),z]),n("tr",null,[n("td",null,[n("a",I,[s("String substring(int beginIndex)"),t(a)])]),C]),n("tr",null,[n("td",null,[n("a",O,[s(" String trim()"),t(a)])]),A]),n("tr",null,[n("td",null,[n("a",N,[s(" boolean equals(Object anObject)"),t(a)])]),E])])]),M])}const T=o(u,[["render",V],["__file","typeOfData.html.vue"]]);export{T as default};
