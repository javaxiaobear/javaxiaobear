import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as e,c as o,a as n,b as s,d as c,e as l}from"./app-aeb4ead9.js";const i="/assets/image-20220616164333032-537bda3f.png",u={},r=n("h3",{id:"_1、hyperloglog用法",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1、hyperloglog用法","aria-hidden":"true"},"#"),s(" 1、HyperLogLog用法")],-1),k=n("p",null,"首先我们搞懂两个概念：",-1),d=n("blockquote",null,[n("p",null,"UV：全称Unique Visitor，也叫独立访客量，是指通过互联网访问、浏览这个网页的自然人。1天内同一个用户多次访问该网站，只记录1次。 PV：全称Page View，也叫页面访问量或点击量，用户每访问网站的一个页面，记录1次PV，用户多次打开页面，则记录多次PV。往往用来衡量网站的流量。")],-1),v=n("p",null,"UV统计在服务端做会比较麻烦，因为要判断该用户是否已经统计过了，需要将统计过的用户信息保存。但是如果每个访问的用户都保存到Redis中，数据量会非常恐怖。",-1),g={href:"https://juejin.cn/post/6844903785744056333#heading-0",target:"_blank",rel:"noopener noreferrer"},m=l('<p>Redis中的HLL是基于string结构实现的，单个HLL的内存永远小于16kb，内存占用低的令人发指！作为代价，其测量结果是概率性的，有小于0.81％的误差。不过对于UV统计来说，这完全可以忽略。</p><p><img src="'+i+`" alt="image-20220616164333032" loading="lazy"></p><h3 id="_2、实现uv统计" tabindex="-1"><a class="header-anchor" href="#_2、实现uv统计" aria-hidden="true">#</a> 2、实现UV统计</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testHyperLogLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> values <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        j <span class="token operator">=</span> i <span class="token operator">%</span> <span class="token number">1000</span><span class="token punctuation">;</span>
        values<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;user_&quot;</span> <span class="token operator">+</span> i<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">999</span> <span class="token operator">==</span> j<span class="token punctuation">)</span><span class="token punctuation">{</span>
            stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForHyperLogLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;hl&quot;</span><span class="token punctuation">,</span>values<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">Long</span> count <span class="token operator">=</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForHyperLogLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token string">&quot;hl&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3、总结" tabindex="-1"><a class="header-anchor" href="#_3、总结" aria-hidden="true">#</a> 3、总结</h3><p>HyperLogLog的作用：</p><blockquote><p>做海量数据的统计工作</p></blockquote><ul><li>HyperLogLog的优点：内存占用极低、性能非常好</li><li>HyperLogLog的缺点：有一定的误差</li></ul>`,8);function _(h,b){const a=p("ExternalLinkIcon");return e(),o("div",null,[r,k,d,v,n("p",null,[s("Hyperloglog(HLL)是从Loglog算法派生的概率算法，用于确定非常大的集合的基数，而不需要存储其所有值。相关算法原理大家可以参考："),n("a",g,[s("https://juejin.cn/post/6844903785744056333#heading-0"),c(a)])]),m])}const y=t(u,[["render",_],["__file","uv_statistics.html.vue"]]);export{y as default};
